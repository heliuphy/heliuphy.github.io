[{"title":"vtk-imageblend图像融合报错","date":"2017-05-07T15:01:49.000Z","path":"2017/05/07/vtk-imageblend图像融合报错/","text":"参考：http://blog.csdn.net/u012526003/article/details/52066403 在运行《VTK图像开发进阶》中5.2_ImageBlendExample.cpp代码时，报错vtkCompositeDataPipeline (004A4880): Input for connection on index 0 input port index 1 for algorithm vtkImageBlend(004A1958) is of type vtkImageData, but a vtkImageStencilData is required.正在无解之际，找到了解决办法，感谢原博主。只需将原程序中12imageBlend-&gt;SetInput(0,reader-&gt;GetOutput());imageBlend-&gt;SetInput(1,imageSource-&gt;GetOutput()); 改为12imageBlend-&gt;AddInputData(reader-&gt;GetOutput());imageBlend-&gt;AddInputData(imageSource-&gt;GetOutput()); 即可。","tags":[{"name":"VTK","slug":"VTK","permalink":"https://heliublog.com/tags/VTK/"}]},{"title":"VTK-5.10.1 to VTK-7.1.1的变动","date":"2017-05-07T15:00:15.000Z","path":"2017/05/07/VTK-5.10.1 TO VTK-7.1.1的变动/","text":"namespace vtkstd ==&gt;&gt; std； SetInput()方法拆分为两个，一个SetInputData，一个SetInputConnection()。 vtk的新版本在vtkImageData类中取消了SetScalarTypeToUnsignedChar()方法；(vtkImageCanvasSource2D类中依然可用)现在仅能用如下方法设置： 1static void SetScalarType(int, vtkInformation* meta_data);","tags":[{"name":"VTK","slug":"VTK","permalink":"https://heliublog.com/tags/VTK/"}]},{"title":"VTK运行Tcl文件","date":"2017-05-07T14:59:20.000Z","path":"2017/05/07/VTK运行Tcl文件/","text":"环境： Win10 64bit 家庭版 VS-2008 VTK-7.1.1 Tcl-8.6 下载ActiveTcl，可以去activestate网站下载。下载完成后安装，例如安装路径是d:\\tcl 注意：安装时一定要以管理员身份运行，不然会加不进系统变量！ 打开CMAKE，Configure完成后，将VTK_WRAP_TCL勾选上，再次Configure，之后将TCL_INTERNAL_PATH更改为\\你的VTK源码解压路径\\VTK-7.1.1\\ThirdParty\\TclTk\\internals\\tk8.6注意：切记:要用“/”而不是“\\”。 打开生成文件夹，使用VTK.SLN生成，之后在INSTALL方案上选“仅用于项目”-&gt;“仅生成INSTALL”安装。 在PATH中添加：D:\\Tcl\\bin;D:\\VTK\\bin;新建系统变量TCLLIBPATH，内容设为\\你的VTK生成文件夹\\VTK-7.1.1-bin\\Wrapping\\Tcl\\Debug完成。遇到的坑： 安装Tcl时，未按照管理员身份运行，导致Tcl没有加进系统变量。 未设置TCL_INTERNAL_PATH，因为这个的参数默认是错的。这两条导致编译VTK.sln时，有80多个项目编译失败。 由于TCLLIBPATH的设置错误，导致打开Tcl文件时提示can&#39;t find package vtk。 参考：http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html","tags":[{"name":"VTK","slug":"VTK","permalink":"https://heliublog.com/tags/VTK/"},{"name":"Tcl","slug":"Tcl","permalink":"https://heliublog.com/tags/Tcl/"}]},{"title":"VTK-VS2008编译教程","date":"2017-05-07T14:57:45.000Z","path":"2017/05/07/VTK-VS2008编译教程/","text":"准备工作环境 Win10 64bit 家庭版 VS2008 SP1 Qt 4.8.4 CMake 3.8.0 64bit-win VTK-7.1.1下载将上述组件下载安装好注意事项： Qt需要下载两个东西： qt-win-opensource-4.8.4-vs2008.exe qt-vs-addin-1.1.11-opensource.exe直接谷歌搜索文件名即可找到下载地址。 VTK-7.1.1可以下载data也可以不下载。安装安装Qt按照提示一步步安装即可安装 CMAKE下载后安装即可编译VTK 新建两个文件夹，一个src，用来存放源代码；一个bin，用来存放二进制文件。 将VTK-7.1.1.zip解压至src。 打开CMAKE，Where is the source code 填写src的绝对路径，Where to build the binaries 填写bin的绝对路径，比那一成功后的文件就放在这里。 点击Config，选择VS2008，确定后，开始编译，过程大约几分钟。 待编译完成后，会出现许多红色的选项，这些都是需要修改的选项。勾选CMake界面上的Grouped和Advanced, Grouped是对配置分组,Advanced是显示高级配置. VTK_Group_Qt 选中,使用Qt. CMAKE_INSTALL_PREFIX 修改为VTK/vsvtk 。这个目录可以自行指定,当VTK编译完成后,安装时,会将VTK安装到指定的目录。 INSTALL_BIN_DIRINSTALL_INC_DIRINSTALL_LIB_DIRINSTALL_MAN_DIRINSTALL_PKGCONFIG_DIR这些也分别更改到VTK\\vsvtk 的相应目录下。 configuer generate 完成后，打开VTK\\bin 用VS打开构建目录下的VTK.sln解决方案。 等待IDE解析,解析完成后,状态栏会显示就绪.解析过程比较耗时,耐心等待VS解析完成。 生成成功之后,就可以安装VTK了,右击INSTALL项目,选择仅生成INSTALL.然后就开始安装VTK了,安装完成,就可以在之前设置的prefix目录下看到安装之后的VTK. 设置环境变量，将VTK\\vsvtk 加入环境变量。案例运行新建文件夹Example，在文件夹下新建src和bin。进入网址http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder复制源代码。若VTK_DIR not found ，则手动填写为VTL\\bin。configure,generate。用VS打开工程并编译。打开cmd，进入所在目录，运行*.exe即可。","tags":[{"name":"VTK","slug":"VTK","permalink":"https://heliublog.com/tags/VTK/"},{"name":"visualstudio","slug":"visualstudio","permalink":"https://heliublog.com/tags/visualstudio/"}]},{"title":"如何利用Dropbox备份指定文件夹","date":"2017-05-07T14:56:06.000Z","path":"2017/05/07/如何利用Dropbox备份指定文件夹/","text":"Dropbox原生只带同步单文件夹的功能，但如果我想同步其他的文件夹怎么办呢？不能把那些文件夹都复制一份到该目录下吧。所以可用mklink的方法来同步。(Win Vista 及以上可用) 命令如下，比如我的Dropbox备份文件夹为C:\\Dropbox，而我想备份的文件夹为d:\\backup，注意必须用管理员模式运行cmd 1mklink /d &quot;C:\\Dropbox&quot; D:\\backup","tags":[{"name":"Dropbox","slug":"Dropbox","permalink":"https://heliublog.com/tags/Dropbox/"}]},{"title":"利用Dropbox备份vps中的文件","date":"2017-05-07T14:53:30.000Z","path":"2017/05/07/利用Dropbox备份vps中的文件/","text":"部分内容参考自http://www.pythoner.com/324.html 1.Linux 中安装Dropbox Uploader123wget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.shchmod+x dropbox_uploader.sh./dropbox_uploader.sh 2.新建Dropbox App 需要通过浏览器访问 https://www.dropbox.com/developers/apps 页面，并创建一个新的 Dropbox app。（具体根据上一步中脚本的提示），”the type of access”根据自己的要求选择。 创建好后，将会进入一个新的页面，复制里面的app key 和 app secret到终端窗口。完成后，dropboxploader.sh 将产生一个oAUTH网址，进去授权就OK了。 现在就可以上传文件了。我此处是做的leanote备份，命令如下。 123./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf 也可以做个脚本，定时运行 脚本如下： 12345678910#!/bin/bashcd /root/bin#开始上传./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.confecho -e &quot;Backup Done!&quot; 定时运行方法：（添加crontab） 1234crontab –e添加：30 3 * * * /root/bin/backup.sh这样，就可以每天凌晨3：30自动备份到Dropbox了。","tags":[{"name":"VPS","slug":"VPS","permalink":"https://heliublog.com/tags/VPS/"},{"name":"Dropbox","slug":"Dropbox","permalink":"https://heliublog.com/tags/Dropbox/"}]},{"title":"Leanote安装教程","date":"2017-05-07T14:47:13.000Z","path":"2017/05/07/Leanote安装教程/","text":"此教程参考官方教程Leanote安装教程而成，只是做了一点修改。 下载Leanote此处我下载的是二进制版，假设下载到/home/wwwroot/blog.heleou.com/web/下，那么下载后解压，命令如下：1tar -xzvf leanote-*.tar.gz 安装数据库-mongodb到 http://www.mongodb.org/downloads 去下载 64位linux mongodb2.6.4下载链接: http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download64位linux mongodb 3.0.1下载链接: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz 我下载的是3.0.1版，这两个版本的拷贝数据库操作不太一样，到后面的时候需要稍微注意一下。 还是直接解压1tar -xzvf mongodb-linux-x86_64-3.0.1.tgz/ 为了快速使用mongodb的命令, 可以配置环境变量, 编辑/etc/profile 将mongodb bin路径加入即可.（写到文件最后即可）123vim /etc/profileexport PATH=$PATH:/home/wwwroot/blog.heleou.com/web/mongodb/binsource /etc/profile 简单使用mongoDB先在/home/wwwroot/blog.heleou.com/web下新建一个目录data存放mongodb数据 开启mongodb1mongod --dbpath /home/wwwroot/blog.heleou.com/web/data 附：后台开启命令：1mongod --fork --dbpath /home/wwwroot/blog.heleou.com/web/data --logpath /home/wwwroot/blog.heleou.com/web/logpath1/mongodb.log --logpath是日志路径，自己设置即可。 这时mongod已经启动了 重新打开一个终端, 使用下mongodb 12&gt; mongo&gt; show dbs mongodb安装到此为止, 下面为mongodb导入数据leanote初始数据 导入初始数据v3的导入命令1mongorestore -h localhost -d leanote --dir /home/wwwroot/blog.heleou.com/web/leanote/mongodb_backup/leanote_install_data/ 配置leanote1vim conf/app.conf 这里要做的有两件事，一个是修个URL，一个是修改安全信息。 修改网址：12http.port=80site.url=http://blog.heleou.com 当然你还需要将a.com绑定ip到Leanote服务器. 如果服务器上已有其它程序运行了80端口, 怎么办呢? 请google或百度下 “使用nginx分发请求到不同端口”. 运行leanote注意 在此之前请确保mongodb已在运行! 新开一个窗口, 运行: 1234567cd /home/wwwroot/blog.heleou.com/web/leanote/binbash run.sh (或 sh run.sh)# 最后出现以下信息证明运行成功...TRACE 2013/06/06 15:01:27 watcher.go:72: Watching: /home/life/leanote/bin/src/github.com/leanote/leanote/conf/routesGo to /@tests to run the tests.Listening on :80... 附：后台运行方法 此时按Crtl + z暂停进程，然后敲入bg命令即可，退出终端还可继续运行。","tags":[{"name":"VPS","slug":"VPS","permalink":"https://heliublog.com/tags/VPS/"},{"name":"leanote","slug":"leanote","permalink":"https://heliublog.com/tags/leanote/"},{"name":"web","slug":"web","permalink":"https://heliublog.com/tags/web/"}]},{"title":"VTK提示MetaImage cannot read data from file","date":"2017-05-01T04:43:25.125Z","path":"2017/05/01/VTK提示MetaImage cannot read data from file/","text":"在运行《VTK图形图像进阶》第五章5.3_ImageResliceExample.cpp时，会提示MetaImage cannot read data from file或者显示窗口是空白，后来搜索了VTKExample中的例子，发现可以这样解决：将原来程序中的语句1imgActor-&gt;SetInputData(colorMap-&gt;GetOutput()); 更改为：1imgActor-&gt;GetMapper()-&gt;SetInputConnection(colorMap-&gt;GetOutputPort()); 记得在程序开头载入头文件：1#include &lt;vtkImageMapper3D.h&gt; VTKExample:http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader","tags":[{"name":"VTK","slug":"VTK","permalink":"https://heliublog.com/tags/VTK/"}]},{"title":"搭建hexo博客小记——hexo系列文章（一）","date":"2017-04-26T12:26:32.251Z","path":"2017/04/26/搭建hexo博客小记/","text":"引言本文主要介绍在Github下搭建Hexo博客。总体说来，搭建Hexo总共需要两步： 第一部分，部署本地博客，也就是在你的电脑上搭建起来Web环境； 第二部分，生成静态页面，并上传到Github上去。 搭建本地博客系统搭建本地博客系统首先要部署环境，即Node.js和Git。 Node.js的安装可以点此下载nodejs，并按照步骤一步步安装；一切默认即可； Git的安装git bash，点此下载即可。部署好本地环境，便可以开始安装博客系统Hexo了 Hexo的安装Hexo可直接用npm安装，可在电脑任意文件夹下右键Git Bash Here，进去后，在命令行中输入 npm install -g hexo 安装依赖包npm install 发布本地博客到上一步为止，本地博客已搭建完成，下面我们可以发布本地博客看看效果：（即生成静态页面） hexo generate hexo server 当然，也可以用简写： hexo g hexo s 本地服务器开启后，我们就可以进入http://localhost:4000浏览本地博客了。 上传本地文件到Github申请账号并建立仓库。账号自行申请，建立仓库即在页面右上角的+除新建一个repository。但是命名有要求，必须用你的用户名加上github.io来命名仓库名。比如你的用户名为user123，那么就命名为user123.github.io。 获取SSH公钥，并与Github账号绑定。设置邮箱和用户名git config --global user.email &quot;user123@gmail.com&quot; git config –global user.name “user123” 生成密钥ssh-keygen -t rsa -C &quot;user@gmail.com&quot; 命令运行后，会在C:\\Users\\你的计算机名\\.ssh中找到id_rsa.pub这个文件，貌似是pubication的文件，但是我用office打不开，所以不管它了，如果有老兄知道这个究竟是用什么打开比较好，可以在评论区告诉我。不过它也是可以用txt打开的，将其中的内容复制到以下位置： 先登录github，点击右上角你的账户头像，进入settings，进入SSH key选项卡，将id_rsa.pub中的所有内容添加进去即可。 更改博客配置，为上传做准备。打开D:\\hexo目录下的配置文件_config.yml（推荐用软件Sublime Text打开，不要用txt打开，因为这要UTF-8编码，而txt不会编码），翻到最下面，并改成以下内容，把user123g替换成你的用户名即可 deploy: type: git repository: https://github.com/user123/user123.github.io.git branch: master 注意：type后面一定要是git，不要填Github。这是最新版hexo的要求。还有就是上面配置文件的语法较为严格type:后面一定要留一个空格，repository，branch也一样。 上传博客内容先生成静态文件hexo g 部署前先输入以下命令，不然会出现error deployer not found:github的报错。npm install hexo-deployer-git --save 上传文档（部署）hexo d 待出现INFO Deploy done: git即成功。成功后，进入网址http://user123..github.io浏览查看。 至此，所有工作都已完成，如果想更改主题什么的，可以看我后续的博客。有问题欢迎大家留言。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://heliublog.com/tags/Hexo/"},{"name":"web","slug":"web","permalink":"https://heliublog.com/tags/web/"},{"name":"博客","slug":"博客","permalink":"https://heliublog.com/tags/博客/"},{"name":"网站","slug":"网站","permalink":"https://heliublog.com/tags/网站/"}]},{"title":"利用KeePass2.x进行ftp或webdev同步","date":"2017-04-26T12:26:32.246Z","path":"2017/04/26/利用Keepass2.x进行ftp或webdev同步/","text":"方法参考http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html 前言上篇博文介绍了利用软件Keepass保存密码。其实借助Dropbox或者其他同步软件将数据库.kpbx文件进行备份也很简单。但是由于某些原因，Dropbox很难上去。所以突然想到能否将文件保存在我的vps服务器上。在网上搜索教程就找到了这个方法。 同步其实同步很简单，只要借助KeePass自带的URL同步功能即可。如下图： 也就是选择“与URL同步”，但是要注意，必须现在指定位置建立一个.kpdb数据库文件，同步地址就填写该文件地址。 自动同步手动同步很麻烦，那么怎么设置自动同步呢？这里可以借助KeePass自带的触发器功能，有点像Windows的“计划任务”，以下方法可以实现本地保存后，立马服务器同步的功能。 “属性”选项卡，命名该触发器，如 SavedSync.（注意，后面动作选择“更改触发器 开/关 状态”时触发器名称只能手动输入，无法选择，所以这里命名还是从简，具体描述可以写到下面的注释栏。）同时勾选“启用”和“启动时打开”复选框。 “事件”选项卡，添加事件，选择“已保存数据库文件”，下面的文件/URL - 比较和过滤器可以无视。不过如果有多个数据库文件需要同步，则可以根据待保存的数据库文件名设定后续同步动作。这里我的设置如下： “条件”选项卡不加入任何条件。你也可以选择同步到 URL 文件时选择条件“远程主机可以连接(ping)”，这样只有当 URL 文件可以访问时才同步。不过我倾向于不加入这个条件，这样即使后面无法完成同步操作，也会有弹窗提示，让我们能更清楚当前的同步状态。 我这里只做了简写，如果遇到某些问题，或者想更加详细地了解“触发器”功能，请访问原博客地址：http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html 在此，对原作者表示感谢！","tags":[{"name":"KeePass","slug":"KeePass","permalink":"https://heliublog.com/tags/KeePass/"},{"name":"Chrome","slug":"Chrome","permalink":"https://heliublog.com/tags/Chrome/"}]},{"title":"coding和github同时使用","date":"2017-04-26T12:26:32.215Z","path":"2017/04/26/coding和github同时使用/","text":"引言先贴几个我的参考网站： 非常好的git学习站（入门）Git管理多个远程仓库(以Github和Coding为例)如何在同一台电脑上使用两个github,一个往coding推，一个往github推，亲测有效哦如何在同一台电脑上使用两个github账户执行ssh-add时出现Could not open a connection to your authentication agentgithub常见操作和常见错误！错误提示：fatal: remote origin already exists.","tags":[{"name":"coding","slug":"coding","permalink":"https://heliublog.com/tags/coding/"},{"name":"Github","slug":"Github","permalink":"https://heliublog.com/tags/Github/"},{"name":"Git","slug":"Git","permalink":"https://heliublog.com/tags/Git/"}]},{"title":"VPS服务器搭建ghost blog","date":"2017-04-26T12:26:32.215Z","path":"2017/04/26/VPS服务器搭建ghost blog/","text":"####前传 &#160;&#160;无意中看到markdown语法，立马就喜欢上它，所以就想博客能不能也用这种语法写，因为我的博客原来一直用wordpress来搞，第一个想到的当然是用插件，当然也下到了，不过估计是主题css的问题，代码框老显示不出来，对于想要代码框的我来说实在是不能忍，就上网搜有没有其他的博客工具，哈哈终于找到了它，ghostblog！ &#160;&#160;但是安装下来着实费了不少功夫。总结起来比较简便的方法还是AMH+Node.js注：以下步骤引用自：http://www.tuicool.com/articles/jQnIJf3 安装AMH，网上有详细教程 安装Node.js 也是网上的教程，不过有些gcc版本可能支持不了太新的Node.js 安装ghost 新建数据库 登陆AMH面板，进入数据库，快速建库，很简单。 新建站点 登陆AMH面板，点击虚拟主机，新建虚拟主机，这也很简单。 安装Ghost程序 这里我们使用的是 http://ghostchina.com/ 发布的中文版Ghost。 登陆ssh，运行命令， wget http://dl.ghostchina.com/Ghost-0.5.9-zh-full.zip //下载Ghost到VPS unzip Ghost-0.5.9-zh-full.zip -d ghost //解压Ghost-0.5.9-zh-full.zip并xiu修改文件夹名为ghost 如没有安装unzip，请执行 sudo yum install unzip 来安装， &#160;&#160;到这里需要注意，ghost文件夹里的所有文件全部移动到之前你新建虚拟主机的web根目录下，不然会出错，文件移动号后，进入虚拟主机的web根目录下 cd /虚拟主机web根目录路径 //进入虚拟主机web根目录，此步骤不能少 cp config.example.js config.js //复制config.example.js成config.js vim config.js //用vim编辑config.js文件 将相关位置修改成以下这样： production: { url: &apos;http://your_blog_url&apos;, mail: {}, database: { client: &apos;mysql&apos;, connection: { host : &apos;127.0.0.1&apos;, user : &apos;root&apos;, //暂且直接用root账户 password : &apos;password&apos;, //你的root账户密码 database : &apos;ghost&apos;, //你之前建立的数据库名 charset : &apos;utf8&apos; }, debug: false }, server: { // Host to be passed to node&apos;s `net.Server#listen()` host: &apos;127.0.0.1&apos;,//改为0.0.0.0，否则他人无法访问 // Port to be passed to node&apos;s `net.Server#listen()`, for iisnode set this to `process.env.PORT` port: &apos;2368&apos; } }, 这里说一下vim编辑器的一般用法： i: 进入插入编辑模式 ESC: 退出编辑模式 :x : 退出并保存文件（退出编辑模式下使用） 配置Nginx 由于之前你新建的虚拟主机的Nginx配置是为php服务的，所以，我们要将其进行修改成为node.js服务， vim /usr/local/nginx/conf/***.conf //进入Nginx配置文件目录,并编辑与你新建的虚拟主机相应的Nginx配置文件 清空里面的内容，替换成以下： server { listen 80; server_name xxx.com www.xxxx.com; //替换为你自己的域名！ location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:2368; } } 然后进AMH控制面板重启一下Nginx， npm start --production //启动Ghost，如果不出差错，在浏览器输入你的域名就可以看见Ghost的界面了，--production不能少 别以为到这就结束了，目前Ghost在我们SSH断开后就会结束进程，所以我们继续： 安装forever守护Ghost进程 为了让Ghost程序能够后台运行不中断，我们还得再安装个工具，就是forever，使用-g参数就是在全局模式中安装，这样我们就可以再任何地方都能使用forever命令了。 以下命令都请在网站根目录下运行 npm install forever -g //forever的安装命令 NODE_ENV=production forever start index.js //安装forever后的Ghost启动命令 好了，Ghost就此安装完成 Ghost相关命令： //以下命令都请在网站根目录下运行 NODE_ENV=production forever start index.js //启动Ghost NODE_ENV=production forever stop index.js //停止Ghost NODE_ENV=production forever restart index.js //重启Ghost 现在，你就可以通过AMH控制面板进行数据管理、在线的文件编辑和上传 同样，你也可以按正常步骤新建一个php网站。","tags":[{"name":"ghost blog","slug":"ghost-blog","permalink":"https://heliublog.com/tags/ghost-blog/"}]},{"title":"VPS+Hexo+Dropbox创建个人博客","date":"2017-04-26T12:26:32.215Z","path":"2017/04/26/VPS+Hexo+Dropbox创建个人博客/","text":"本文参考以下文章完成：1.用Hexo+Vps搭建博客并用Dropbox同步自动发布2.VPS+Dropbox+markeditor打造Hexo完美体验 (长期更新)3.使用 Dropbox 和 VPS 实现实时部署 Hexo 博客 废话少说，直接进入正题： VPS为CentOS 6.8 x64 ,512MB内存 安装需要的所有软件安装 Git1yum install git-core 安装NodeJS123456% 前三步是先安装EPEL# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm # wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm# rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm% 安装nodeyum install nodejs npm --enablerepo=epel 安装Dropbox1234567891011cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -%然后，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序.~/.dropbox-dist/dropboxd%下载官方提供的 cli 来控制和管理Dropboxwget https://linux.dropbox.com/packages/dropbox.py%更改权限:chmod +x ./dropbox.py%启动Dropbox:./dropbox.py start y关闭局域网广播:./dropbox.py lansync n 安装Hexo12345npm install -g hexo-clicd Dropboxmkdir hexocd hexohexo init 安装Nginx这里推荐不是很熟悉Nginx设置的用以下链接提供的一键安装包安装，可以只安装Nginx，自动设置lnmp、lamp、lnmpa一键安装包这里设置时，可以将主机目录设置为dropbox的同步目录1/root/Dropbox/hexo/public 添加权限：123chmod -R 755 /root/Dropbox/hexo/publicchown www:www /root/Dropbox/hexo/publicchmod +x /root/Dropbox/ /root/Dropbox/hexo/ 安装incron12yum install incronservice incrond start 同步发布incron 监测文件夹配置1incrontab -e 在其中添加：12/root/Dropbox/hexo/source/_posts/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash/root/Dropbox/hexo/theme/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash runhexo.bash:12345#!/usr/bin/env bashexec 200&lt;$0flock -n 200 || exit 1sleep 10cd /root/Dropbox/hexo &amp;&amp; hexo g","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://heliublog.com/tags/Hexo/"},{"name":"blog","slug":"blog","permalink":"https://heliublog.com/tags/blog/"},{"name":"VPS","slug":"VPS","permalink":"https://heliublog.com/tags/VPS/"},{"name":"Dropbox","slug":"Dropbox","permalink":"https://heliublog.com/tags/Dropbox/"}]},{"title":"beamer的theme","date":"2017-04-26T12:26:32.215Z","path":"2017/04/26/beamer的theme/","text":"发现两个不错的网站 所有自带的主题列表 https://www.hartwork.org/beamer-theme-matrix/ 这个网站也有不少好主题 https://latex.simon04.net/","tags":[{"name":"latex","slug":"latex","permalink":"https://heliublog.com/tags/latex/"}]},{"title":"KeePass+KeePassHTTP+chromeIPass储存个人密码","date":"2017-04-26T12:26:32.199Z","path":"2017/04/26/KeePass/","text":"前言现在密码越来越多，但是为了密码安全还是不愿所有网站用同一个密码。所以就想到了用密码管理软件。尝试过1Password和Lastpass，可惜都收费。所以找到了KeePass，不仅免费，还开源。支持多平台。结合插件，可以实现在chrome上自动填写密码。 本文参考http://devzc.com/post/465写作而成，再次对原作者表示感谢。 安装步骤 首先从以下网址下载所需文件 KeePass主体程序:http://keepass.info/download.html KeePassHTTP扩展下载:https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true源码: https://github.com/pfn/keepasshttp/ chromeIPass:Chrome应用商店搜索[chromeIPass],安装即可;chromeIPass源码: https://github.com/pfn/passifox 依次安装以上文件。注意KeePassHTTP的配置： 将KeePassHttp.plgx放在KeePass.exe同目录下,重启KeePass。并单击工具下的“KeePassHttp Options”。 按照如下图配置： 点击Chrome上的chromeIPass图标，会出现Connect按钮,点击进去； Key_Name自己起名 保存后，重新点击chromeIPass，若出现以下信息，则说明成功：","tags":[{"name":"KeePass","slug":"KeePass","permalink":"https://heliublog.com/tags/KeePass/"},{"name":"Chrome","slug":"Chrome","permalink":"https://heliublog.com/tags/Chrome/"}]},{"title":"Endnote的style","date":"2017-04-26T12:26:32.183Z","path":"2017/04/26/Endnote的style/","text":"参考文献style: Chinese Std GBT7714 附上 下载地址 安装方法： 拷到…/style 文件夹下即可。","tags":[{"name":"Endnote","slug":"Endnote","permalink":"https://heliublog.com/tags/Endnote/"},{"name":"style","slug":"style","permalink":"https://heliublog.com/tags/style/"}]},{"title":"Hexo系列教程（二）——利用Swiftype建立站内搜索","date":"2016-05-14T08:12:29.000Z","path":"2016/05/14/Hexo利用Swiftype建立站内搜索/","text":"部分内容引用自http://www.jianshu.com/p/2010ad07d960 原文链接：http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/作者：drunkevil 说明此方法是基于jacman主题，其余主题可能稍有不同 Swiftype账号注册及搜索引擎开通 进入Swiftype官网注册账号，并根据提示初始化搜索引擎。 获得js代码，复制到jacman\\layout\\ _partial目录下的footer.ejs文件，在最后一个&lt;/div&gt;标签前即可。 本地操作 在jacman主题下的_config.yml文件末尾添加如下代码： 12swift_search: enable: true 在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为： 123layout: searchtitle: search--- 找到jacman\\layout\\ _partial目录下的header.ejs文件，在其中添加如下代码： 12345&lt;% if (theme.swift_search.enable)&#123; %&gt; &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;st-search-inpu&quot; maxlength=&quot;20&quot; placeholder=&quot;搜索&quot; /&gt; &lt;/form&gt;&lt;% &#125; 将jacman\\layout\\ _partial目录下的search.ejs中的内容替换为如下代码（主要用来控制结果的显示样式，可根据个人爱好修改）： 12345678910111213141516171819202122232425262728293031323334&lt;% if(theme.swift_search.enable) &#123; %&gt; &lt;div id=&quot;container&quot; class=&quot;page&quot;&gt; &lt;div id=&quot;st-results-container&quot; style=&quot;width:70%; margin:1.5em auto&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;&lt;style&gt;.st-result-text &#123;background: #fafafa;display: block;border-left: 0.5em solid #ccc;-webkit-transition: border-left 0.45s;-moz-transition: border-left 0.45s;-o-transition: border-left 0.45s;-ms-transition: border-left 0.45s;transition: border-left 0.45s;padding: 0.5em;&#125;@media only screen and (min-width: 768px) &#123;.st-result-text &#123;padding: 1em; &#125;&#125;.st-result-text:hover &#123; border-left: 0.5em solid #ea6753; &#125;.st-result-text h3 a&#123; color: #2ca6cb; line-height: 1.5; font-size: 22px; &#125;.st-snippet em &#123; font-weight: bold; color: #ea6753; &#125;&lt;/style&gt;&lt;% &#125; %&gt; 完成至此，配置完成，hexo d -g重新部署一下即可出现站内搜索功能。搜索框的样式可根据个人爱好在CSS文件中修改。 麻雀虽小，五脏俱全，博客的基础功能基本上都已实现。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://heliublog.com/tags/Hexo/"},{"name":"Swiftype","slug":"Swiftype","permalink":"https://heliublog.com/tags/Swiftype/"},{"name":"站内搜索","slug":"站内搜索","permalink":"https://heliublog.com/tags/站内搜索/"}]},{"title":"win8.1与ubuntu双系统安装（硬盘安装）","date":"2016-05-13T12:27:14.000Z","path":"2016/05/13/win8.1与ubuntu双系统安装（硬盘安装）/","text":"部分内容引用自http://blog.csdn.net/risingwonderland/article/details/37902777作者：RisingWonderland 安装特点此方法可使用Win8.1,Ubuntu双系统，直接硬盘安装，无需制作U盘启动，很方便。 准备 下载Ubuntu镜像文件 下载EasyBCD 第一步，磁盘分区 在Windows下，分割出一块分区，我分出来的是50G，建议在磁盘最后分。注意该分区不要增添盘符，而是让其保持“空闲”状态。 第二步，NeoGrubWindows安装好EasyBCD软件，安好后，点击左侧“添加新条目”，再点击右侧“NeoGrub”选项卡，点击“安装”按钮。如下图： 安装后，点击“配置”按钮，会打开一个名为“menu.lst”的记事本文件。清空文件内容，写入下面的文字：1234title Install Ububturoot (hd0,0)kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8initrd (hd0,0)/initrd.lz 如下图所示，注意空格： 注意1文件第2、3、4行出现的“(hd0,0)”指向的是当前系统盘的位置，我这里是C盘。但假如C盘并非首个分区，而是第二个，需要修改为“(hd0,1)”，依此类推。 注意2文件第三行，“ubuntu-14.04-desktop-amd64.iso”是我的Ubuntu系统镜像的文件名，将其修改为你的。 注意3文件第三行出现了“vmlinuz.efi”，由于我安装的Ubuntu是64位操作系统，此处必须是“vmlinuz.efi”，不能缺少扩展名。 第三步使用压缩工具打开Ubuntu镜像文件，将“.disk”文件夹和casper文件夹内的“initrd.lz”和“vmlinuz.efi”文件复制到C盘根目录，再将Ubuntu系统镜像文件复制到C盘根目录： 第四步 重启计算机，在启动界面看到操作系统选择项，选择“NeoGrub引导加载器”： 之后出现Ubuntu选择界面，选择“Install Ubuntu”。 注意：此处有可能出现“File not found”错误，若出现，请转至原文博客查看：http://blog.csdn.net/risingwonderland/article/details/37902777 第五步成功进入Ubuntu试用界面后，桌面上有两个文件。按Ctrl+Alt+T打开终端，输入sudo umount –l /isodevice，取消光盘驱动器挂载，否则在后面安装过程中可能会无限卡进度： 注意注意空格，而且“-l”中的“l”是大写字母“L”的小写形态。不是数字1，也不是字母“i”。 第六步双击桌面图标“安装Ubuntu14.04 LTS”，开始安装Ubuntu。如果你连接了网络，可以选择“安装中下载更新”，会延长安装时间，也可以在安装完Ubuntu系统后再下载安装更新。在“安装类型”界面会有多个安装选项：如果选择第一项，Ubuntu会自动进行分区安装，之后与Windows操作系统共存为双系统。对分区没有细致要求的用户选择此项即可，本教程即可直接跳过步骤Step7、Step8。如果要自定义分区，选择“其它选项”。此处，我选择“其他选项”。 我们要将Ubuntu安装在“空闲”分区内。选择“空闲”分区，再点击左下方红线处的加号，进行分区。 下面说一下我的分区状况： 总共50GB空闲分区，（分区时需要选择文件系统类型，选择“Ext4”即可） 根目录“/”我分了8 GB； 交换分区swap我分了2 GB；（类似于虚拟内存） /boot我分了200 MB；（引导分区） /home 10 GB;（存放用户文件） /usr 30GB;（存放应用程序） 第七步分区完成后，开始安装。如果你没有分配交换空间，系统会给出提示，跳过即可。 安装成功安装完成后，选择重启。如果一切正常，可以看到如下图所示的Ubuntu样式的启动项选择界面： 可选操作在系统启动界面，Win8.1系统处于最后一项，如果需要让Win8.1处于第一项，可以这样设置： 进入Ubuntu系统。 Ctrl+Alt+T打开终端，输入“sudo nautilus”，以root权限打开资源管理器。 找到“30_os-prober”文件，将其名称修改为“06_os-prober”即可： 进入Windows系统，清除C盘下之前复制的文件。打开EasyBCD，在之前的“添加新条目”功能中，点击“删除”按钮，清除“NeoGrub”引导。","tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://heliublog.com/tags/Ubuntu/"},{"name":"系统安装","slug":"系统安装","permalink":"https://heliublog.com/tags/系统安装/"},{"name":"Linux","slug":"Linux","permalink":"https://heliublog.com/tags/Linux/"}]}]
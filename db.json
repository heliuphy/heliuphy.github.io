{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/avatar.jpg","path":"avatar.jpg","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5a5b879f16a9a0df63d26f279beefbe398851c78","modified":1543543989204},{"_id":"source/avatar.jpg","hash":"4af63b43667e29932c361a50d47707c74058a720","modified":1532091733325},{"_id":"source/favicon.ico","hash":"0b7a36db5659eaf7d800531facacf8816a7a5e04","modified":1532091138569},{"_id":"source/CNAME","hash":"11d9c03088b8acb56bf839b0c78389befa4d1a9b","modified":1539449433322},{"_id":"themes/melody/.DS_Store","hash":"32b4b271c33d29ebd503cb6740cd9375c1501e4e","modified":1532098053811},{"_id":"themes/melody/.eslintignore","hash":"55f36fe3be2270ae2746eddbb2982e4e1472bc31","modified":1532071302507},{"_id":"themes/melody/.eslintrc","hash":"0ea959b523a28e9b32817a55fda900e48910a36e","modified":1532072192969},{"_id":"themes/melody/.gitignore","hash":"7ed73f0edfb682b12a42070fd2730d5d712ec2fa","modified":1532071302508},{"_id":"themes/melody/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1532071302509},{"_id":"themes/melody/_config.yml","hash":"ccec9df93a797a9885fc94abbea95d9842d6c92b","modified":1532072192971},{"_id":"themes/melody/package.json","hash":"7bb22d555831dd1f0e0a1b6841881d9e13abff7a","modified":1532072192983},{"_id":"themes/melody/README.md","hash":"53881ec55bfadcf1cf859a1b08347d93438737af","modified":1532072192970},{"_id":"themes/melody/stylus_format.json","hash":"2fbe63b06901d202773457d7ce658ab6aa85d02b","modified":1532071302543},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532071302520},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539696699159},{"_id":"source/_posts/Bash编程（一）.md","hash":"11be11570087816136e9b1c54bc74e5ed3ca6877","modified":1532086448000},{"_id":"source/_posts/Hexo利用Swiftype建立站内搜索.md","hash":"e383387b69dca98ff353f5ceeadc56448074347e","modified":1532086448000},{"_id":"source/_posts/KeePass.md","hash":"8ace663dd1ad58732d8c00d0a625792695462d90","modified":1532086448000},{"_id":"source/_posts/Leanote安装教程.md","hash":"6eb7eeea4d95159133e0e1fa6279ebe81d2cabdd","modified":1532086448000},{"_id":"source/_posts/OS-X-10.14-怎么安装非AppStore的Safari扩展.md","hash":"21afbe1634f24e59dff3eda83c85fb1683e1ada3","modified":1543544156254},{"_id":"source/_posts/VPS+Hexo+Dropbox创建个人博客.md","hash":"6787da97729ea118e9f13d8409e3438f98359588","modified":1532086448000},{"_id":"source/_posts/VPS服务器搭建ghost blog.md","hash":"93b3f2d552282ea0688417a59a5e3d625422e2c3","modified":1532086448000},{"_id":"source/_posts/colab读写外部文件的四种方式.md","hash":"bbfdb8e8cc2bb77fe5648e3e22fbdd62efd5d6c6","modified":1540038625951},{"_id":"source/_posts/hexo在线编写博客.md","hash":"4030a67785a0f24225261c7c3ef5d55717f4817a","modified":1532086448000},{"_id":"source/_posts/win8.1与ubuntu双系统安装（硬盘安装）.md","hash":"b6dc7dd9feebc3da4faaaf99892ec718c78a26ee","modified":1532086448000},{"_id":"source/_posts/分享一款极好用的Chrome插件.md","hash":"715b39082ea3c247ba3e94d7c3a3350dc898eac0","modified":1532086448000},{"_id":"source/_posts/利用Dropbox备份vps中的文件.md","hash":"28bc59a5063c79e161610a7d36ee1ca69a863451","modified":1532086448000},{"_id":"source/_posts/双系统win10访问ubuntu系统文件.md","hash":"27e9d8706a71b3906234bda489a6076c62576717","modified":1544085819561},{"_id":"source/_posts/四步安装好支持tensorflow和C++的Jupyter-notebook.md","hash":"b9e9a0f540fc310d51a2629432bc7b74ec5987e6","modified":1532615051111},{"_id":"source/_posts/将图片自动上传到七牛并在markdown中引用.md","hash":"6259013ef73855cbdb2111c3e588a35c6e8e8b14","modified":1532086448000},{"_id":"source/_posts/搭建hexo博客小记.md","hash":"ef6633093c11546fb3621f3ed5261bd5b56104c1","modified":1532086448000},{"_id":"source/_posts/自己构建Docker镜像在自己的服务器上搭建支持C++和tensorflow的jupyter-notebook.md","hash":"c608664556c24154506e239d14eceec475aacc41","modified":1532929708691},{"_id":"source/categories/index.md","hash":"687851092de7fcadcec5a1f47217220a1d4a8c71","modified":1532082366526},{"_id":"source/posts_bak/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539767111567},{"_id":"source/_data/melody.yml","hash":"f00207b49a99fd986ea0bb9d1a7ebd2304f63446","modified":1532098776287},{"_id":"source/posts_bak/Endnote的style.md","hash":"f64ce2f68b833f61066a5e6bf91860125803d9de","modified":1532086448000},{"_id":"source/posts_bak/VTK-5.10.1 TO VTK-7.1.1的变动.md","hash":"47a8d17eb43506082dd08e04139c443ce264a3d8","modified":1532086448000},{"_id":"source/posts_bak/HexoEditor-测试.md","hash":"78c39592620be76ffc214578ada1649616a7a5b9","modified":1532099648207},{"_id":"source/posts_bak/VTK提示MetaImage cannot read data from file.md","hash":"3dad6014240710f49024308699955f1079c7d0bb","modified":1532086448000},{"_id":"source/posts_bak/VTK-VS2008编译教程.md","hash":"983f8f9412259b509de41c64e1b9b38b38e47514","modified":1532086448000},{"_id":"source/posts_bak/VTK运行Tcl文件.md","hash":"9c64939cad7d2c431c5a8b48bd1b4e3d56a6a91e","modified":1532086448000},{"_id":"source/posts_bak/beamer的theme.md","hash":"8c127049a3756115654c5244ba7449c72dca6029","modified":1532086448000},{"_id":"source/posts_bak/coding和github同时使用.md","hash":"ed5eab1fdaf9d1ee2e47b1d05cb9301c7fb5e99b","modified":1532086448000},{"_id":"source/posts_bak/vtk-imageblend图像融合报错.md","hash":"5d00e7f667d58acf2567ad521f26c8f67a82309f","modified":1532086448000},{"_id":"source/posts_bak/利用Keepass2.x进行ftp或webdev同步.md","hash":"865427b3512f5da40f0a3e790cccf12203be3f74","modified":1532086448000},{"_id":"source/posts_bak/如何利用Dropbox备份指定文件夹.md","hash":"bc1ecbf291951947f70db1b605e3aa43c6f0144a","modified":1532086448000},{"_id":"source/posts_bak/软件推荐.md","hash":"092ff3535fdd64160feb0da88c7447fe814f64f3","modified":1532086448000},{"_id":"themes/melody/.git/FETCH_HEAD","hash":"47ea8e9dba8f59c7e3307850e403917a88a960e9","modified":1542802798818},{"_id":"themes/melody/.git/HEAD","hash":"94dcabd7899cc47d4d760847582700044613339a","modified":1532072192992},{"_id":"themes/melody/.git/config","hash":"dbc9583c30072395a2108cf3384f87973212d53c","modified":1532071302504},{"_id":"themes/melody/.git/ORIG_HEAD","hash":"94dcabd7899cc47d4d760847582700044613339a","modified":1542802798838},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1532071300021},{"_id":"themes/melody/.git/index","hash":"3a92c31c98e9b4425db7d1e399c895a1b24229e9","modified":1542802752447},{"_id":"themes/melody/.git/packed-refs","hash":"0c02a6daabad416fb0effc89e9122d0939865a7e","modified":1532071302498},{"_id":"themes/melody/.vscode/launch.json","hash":"3098e8e395a33fa130747d2fd104a21278f266a6","modified":1532071302508},{"_id":"themes/melody/.vscode/settings.json","hash":"2e4acade0812cbeaf1363971c696a1d52d4f05ba","modified":1532071302509},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"f6204e876266311c9f1920bd65aa8d2f45bc905a","modified":1532072192970},{"_id":"themes/melody/languages/default.yml","hash":"5859596db5ed9b2e7f86874c4df71409323ef9b8","modified":1532072192971},{"_id":"themes/melody/languages/en.yml","hash":"5859596db5ed9b2e7f86874c4df71409323ef9b8","modified":1532072192972},{"_id":"themes/melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1532071302510},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"acb3931824b6b6464a1007758e65acec1ce1b26e","modified":1532072192973},{"_id":"themes/melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1532071302510},{"_id":"themes/melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1532071302510},{"_id":"themes/melody/layout/page.pug","hash":"fb07b1af38b3ac4598af2e13f2bfe3e3ec09f799","modified":1532072192982},{"_id":"themes/melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1532071302518},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1532071302519},{"_id":"themes/melody/layout/post.pug","hash":"5c94edb79bd3d7d2654d7c095b1eba12800487bd","modified":1532072192982},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1532071302520},{"_id":"themes/melody/scripts/replace-config.js","hash":"3439d79603f66830925a19e136e9ead54a85ed8b","modified":1532072192983},{"_id":"themes/melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1532071302519},{"_id":"themes/melody/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1532092344544},{"_id":"themes/melody/source/favicon.ico","hash":"0b7a36db5659eaf7d800531facacf8816a7a5e04","modified":1532091138569},{"_id":"source/posts_bak/Linux零打碎敲.md","hash":"56b1de0b446fb1ed2c0186b15fd0a384dfe085b8","modified":1532086448000},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532071302528},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1532071300022},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1532071300022},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1532071300023},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1532071300022},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1532071300024},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1532071300024},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1532071300023},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1532071300023},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1532071300024},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1532071300022},{"_id":"themes/melody/.git/logs/HEAD","hash":"b1122988c8553d7d0a857c4231b518e37f2beb00","modified":1532072192994},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1532071300020},{"_id":"source/_posts/阮一峰JS学习笔记.md","hash":"295bf31c05e3c4f173021ffb8d3fff76fefb27e4","modified":1539530875398},{"_id":"themes/melody/layout/includes/config.pug","hash":"b8f1bce6749fe822b8c7fbd499b2b67fc14f4eb2","modified":1532072192975},{"_id":"themes/melody/layout/includes/footer.pug","hash":"da41bc2a8bd60f07089622a2755007344353e8bc","modified":1532072192975},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"fd53e30c9c5bc497538753c8c6a2bc3294f03494","modified":1532072192973},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3c4d106732b54a85864dea9068d64f308ba98348","modified":1532072192978},{"_id":"themes/melody/layout/includes/head.pug","hash":"b52b5eecaa7ef77cdd9f7ed7d9fb80984184fc2c","modified":1532072192976},{"_id":"themes/melody/layout/includes/nav.pug","hash":"d9d341d690a03680ef66c4d84715cab1f5a39372","modified":1532072192979},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"01cbf85557456027fab237fbce6ebd83966a6470","modified":1532072192979},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"556d055e2f0c30d41ec16ef7943bd3227afcdfd1","modified":1532071302515},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"22ee0494e3d82deec307b8ca9f3423d669bcea23","modified":1532072192980},{"_id":"themes/melody/source/css/index.styl","hash":"111ec52cde3e5fae92cf61dc2a1bd8726b3aa8f9","modified":1532071302526},{"_id":"themes/melody/source/css/var.styl","hash":"bbb372afd00ecdeee767266692e9f0792ac6be2f","modified":1532072192989},{"_id":"themes/melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1532071302527},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1532071302527},{"_id":"themes/melody/source/js/fancybox.js","hash":"0c2c506559129a5108893cf054b9aa46fe878fc3","modified":1532071302528},{"_id":"themes/melody/source/js/copy.js","hash":"a1dfa723a547f191a3ba3352209665f53cf4b703","modified":1532072192989},{"_id":"themes/melody/source/js/fireworks.js","hash":"5e3da1344966d5d6328a410cad69e92297699f3b","modified":1532071302528},{"_id":"themes/melody/source/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1532071302528},{"_id":"themes/melody/source/js/scroll.js","hash":"73d57e7cf9921ba5724ad48b8d0e8b25dbce059f","modified":1532071302529},{"_id":"themes/melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1532071302530},{"_id":"themes/melody/source/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1532071302542},{"_id":"themes/melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1532071302542},{"_id":"source/slides/index.md","hash":"6cedffcaffc80d36f4085d185e8f82fa19466447","modified":1532082592055},{"_id":"source/gallery/index.md","hash":"1cddd4646119d02557c2215291d11c43aba22f61","modified":1532082868938},{"_id":"themes/melody/layout/includes/header.pug","hash":"655085a2085c8e4d7a5e04ebcdcfc89d01ca00df","modified":1532072192977},{"_id":"source/tags/index.md","hash":"70d483629567d1bf57c43b17cdc5addf68062a05","modified":1532082369143},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532071302513},{"_id":"themes/melody/.git/objects/42/755f88d2beea2ac8c29c6c9864c803e79292de","hash":"66df949f23f69a1264fcc9916f573d18afa5e009","modified":1542802763003},{"_id":"themes/melody/.git/objects/4d/239ca14b3246a09c6611d098b8a56467909b49","hash":"8b1fbc5bab05404a61b571b81ba368a3ee00af17","modified":1542802763000},{"_id":"themes/melody/.git/objects/16/a951340f474b88b5bd9184d3b739dc9f7cc008","hash":"a1c39b4e94b107582bb374be893f83b42518d9bc","modified":1542802762999},{"_id":"themes/melody/.git/objects/44/c266b65630626db599699439ec6c8faf370145","hash":"c32df7c93a36399aeb0076ab7a75476ccd93fe6f","modified":1542802762995},{"_id":"themes/melody/.git/objects/54/7cffac8fafef0cc185328e8e105ef4f784baef","hash":"935ccec8bb3c39a31c98f1682bbd12f632e8f7de","modified":1542802763001},{"_id":"themes/melody/.git/objects/55/c05a7e19f350184c00fbc5e61db2530084469a","hash":"43779d67a036ffddb91847cd87e7974f8af3ab01","modified":1542802762997},{"_id":"themes/melody/.git/objects/5b/39c0ebcf6be55161b8c340f55d7a6c32dc488f","hash":"35e7cac58b41ec98965d37353b499a56453542fa","modified":1542802762990},{"_id":"themes/melody/.git/objects/72/4d04f2480bff2bfa6328da8b77e0c6bb2fb873","hash":"bfc5158366ed61aed69331b1becd127bcfb9ade1","modified":1542802763011},{"_id":"themes/melody/.git/objects/9d/5484c5d4734779e6b8821c87f2d68ccfec156d","hash":"8ebe17dea580f9e7075a7930246d2068eed13433","modified":1542802762988},{"_id":"themes/melody/.git/objects/84/44ecd197ea2e8fe85d1883f33c4e7a578ff173","hash":"46c4ab713536a001293300267f75a3632b73273e","modified":1542802763005},{"_id":"themes/melody/.git/objects/b8/c526f3f34cdd0981755e77a6d15ea60b7da4e0","hash":"ce77b73deb84cea2fffd99a8760f0b398730ca17","modified":1542802763006},{"_id":"themes/melody/.git/objects/ae/5356348d9fb5a6357d9a5505b58582e77b4597","hash":"f15d0a85091955ce1f5f027eb7f32894ab22f060","modified":1542802762996},{"_id":"themes/melody/.git/objects/a8/5d082d839e84c21eb515f97a723bea93858dfd","hash":"22a51e802f73f86aedb63755c22cd221fcd8c906","modified":1542802762986},{"_id":"themes/melody/.git/objects/d1/1c6fa7dd3c91feeffb63f06d4ae1a6b8caa72a","hash":"88be956b8d68a249b483ddfeb31d1e4ac7c28854","modified":1542802763008},{"_id":"themes/melody/.git/objects/c2/a8b0f658fdd93623439893de7312d5d9a24edd","hash":"d6e2edf2178a2c23b335d35020640e7748e4908a","modified":1542802762994},{"_id":"themes/melody/.git/objects/ec/6ebec16130546fcba934b0c4385cd00ac20933","hash":"21706e8b7ea53c3e6ee99b4d33aaab99d801707b","modified":1542802762991},{"_id":"themes/melody/.git/objects/f2/0eb58dc1171dc6f1d1a5ff76f72144aab1c7d4","hash":"ff874e1c84f91ed5c0264708d42df6da23e5e302","modified":1542802763009},{"_id":"themes/melody/.git/objects/f3/e85f06c8b8daaeed6c6083d89b77c76ee79cb9","hash":"5ab036710bbdbd781fb8177383333be404b3c863","modified":1542802762989},{"_id":"themes/melody/.git/objects/7a/236fd4c9d9b4a7adaf8eedbc47a212120d297e","hash":"d1db6ef0ca116f832ec9fd9b6001f51e84dce17a","modified":1542802763010},{"_id":"themes/melody/.git/objects/6a/05901b3fd764573080480705cbd6817993fedd","hash":"8fdcb9e758d9c5f6e34a925f9bc38898df634745","modified":1542802762998},{"_id":"themes/melody/.git/refs/heads/master","hash":"f4ee9a2e59bf336ef09f72930f16eddb82e1ea9f","modified":1532071302502},{"_id":"themes/melody/.git/objects/pack/pack-d6b3b3b91d8fecea2f0350f9b6ab628bcd837573.idx","hash":"d6cb9aa06ca8570b05872b5a80abf6928916793b","modified":1539530135177},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"244afa38cd7fef395878352232cfd40c04ffc958","modified":1532072192974},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1532071302511},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"4a9e172c2b7a9f6f1f8c313d0d45266de828f209","modified":1532071302511},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"6c16214e5945142e5f3b58e7694397e26f28849d","modified":1532071302511},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1532071302511},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"43c3a13579d087e620e847c16a64f15e3f43583e","modified":1532072192974},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"73e5b1e722ef9f30c41588243760da4cd284d691","modified":1539531804715},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"da7572fcc4aac6b63a651a3320e5d853ea07b347","modified":1532071302514},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"6fb03f381581f192fc72080c424624a00110829e","modified":1532072192978},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1532071302515},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1532071302515},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"85347ad18da0a81bfa7b0c0a8643886f4c0cacc1","modified":1532072192979},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1532071302516},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"65ea837388ddf806f89c3b9082ceb31776dc6be5","modified":1532071302516},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7fa0a75a9bcff59014a645e139544d03d8146942","modified":1532072192980},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"d8a747c3aaef64435a1f62320c6f7c8c822d9af2","modified":1532072192981},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"5362d4d741dc70821901a74e2f4f9bc782ea6a5a","modified":1532072192981},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"035656871566bdcb8c45d3a0fe0b0835c524eb11","modified":1532071302518},{"_id":"themes/melody/source/css/_global/index.styl","hash":"c3418bbacedfe134f64f2ad5e7ae7a9b7292f84f","modified":1532072192984},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1532071302522},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"a72a6bb4477c18a14a2b779db183df22b4cba272","modified":1532071302522},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"52fbf0b8a33aab05442050be50b4d2160c127180","modified":1532072192985},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"79d551beaea2458abcedbf585618b9fa8d3d22e5","modified":1532071302523},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1532071302523},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"54e666466d41f6ced3abe1e1c573fde8fa83113c","modified":1532072192986},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"11bd28ea5e32c382136a1cba966d5648fc1de7e5","modified":1532072192987},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1532071302521},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"4e4e693b6904c116213146d92a891c5471c95065","modified":1532072192984},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"e3c8068aaa2b4608460a71a24ae1f1322ebb5f2d","modified":1532072192985},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"8129d254a30e3a66cdb7eb77253036221928f47b","modified":1532072192987},{"_id":"themes/melody/source/css/_search/index.styl","hash":"031b1577e8a07f18c047b27e6b4723b14ae018b0","modified":1532072192988},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"e1b082bfb4e04ffe42efa149b02fdb66aad682a7","modified":1532072192988},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1532071302525},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1532071302526},{"_id":"themes/melody/source/js/search/algolia.js","hash":"11de85c98d8d529d356928829a5216934d84e3a7","modified":1532072192990},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a7a7245d6f09e1bdfa48365f39ec324aaab1405a","modified":1532072192990},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1532071302530},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1532071302513},{"_id":"themes/melody/.git/objects/pack/pack-d6b3b3b91d8fecea2f0350f9b6ab628bcd837573.pack","hash":"c65733db05e781f351df6b24666f33d85a3b64b6","modified":1539530135177},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1532071302531},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1532071302542},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1532071302542},{"_id":"themes/melody/.git/logs/refs/heads/master","hash":"33d1347f121f9bc56481aa52c3ad265d9fd18a76","modified":1532071302503},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1532071302532},{"_id":"themes/melody/.git/objects/pack/pack-0346575e3cc25240068404b34000b67c6c41879f.idx","hash":"564859eabeb02c2d58679803cf4f1fb66cb58415","modified":1532071302489},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1532071302501},{"_id":"themes/melody/.git/refs/remotes/origin/dev","hash":"752b9dd5c676c399dd52524244ba0229d962960e","modified":1542802763033},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1532071302537},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1532071302532},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1532071302539},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1532071302539},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1532071302541},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1532071302540},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1532071302538},{"_id":"themes/melody/.git/logs/refs/remotes/origin/dev","hash":"3586844093eb05457569ccc75282936aee74f082","modified":1542802763036},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"0f6ebaa2740b04e69bf98b172f297a0f000fa67e","modified":1532071302501},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1532071302537},{"_id":"themes/melody/.git/objects/pack/pack-0346575e3cc25240068404b34000b67c6c41879f.pack","hash":"fad955d98e813cf9144bf1a5a67e96c650ed8c3c","modified":1532071302488},{"_id":"public/search.xml","hash":"e8304132f5e54cdc24345a393c4a4c72fbe979ff","modified":1544085834056},{"_id":"public/sitemap.xml","hash":"4f204c662451db43f2e63e55b678113c67b798a6","modified":1544085834058},{"_id":"public/categories/index.html","hash":"e2a746b5aad9fb061df39cb768a02b96cf4a44d7","modified":1544085834359},{"_id":"public/posts_bak/VTK提示MetaImage cannot read data from file.html","hash":"d60e0c5a14f1310f4d95359742373a1e40b36433","modified":1544085834369},{"_id":"public/posts_bak/VTK-5.10.1 TO VTK-7.1.1的变动.html","hash":"a13a6f7f3c71c194a9c29e873bcfaa1ce7c1f0bf","modified":1544085834369},{"_id":"public/posts_bak/HexoEditor-测试.html","hash":"29dac35606ca2aef8a329c94c436283fc15c25e3","modified":1544085834369},{"_id":"public/posts_bak/VTK运行Tcl文件.html","hash":"c977cfc19d3a4baa3d4b190d880ff87143c8dd48","modified":1544085834369},{"_id":"public/posts_bak/beamer的theme.html","hash":"17833ea528437bb419893e52783829810a5aed95","modified":1544085834369},{"_id":"public/posts_bak/coding和github同时使用.html","hash":"05f85c08152e50582b5518047071cf841b9c0211","modified":1544085834370},{"_id":"public/posts_bak/vtk-imageblend图像融合报错.html","hash":"3cf6a84bd644427e74c5771085aed005eceddd06","modified":1544085834370},{"_id":"public/posts_bak/如何利用Dropbox备份指定文件夹.html","hash":"75768406201b1a6123e80fa8c4f115fafe8343a3","modified":1544085834370},{"_id":"public/posts_bak/VTK-VS2008编译教程.html","hash":"620d37238e06b45a60ce678f7a828871973315e7","modified":1544085834370},{"_id":"public/posts_bak/利用Keepass2.x进行ftp或webdev同步.html","hash":"aaf3a5fadfe9e1454001b3b16789f5ddb7754a2a","modified":1544085834370},{"_id":"public/posts_bak/软件推荐.html","hash":"97f9d63e853e019c7f12f83bed3b3fb41ceb9a45","modified":1544085834370},{"_id":"public/posts_bak/Linux零打碎敲.html","hash":"298d42cbc3d97214e98b390ac381dc183f939013","modified":1544085834370},{"_id":"public/slides/index.html","hash":"5153b17dd0350da9cd04ca3b7a90ec08fc9cb051","modified":1544085834370},{"_id":"public/gallery/index.html","hash":"77bbc92a5d250f565409955d1f237986a0f96550","modified":1544085834370},{"_id":"public/tags/index.html","hash":"12296b0c91d6b5df44ebb917f359f2e9cee1e7db","modified":1544085834370},{"_id":"public/posts_bak/Endnote的style.html","hash":"d5ce46e93ec0f0f3037288d49a862731d9835b71","modified":1544085834370},{"_id":"public/2018/10/20/colab读写外部文件的四种方式/index.html","hash":"b6f9f1c04c9389663d44c864ebfff4ea849343f3","modified":1544085834371},{"_id":"public/2018/12/06/双系统win10访问ubuntu系统文件/index.html","hash":"c789aa0fbc48422a989a63a41d18bea3b8fc4924","modified":1544085834417},{"_id":"public/2018/07/28/自己构建Docker镜像在自己的服务器上搭建支持C++和tensorflow的jupyter-notebook/index.html","hash":"d9d0b00fbed1d69e33d2dbf6c53ffb495d9f810c","modified":1544085834418},{"_id":"public/2018/11/28/OS-X-10.14-怎么安装非AppStore的Safari扩展/index.html","hash":"65487615863e140e235c226a494da34d6f6001e9","modified":1544085834418},{"_id":"public/2017/05/16/将图片自动上传到七牛并在markdown中引用/index.html","hash":"8e12ea98b92f1204607579bcf3b3681ad8214760","modified":1544085834418},{"_id":"public/2017/05/10/分享一款极好用的Chrome插件/index.html","hash":"df09195d82c92f2368a959ba52e75aa5d0fe1513","modified":1544085834418},{"_id":"public/2017/05/07/利用Dropbox备份vps中的文件/index.html","hash":"e192302495e902a979f3cf9929126276550f24ab","modified":1544085834418},{"_id":"public/2017/05/15/Bash编程（一）/index.html","hash":"6ca633475fbcce2baaaf4df0522f2638d02d9cd1","modified":1544085834419},{"_id":"public/2017/05/07/Leanote安装教程/index.html","hash":"e1fec0e554474ca5df922633c17c554b50b5fb0b","modified":1544085834419},{"_id":"public/2016/05/01/VPS服务器搭建ghost blog/index.html","hash":"5ee77d00cbd63843b017af61738f46a7d7079616","modified":1544085834419},{"_id":"public/2016/05/14/Hexo利用Swiftype建立站内搜索/index.html","hash":"7204db7e817e561d600c8dfd5876a3db21be766c","modified":1544085834419},{"_id":"public/2016/05/01/KeePass/index.html","hash":"0ae53a822cdec08156089fced276b14f381dc656","modified":1544085834419},{"_id":"public/archives/index.html","hash":"0327b203b36ecb60cb9a2e314048384646aeea13","modified":1544085834419},{"_id":"public/archives/page/2/index.html","hash":"89e87301b040ffb68f05717f0771ebd5c0a9b49c","modified":1544085834419},{"_id":"public/archives/2016/index.html","hash":"b76fee1d3e635130d3e5f89ccdfefd5c7998a240","modified":1544085834419},{"_id":"public/archives/2017/index.html","hash":"f1926020fc51617d8026ddca29e73a190f3659ad","modified":1544085834419},{"_id":"public/archives/2016/05/index.html","hash":"47bd999abf68d454cc73576e0637d81dcd24eaa8","modified":1544085834419},{"_id":"public/archives/2017/05/index.html","hash":"b17ad42c392c91cfa5c76abf8c7474c23d54d0a7","modified":1544085834419},{"_id":"public/archives/2018/07/index.html","hash":"9a47ec887e866172337431a95027bbb37a83c572","modified":1544085834419},{"_id":"public/archives/2018/index.html","hash":"de77c5133b7b848688b5f8f566979cf3111a95cb","modified":1544085834420},{"_id":"public/archives/2018/11/index.html","hash":"542024a660b7c8afc4bd70cda49dac63c3019642","modified":1544085834420},{"_id":"public/categories/Linux/index.html","hash":"154ff54bcbd330f7c7764a2e09d65ac985071f9b","modified":1544085834420},{"_id":"public/categories/软件/index.html","hash":"3145cc5e97616d4e5a946d2188f86d1883529867","modified":1544085834420},{"_id":"public/archives/2018/10/index.html","hash":"9edf4f21290637f7b9e130559f899c45f43b990f","modified":1544085834420},{"_id":"public/categories/博客/index.html","hash":"2963395d64819a401b011bc687c992ff7cc94c7c","modified":1544085834420},{"_id":"public/categories/web/index.html","hash":"bd824572c696333be51788b73377317196c58335","modified":1544085834420},{"_id":"public/categories/机器学习/index.html","hash":"51e07e30df4257b8a702cb312005fe68255c1c18","modified":1544085834420},{"_id":"public/categories/Docker/index.html","hash":"ae8cd8c2b720a783ba6eb8ebc961f308b85b723c","modified":1544085834420},{"_id":"public/categories/浏览器/index.html","hash":"410725e24662d2574c7dc41f90f42684b3977d2d","modified":1544085834420},{"_id":"public/tags/Linux/index.html","hash":"f3f9d3ced2311f401ab17defa6f725567443113e","modified":1544085834420},{"_id":"public/tags/Bash/index.html","hash":"9d12f7468eac182eb679504e3f32a24ff12ee7ec","modified":1544085834420},{"_id":"public/tags/Swiftype/index.html","hash":"494ff2f4598627a5d790fee9b350fdfe1f01b43b","modified":1544085834420},{"_id":"public/tags/站内搜索/index.html","hash":"dec13a8619682059bbf1adde151f8eeb9d41c828","modified":1544085834420},{"_id":"public/tags/KeePass/index.html","hash":"dc279df14907a87261befcd1cb7a024f9b373f11","modified":1544085834421},{"_id":"public/tags/Chrome/index.html","hash":"e01e69c9cd6504bf9d1bc21b4cf3141644939707","modified":1544085834421},{"_id":"public/tags/leanote/index.html","hash":"d12a95838db289720ec0be24a4cd2ebd8a8d06af","modified":1544085834421},{"_id":"public/tags/VPS/index.html","hash":"a08ccd2469a43fe8187b645a8fec3c9c869b615e","modified":1544085834421},{"_id":"public/tags/web/index.html","hash":"fc563380609e742b0121972c7f6f71607cd1314a","modified":1544085834421},{"_id":"public/tags/Dropbox/index.html","hash":"47f4f481887e88fb93930a5896253a9eecf31f79","modified":1544085834421},{"_id":"public/tags/Safari/index.html","hash":"ab4e0b6faa9d8a172dbcedbdf75417db0557ce08","modified":1544085834421},{"_id":"public/tags/ghost-blog/index.html","hash":"a6c0d83b2720ab5185ceafabb2630c744c8e2a2a","modified":1544085834421},{"_id":"public/tags/colab/index.html","hash":"369f69037f7704bf5daae9588ba32b51844329bf","modified":1544085834421},{"_id":"public/tags/Hexo/index.html","hash":"35e081a5462d7a5437c5cc9ee1a751d2944b592b","modified":1544085834421},{"_id":"public/tags/cloud9/index.html","hash":"1afcd5fe546eb7a469dba9118af9a05fd906cb7c","modified":1544085834421},{"_id":"public/tags/系统安装/index.html","hash":"81a31790128673153016b431bc4e74632c58d9f7","modified":1544085834421},{"_id":"public/tags/插件/index.html","hash":"e7b984bc373bbd0b0bfd675d7a82d69fc728c13e","modified":1544085834422},{"_id":"public/tags/Ubuntu/index.html","hash":"f5e4d8c8e98364e73162349869e1d5a710c376a5","modified":1544085834422},{"_id":"public/tags/python/index.html","hash":"2efdd3aa4031e85147124fee5edd2b499834f3f7","modified":1544085834422},{"_id":"public/tags/jupyter-notebook/index.html","hash":"963428f1193fc2f94c6dba9793bd3eeb5fc7dff5","modified":1544085834422},{"_id":"public/tags/c/index.html","hash":"2a6d2b31d5739184cad2a632c26f3d480133c0d7","modified":1544085834422},{"_id":"public/tags/Markdown/index.html","hash":"db605f769b0d8be27da9f819f8b3ad5bd20f531f","modified":1544085834422},{"_id":"public/tags/七牛云/index.html","hash":"3b81ed3d45a0fb99377535723950940326cea8ed","modified":1544085834422},{"_id":"public/tags/Jupyter/index.html","hash":"645bd7f1fe94626f9b76610dfc232a58a5fb326d","modified":1544085834422},{"_id":"public/tags/javascript/index.html","hash":"4ff0c49841ddc17a93b67535cce33c47dfe14723","modified":1544085834422},{"_id":"public/tags/Docker/index.html","hash":"8039416b19d91700a2b0a241f5ffb3975803b4de","modified":1544085834422},{"_id":"public/2018/10/14/阮一峰JS学习笔记/index.html","hash":"8b808d8fa552f9634a93cb36bd33f4218c6b8b05","modified":1544085834422},{"_id":"public/2018/07/26/四步安装好支持tensorflow和C++的Jupyter-notebook/index.html","hash":"6f27ce0a9e9d53ec0e815892d810e959f984a559","modified":1544085834423},{"_id":"public/2017/05/10/hexo在线编写博客/index.html","hash":"2575920afbbdc47a54360849349357230cf6b74a","modified":1544085834423},{"_id":"public/2016/05/13/win8.1与ubuntu双系统安装（硬盘安装）/index.html","hash":"f467ca3458a20bc085bdf5b37662761df3966025","modified":1544085834423},{"_id":"public/2016/05/01/搭建hexo博客小记/index.html","hash":"a1fee89fd5f5b355811963bdfea24b11013455b9","modified":1544085834423},{"_id":"public/2016/05/01/VPS+Hexo+Dropbox创建个人博客/index.html","hash":"10c2aa4d39683325028795ffb5d958823c47f2a6","modified":1544085834423},{"_id":"public/index.html","hash":"b91fa0c25582bd64939c8fa0db1361f69065d06f","modified":1544085834423},{"_id":"public/page/2/index.html","hash":"f06fde87f69fa57afa9358d7c9f9dd89623b786b","modified":1544085834423},{"_id":"public/archives/2018/12/index.html","hash":"cf6518bec357510aa2ab7387e6aded1149c31cb5","modified":1544085834426},{"_id":"public/tags/双系统/index.html","hash":"22891724f4ffc216bea29ab07170a01d81006ef4","modified":1544085834426},{"_id":"public/favicon.ico","hash":"0b7a36db5659eaf7d800531facacf8816a7a5e04","modified":1544085834426},{"_id":"public/CNAME","hash":"11d9c03088b8acb56bf839b0c78389befa4d1a9b","modified":1544085834426},{"_id":"public/avatar.jpg","hash":"4af63b43667e29932c361a50d47707c74058a720","modified":1544085834426},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1544085834427},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1544085834427},{"_id":"public/js/fancybox.js","hash":"0c2c506559129a5108893cf054b9aa46fe878fc3","modified":1544085834962},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544085834962},{"_id":"public/js/copy.js","hash":"a1dfa723a547f191a3ba3352209665f53cf4b703","modified":1544085834962},{"_id":"public/js/fireworks.js","hash":"5e3da1344966d5d6328a410cad69e92297699f3b","modified":1544085834962},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1544085834962},{"_id":"public/js/scroll.js","hash":"73d57e7cf9921ba5724ad48b8d0e8b25dbce059f","modified":1544085834962},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1544085834962},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1544085834962},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1544085834962},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544085834962},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1544085834962},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1544085834962},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1544085834962},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1544085834963},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1544085834963},{"_id":"public/js/search/local-search.js","hash":"a7a7245d6f09e1bdfa48365f39ec324aaab1405a","modified":1544085834963},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1544085834963},{"_id":"public/js/search/algolia.js","hash":"11de85c98d8d529d356928829a5216934d84e3a7","modified":1544085834963},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1544085834963},{"_id":"public/css/index.css","hash":"4a69865227931bbf28204ea78be9d062d4fe80d6","modified":1544085834963},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1544085834963},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1544085834963},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1544085834963},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1544085834963},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1544085834963},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1544085834963}],"Category":[{"name":"Linux","_id":"cjpccu5910004jcm1l66oh95e"},{"name":"博客","_id":"cjpccu599000bjcm1pyombk9a"},{"name":"软件","_id":"cjpccu59f000jjcm1musklm7f"},{"name":"web","_id":"cjpccu59k000sjcm1nuckpujl"},{"name":"浏览器","_id":"cjpccu59p000zjcm12vfvq0lb"},{"name":"机器学习","_id":"cjpccu5a4001njcm17cbu3mbr"},{"name":"Docker","_id":"cjpccu5a5001sjcm1lx0wmgol"}],"Data":[{"_id":"melody","data":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}],"Page":[{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n","updated":"2018-07-20T10:26:06.526Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjpccu58y0001jcm1ou3xp3gw","content":"","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":""},{"title":"Endnote的style","date":"2016-05-01T10:06:12.000Z","categories":"软件","tags":["Endnote","style"],"keywords":"Endnote,style,Chinese Std GBT7714","_content":"\n参考文献style:\n\nChinese Std GBT7714\n\n* 附上 [下载地址](https://my.pcloud.com/publink/show?code=XZlVCQZLKN5QnRFiPX6zm1oYzf9CfrRdCKk)\n\n* 安装方法：\n\n * 拷到.../style  文件夹下即可。","source":"posts_bak/Endnote的style.md","raw":"---\ntitle: Endnote的style\ndate: 2016-05-01 18:06:12\ncategories: 软件\ntags: [Endnote,style]\nkeywords: Endnote,style,Chinese Std GBT7714\n---\n\n参考文献style:\n\nChinese Std GBT7714\n\n* 附上 [下载地址](https://my.pcloud.com/publink/show?code=XZlVCQZLKN5QnRFiPX6zm1oYzf9CfrRdCKk)\n\n* 安装方法：\n\n * 拷到.../style  文件夹下即可。","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/Endnote的style.html","comments":1,"layout":"page","_id":"cjpccu5900003jcm12ldgk2h8","content":"<p>参考文献style:</p>\n<p>Chinese Std GBT7714</p>\n<ul>\n<li><p>附上 <a href=\"https://my.pcloud.com/publink/show?code=XZlVCQZLKN5QnRFiPX6zm1oYzf9CfrRdCKk\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>安装方法：</p>\n<ul>\n<li>拷到…/style  文件夹下即可。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<p>参考文献style:</p>\n<p>Chinese Std GBT7714</p>\n<ul>\n<li><p>附上 <a href=\"https://my.pcloud.com/publink/show?code=XZlVCQZLKN5QnRFiPX6zm1oYzf9CfrRdCKk\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>安装方法：</p>\n<ul>\n<li>拷到…/style  文件夹下即可。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"VTK-5.10.1 to VTK-7.1.1的变动","date":"2017-05-07T15:00:15.000Z","tags":["VTK"],"categories":"VTK","_content":"1. namespace vtkstd ==>> std；\n2. SetInput()方法拆分为两个，一个SetInputData，一个SetInputConnection()。\n3. vtk的新版本在vtkImageData类中取消了SetScalarTypeToUnsignedChar()方法；(vtkImageCanvasSource2D类中依然可用)现在仅能用如下方法设置：  \n```\nstatic void SetScalarType(int, vtkInformation* meta_data);\n```\n\n<!--more-->\n","source":"posts_bak/VTK-5.10.1 TO VTK-7.1.1的变动.md","raw":"---\ntitle: VTK-5.10.1 to VTK-7.1.1的变动\ndate: 2017-05-07 23:00:15\ntags:\n  - VTK\ncategories: VTK\n---\n1. namespace vtkstd ==>> std；\n2. SetInput()方法拆分为两个，一个SetInputData，一个SetInputConnection()。\n3. vtk的新版本在vtkImageData类中取消了SetScalarTypeToUnsignedChar()方法；(vtkImageCanvasSource2D类中依然可用)现在仅能用如下方法设置：  \n```\nstatic void SetScalarType(int, vtkInformation* meta_data);\n```\n\n<!--more-->\n","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/VTK-5.10.1 TO VTK-7.1.1的变动.html","comments":1,"layout":"page","_id":"cjpccu5940007jcm1sflpduuf","content":"<ol>\n<li>namespace vtkstd ==&gt;&gt; std；</li>\n<li>SetInput()方法拆分为两个，一个SetInputData，一个SetInputConnection()。</li>\n<li>vtk的新版本在vtkImageData类中取消了SetScalarTypeToUnsignedChar()方法；(vtkImageCanvasSource2D类中依然可用)现在仅能用如下方法设置：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void SetScalarType(int, vtkInformation* meta_data);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<ol>\n<li>namespace vtkstd ==&gt;&gt; std；</li>\n<li>SetInput()方法拆分为两个，一个SetInputData，一个SetInputConnection()。</li>\n<li>vtk的新版本在vtkImageData类中取消了SetScalarTypeToUnsignedChar()方法；(vtkImageCanvasSource2D类中依然可用)现在仅能用如下方法设置：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void SetScalarType(int, vtkInformation* meta_data);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":""},{"title":"HexoEditor 测试","date":"2018-07-20T15:04:45.000Z","categories":"博客","tags":["Hexo"],"keywords":"Hexo,HexoEditor","_content":"## 从这里开始写\n\n提示：\n1. 阅读更多标签：<!-- more -->\n2. 代码记得写语言\n    ```python\n    import numpy as np\n    print(\"hello\")\n    ```","source":"posts_bak/HexoEditor-测试.md","raw":"---\ntitle: HexoEditor 测试\ndate: 2018-07-20 23:04:45\ncategories: 博客\ntags:\n  - Hexo\nkeywords: Hexo,HexoEditor\n---\n## 从这里开始写\n\n提示：\n1. 阅读更多标签：<!-- more -->\n2. 代码记得写语言\n    ```python\n    import numpy as np\n    print(\"hello\")\n    ```","updated":"2018-07-20T15:14:08.207Z","path":"posts_bak/HexoEditor-测试.html","comments":1,"layout":"page","_id":"cjpccu5960009jcm1lwcn6hyz","content":"<h2 id=\"从这里开始写\"><a href=\"#从这里开始写\" class=\"headerlink\" title=\"从这里开始写\"></a>从这里开始写</h2><p>提示：</p>\n<ol>\n<li>阅读更多标签：<a id=\"more\"></a></li>\n<li>代码记得写语言 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">print(<span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"从这里开始写\"><a href=\"#从这里开始写\" class=\"headerlink\" title=\"从这里开始写\"></a>从这里开始写</h2><p>提示：</p>\n<ol>\n<li>阅读更多标签：","more":"</li>\n<li>代码记得写语言 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">print(<span class=\"string\">\"hello\"</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"VTK提示MetaImage cannot read data from file","date":"2017-05-10T15:01:49.000Z","categories":"VTK","tags":["VTK"],"keywords":"VTK","_content":"在运行《VTK图形图像进阶》第五章`5.3_ImageResliceExample.cpp`时，会提示`MetaImage cannot read data from file`或者显示窗口是空白，后来搜索了VTKExample中的例子，发现可以这样解决：\n<!--more-->\n将原来程序中的语句\n```\nimgActor->SetInputData(colorMap->GetOutput());\n```\n更改为：\n```\nimgActor->GetMapper()->SetInputConnection(colorMap->GetOutputPort());\n```\n记得在程序开头载入头文件：\n```\n#include <vtkImageMapper3D.h>\n```\n\n>VTKExample:http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader","source":"posts_bak/VTK提示MetaImage cannot read data from file.md","raw":"---\ntitle: VTK提示MetaImage cannot read data from file\ndate: 2017-05-10 23:01:49\ncategories: VTK\ntags:\n  - VTK\nkeywords: VTK\n---\n在运行《VTK图形图像进阶》第五章`5.3_ImageResliceExample.cpp`时，会提示`MetaImage cannot read data from file`或者显示窗口是空白，后来搜索了VTKExample中的例子，发现可以这样解决：\n<!--more-->\n将原来程序中的语句\n```\nimgActor->SetInputData(colorMap->GetOutput());\n```\n更改为：\n```\nimgActor->GetMapper()->SetInputConnection(colorMap->GetOutputPort());\n```\n记得在程序开头载入头文件：\n```\n#include <vtkImageMapper3D.h>\n```\n\n>VTKExample:http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/VTK提示MetaImage cannot read data from file.html","comments":1,"layout":"page","_id":"cjpccu599000djcm1oimwlwzp","content":"<p>在运行《VTK图形图像进阶》第五章<code>5.3_ImageResliceExample.cpp</code>时，会提示<code>MetaImage cannot read data from file</code>或者显示窗口是空白，后来搜索了VTKExample中的例子，发现可以这样解决：<br><a id=\"more\"></a><br>将原来程序中的语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgActor-&gt;SetInputData(colorMap-&gt;GetOutput());</span><br></pre></td></tr></table></figure></p>\n<p>更改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgActor-&gt;GetMapper()-&gt;SetInputConnection(colorMap-&gt;GetOutputPort());</span><br></pre></td></tr></table></figure></p>\n<p>记得在程序开头载入头文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;vtkImageMapper3D.h&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>VTKExample:<a href=\"http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader\" target=\"_blank\" rel=\"noopener\">http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader</a></p>\n</blockquote>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<p>在运行《VTK图形图像进阶》第五章<code>5.3_ImageResliceExample.cpp</code>时，会提示<code>MetaImage cannot read data from file</code>或者显示窗口是空白，后来搜索了VTKExample中的例子，发现可以这样解决：<br>","more":"<br>将原来程序中的语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgActor-&gt;SetInputData(colorMap-&gt;GetOutput());</span><br></pre></td></tr></table></figure></p>\n<p>更改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgActor-&gt;GetMapper()-&gt;SetInputConnection(colorMap-&gt;GetOutputPort());</span><br></pre></td></tr></table></figure></p>\n<p>记得在程序开头载入头文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;vtkImageMapper3D.h&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>VTKExample:<a href=\"http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader\" target=\"_blank\" rel=\"noopener\">http://www.vtk.org/Wiki/VTK/Examples/Cxx/IO/MetaImageReader</a></p>\n</blockquote>"},{"title":"VTK-VS2008编译教程","date":"2017-05-07T14:57:45.000Z","tags":["VTK","visualstudio"],"categories":"VTK","_content":"## 准备工作\n### 环境\n* Win10 64bit 家庭版\n* VS2008 SP1\n* Qt 4.8.4\n* CMake 3.8.0 64bit-win\n* VTK-7.1.1\n\n<!--more-->\n\n### 下载\n将上述组件下载安装好\n注意事项：\n1. Qt需要下载两个东西：\n\t* qt-win-opensource-4.8.4-vs2008.exe\n\t* qt-vs-addin-1.1.11-opensource.exe\n直接谷歌搜索文件名即可找到下载地址。\n2. VTK-7.1.1可以下载data也可以不下载。\n## 安装\n### 安装Qt\n按照提示一步步安装即可\n### 安装 CMAKE\n下载后安装即可\n### 编译VTK\n1. 新建两个文件夹，一个src，用来存放源代码；一个bin，用来存放二进制文件。\n2. 将VTK-7.1.1.zip解压至src。\n3. 打开CMAKE，`Where is the source code` 填写src的绝对路径，`Where to build the binaries` 填写bin的绝对路径，比那一成功后的文件就放在这里。\n4. 点击Config，选择VS2008，确定后，开始编译，过程大约几分钟。\n5. 待编译完成后，会出现许多红色的选项，这些都是需要修改的选项。勾选CMake界面上的Grouped和Advanced, Grouped是对配置分组,Advanced是显示高级配置.\n6. VTK_Group_Qt          选中,使用Qt.\n7. CMAKE_INSTALL_PREFIX  修改为VTK/vsvtk  。这个目录可以自行指定,当VTK编译完成后,安装时,会将VTK安装到指定的目录。\n8. INSTALL_BIN_DIR\nINSTALL_INC_DIR\nINSTALL_LIB_DIR\nINSTALL_MAN_DIR\nINSTALL_PKGCONFIG_DIR\n这些也分别更改到VTK\\vsvtk 的相应目录下。\n9. configuer\n10. generate\n11. 完成后，打开VTK\\bin 用VS打开构建目录下的VTK.sln解决方案。\n12. 等待IDE解析,解析完成后,状态栏会显示就绪.解析过程比较耗时,耐心等待VS解析完成。\n13. 生成成功之后,就可以安装VTK了,右击INSTALL项目,选择仅生成INSTALL.然后就开始安装VTK了,安装完成,就可以在之前设置的prefix目录下看到安装之后的VTK.\n14. 设置环境变量，将VTK\\vsvtk 加入环境变量。\n## 案例运行\n新建文件夹Example，在文件夹下新建src和bin。\n进入网址http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder\n复制源代码。\n若VTK_DIR not found ，则手动填写为VTL\\bin。\nconfigure,generate。\n用VS打开工程并编译。\n打开cmd，进入所在目录，运行*.exe即可。\n\n\n","source":"posts_bak/VTK-VS2008编译教程.md","raw":"---\ntitle: VTK-VS2008编译教程\ndate: 2017-05-07 22:57:45\ntags:\n  - VTK\n  - visualstudio\ncategories: VTK\n---\n## 准备工作\n### 环境\n* Win10 64bit 家庭版\n* VS2008 SP1\n* Qt 4.8.4\n* CMake 3.8.0 64bit-win\n* VTK-7.1.1\n\n<!--more-->\n\n### 下载\n将上述组件下载安装好\n注意事项：\n1. Qt需要下载两个东西：\n\t* qt-win-opensource-4.8.4-vs2008.exe\n\t* qt-vs-addin-1.1.11-opensource.exe\n直接谷歌搜索文件名即可找到下载地址。\n2. VTK-7.1.1可以下载data也可以不下载。\n## 安装\n### 安装Qt\n按照提示一步步安装即可\n### 安装 CMAKE\n下载后安装即可\n### 编译VTK\n1. 新建两个文件夹，一个src，用来存放源代码；一个bin，用来存放二进制文件。\n2. 将VTK-7.1.1.zip解压至src。\n3. 打开CMAKE，`Where is the source code` 填写src的绝对路径，`Where to build the binaries` 填写bin的绝对路径，比那一成功后的文件就放在这里。\n4. 点击Config，选择VS2008，确定后，开始编译，过程大约几分钟。\n5. 待编译完成后，会出现许多红色的选项，这些都是需要修改的选项。勾选CMake界面上的Grouped和Advanced, Grouped是对配置分组,Advanced是显示高级配置.\n6. VTK_Group_Qt          选中,使用Qt.\n7. CMAKE_INSTALL_PREFIX  修改为VTK/vsvtk  。这个目录可以自行指定,当VTK编译完成后,安装时,会将VTK安装到指定的目录。\n8. INSTALL_BIN_DIR\nINSTALL_INC_DIR\nINSTALL_LIB_DIR\nINSTALL_MAN_DIR\nINSTALL_PKGCONFIG_DIR\n这些也分别更改到VTK\\vsvtk 的相应目录下。\n9. configuer\n10. generate\n11. 完成后，打开VTK\\bin 用VS打开构建目录下的VTK.sln解决方案。\n12. 等待IDE解析,解析完成后,状态栏会显示就绪.解析过程比较耗时,耐心等待VS解析完成。\n13. 生成成功之后,就可以安装VTK了,右击INSTALL项目,选择仅生成INSTALL.然后就开始安装VTK了,安装完成,就可以在之前设置的prefix目录下看到安装之后的VTK.\n14. 设置环境变量，将VTK\\vsvtk 加入环境变量。\n## 案例运行\n新建文件夹Example，在文件夹下新建src和bin。\n进入网址http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder\n复制源代码。\n若VTK_DIR not found ，则手动填写为VTL\\bin。\nconfigure,generate。\n用VS打开工程并编译。\n打开cmd，进入所在目录，运行*.exe即可。\n\n\n","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/VTK-VS2008编译教程.html","comments":1,"layout":"page","_id":"cjpccu59d000fjcm1lf3cja6t","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Win10 64bit 家庭版</li>\n<li>VS2008 SP1</li>\n<li>Qt 4.8.4</li>\n<li>CMake 3.8.0 64bit-win</li>\n<li>VTK-7.1.1</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>将上述组件下载安装好<br>注意事项：</p>\n<ol>\n<li>Qt需要下载两个东西：<ul>\n<li>qt-win-opensource-4.8.4-vs2008.exe</li>\n<li>qt-vs-addin-1.1.11-opensource.exe<br>直接谷歌搜索文件名即可找到下载地址。</li>\n</ul>\n</li>\n<li>VTK-7.1.1可以下载data也可以不下载。<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装Qt\"><a href=\"#安装Qt\" class=\"headerlink\" title=\"安装Qt\"></a>安装Qt</h3>按照提示一步步安装即可<h3 id=\"安装-CMAKE\"><a href=\"#安装-CMAKE\" class=\"headerlink\" title=\"安装 CMAKE\"></a>安装 CMAKE</h3>下载后安装即可<h3 id=\"编译VTK\"><a href=\"#编译VTK\" class=\"headerlink\" title=\"编译VTK\"></a>编译VTK</h3></li>\n<li>新建两个文件夹，一个src，用来存放源代码；一个bin，用来存放二进制文件。</li>\n<li>将VTK-7.1.1.zip解压至src。</li>\n<li>打开CMAKE，<code>Where is the source code</code> 填写src的绝对路径，<code>Where to build the binaries</code> 填写bin的绝对路径，比那一成功后的文件就放在这里。</li>\n<li>点击Config，选择VS2008，确定后，开始编译，过程大约几分钟。</li>\n<li>待编译完成后，会出现许多红色的选项，这些都是需要修改的选项。勾选CMake界面上的Grouped和Advanced, Grouped是对配置分组,Advanced是显示高级配置.</li>\n<li>VTK_Group_Qt          选中,使用Qt.</li>\n<li>CMAKE_INSTALL_PREFIX  修改为VTK/vsvtk  。这个目录可以自行指定,当VTK编译完成后,安装时,会将VTK安装到指定的目录。</li>\n<li>INSTALL_BIN_DIR<br>INSTALL_INC_DIR<br>INSTALL_LIB_DIR<br>INSTALL_MAN_DIR<br>INSTALL_PKGCONFIG_DIR<br>这些也分别更改到VTK\\vsvtk 的相应目录下。</li>\n<li>configuer</li>\n<li>generate</li>\n<li>完成后，打开VTK\\bin 用VS打开构建目录下的VTK.sln解决方案。</li>\n<li>等待IDE解析,解析完成后,状态栏会显示就绪.解析过程比较耗时,耐心等待VS解析完成。</li>\n<li>生成成功之后,就可以安装VTK了,右击INSTALL项目,选择仅生成INSTALL.然后就开始安装VTK了,安装完成,就可以在之前设置的prefix目录下看到安装之后的VTK.</li>\n<li>设置环境变量，将VTK\\vsvtk 加入环境变量。<h2 id=\"案例运行\"><a href=\"#案例运行\" class=\"headerlink\" title=\"案例运行\"></a>案例运行</h2>新建文件夹Example，在文件夹下新建src和bin。<br>进入网址<a href=\"http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder\" target=\"_blank\" rel=\"noopener\">http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder</a><br>复制源代码。<br>若VTK_DIR not found ，则手动填写为VTL\\bin。<br>configure,generate。<br>用VS打开工程并编译。<br>打开cmd，进入所在目录，运行*.exe即可。</li>\n</ol>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Win10 64bit 家庭版</li>\n<li>VS2008 SP1</li>\n<li>Qt 4.8.4</li>\n<li>CMake 3.8.0 64bit-win</li>\n<li>VTK-7.1.1</li>\n</ul>","more":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>将上述组件下载安装好<br>注意事项：</p>\n<ol>\n<li>Qt需要下载两个东西：<ul>\n<li>qt-win-opensource-4.8.4-vs2008.exe</li>\n<li>qt-vs-addin-1.1.11-opensource.exe<br>直接谷歌搜索文件名即可找到下载地址。</li>\n</ul>\n</li>\n<li>VTK-7.1.1可以下载data也可以不下载。<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装Qt\"><a href=\"#安装Qt\" class=\"headerlink\" title=\"安装Qt\"></a>安装Qt</h3>按照提示一步步安装即可<h3 id=\"安装-CMAKE\"><a href=\"#安装-CMAKE\" class=\"headerlink\" title=\"安装 CMAKE\"></a>安装 CMAKE</h3>下载后安装即可<h3 id=\"编译VTK\"><a href=\"#编译VTK\" class=\"headerlink\" title=\"编译VTK\"></a>编译VTK</h3></li>\n<li>新建两个文件夹，一个src，用来存放源代码；一个bin，用来存放二进制文件。</li>\n<li>将VTK-7.1.1.zip解压至src。</li>\n<li>打开CMAKE，<code>Where is the source code</code> 填写src的绝对路径，<code>Where to build the binaries</code> 填写bin的绝对路径，比那一成功后的文件就放在这里。</li>\n<li>点击Config，选择VS2008，确定后，开始编译，过程大约几分钟。</li>\n<li>待编译完成后，会出现许多红色的选项，这些都是需要修改的选项。勾选CMake界面上的Grouped和Advanced, Grouped是对配置分组,Advanced是显示高级配置.</li>\n<li>VTK_Group_Qt          选中,使用Qt.</li>\n<li>CMAKE_INSTALL_PREFIX  修改为VTK/vsvtk  。这个目录可以自行指定,当VTK编译完成后,安装时,会将VTK安装到指定的目录。</li>\n<li>INSTALL_BIN_DIR<br>INSTALL_INC_DIR<br>INSTALL_LIB_DIR<br>INSTALL_MAN_DIR<br>INSTALL_PKGCONFIG_DIR<br>这些也分别更改到VTK\\vsvtk 的相应目录下。</li>\n<li>configuer</li>\n<li>generate</li>\n<li>完成后，打开VTK\\bin 用VS打开构建目录下的VTK.sln解决方案。</li>\n<li>等待IDE解析,解析完成后,状态栏会显示就绪.解析过程比较耗时,耐心等待VS解析完成。</li>\n<li>生成成功之后,就可以安装VTK了,右击INSTALL项目,选择仅生成INSTALL.然后就开始安装VTK了,安装完成,就可以在之前设置的prefix目录下看到安装之后的VTK.</li>\n<li>设置环境变量，将VTK\\vsvtk 加入环境变量。<h2 id=\"案例运行\"><a href=\"#案例运行\" class=\"headerlink\" title=\"案例运行\"></a>案例运行</h2>新建文件夹Example，在文件夹下新建src和bin。<br>进入网址<a href=\"http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder\" target=\"_blank\" rel=\"noopener\">http://www.vtk.org/Wiki/VTK/Examples/Cxx/Rendering/Cylinder</a><br>复制源代码。<br>若VTK_DIR not found ，则手动填写为VTL\\bin。<br>configure,generate。<br>用VS打开工程并编译。<br>打开cmd，进入所在目录，运行*.exe即可。</li>\n</ol>"},{"title":"VTK运行Tcl文件","date":"2017-05-07T14:59:20.000Z","tags":["VTK","Tcl"],"categories":"VTK","_content":"环境：\n* Win10 64bit 家庭版\n* VS-2008\n* VTK-7.1.1\n* Tcl-8.6\n1. 下载ActiveTcl，可以去activestate网站下载。下载完成后安装，例如安装路径是d:\\tcl  **注意：安装时一定要以管理员身份运行，不然会加不进系统变量！**\n\n<!--more-->\n\n2. 打开CMAKE，Configure完成后，将`VTK_WRAP_TCL`勾选上，再次Configure，之后将`TCL_INTERNAL_PATH`更改为`\\你的VTK源码解压路径\\VTK-7.1.1\\ThirdParty\\TclTk\\internals\\tk8.6`\n**注意：切记:要用“/”而不是“\\”。**\n3. 打开生成文件夹，使用VTK.SLN生成，之后在INSTALL方案上选“仅用于项目”->“仅生成INSTALL”安装。\n4. 在PATH中添加：D:\\Tcl\\bin;D:\\VTK\\bin;新建系统变量`TCLLIBPATH`，内容设为`\\你的VTK生成文件夹\\VTK-7.1.1-bin\\Wrapping\\Tcl\\Debug`\n完成。\n遇到的坑：\n1. 安装Tcl时，未按照管理员身份运行，导致Tcl没有加进系统变量。\n2. 未设置`TCL_INTERNAL_PATH`，因为这个的参数默认是错的。\n这两条导致编译VTK.sln时，有80多个项目编译失败。\n3. 由于`TCLLIBPATH`的设置错误，导致打开Tcl文件时提示`can't find package vtk`。\n\n>参考：http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html","source":"posts_bak/VTK运行Tcl文件.md","raw":"---\ntitle: VTK运行Tcl文件\ndate: 2017-05-07 22:59:20\ntags:\n  - VTK\n  - Tcl\ncategories: VTK\n---\n环境：\n* Win10 64bit 家庭版\n* VS-2008\n* VTK-7.1.1\n* Tcl-8.6\n1. 下载ActiveTcl，可以去activestate网站下载。下载完成后安装，例如安装路径是d:\\tcl  **注意：安装时一定要以管理员身份运行，不然会加不进系统变量！**\n\n<!--more-->\n\n2. 打开CMAKE，Configure完成后，将`VTK_WRAP_TCL`勾选上，再次Configure，之后将`TCL_INTERNAL_PATH`更改为`\\你的VTK源码解压路径\\VTK-7.1.1\\ThirdParty\\TclTk\\internals\\tk8.6`\n**注意：切记:要用“/”而不是“\\”。**\n3. 打开生成文件夹，使用VTK.SLN生成，之后在INSTALL方案上选“仅用于项目”->“仅生成INSTALL”安装。\n4. 在PATH中添加：D:\\Tcl\\bin;D:\\VTK\\bin;新建系统变量`TCLLIBPATH`，内容设为`\\你的VTK生成文件夹\\VTK-7.1.1-bin\\Wrapping\\Tcl\\Debug`\n完成。\n遇到的坑：\n1. 安装Tcl时，未按照管理员身份运行，导致Tcl没有加进系统变量。\n2. 未设置`TCL_INTERNAL_PATH`，因为这个的参数默认是错的。\n这两条导致编译VTK.sln时，有80多个项目编译失败。\n3. 由于`TCLLIBPATH`的设置错误，导致打开Tcl文件时提示`can't find package vtk`。\n\n>参考：http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/VTK运行Tcl文件.html","comments":1,"layout":"page","_id":"cjpccu59f000ijcm1049eatgd","content":"<p>环境：</p>\n<ul>\n<li>Win10 64bit 家庭版</li>\n<li>VS-2008</li>\n<li>VTK-7.1.1</li>\n<li>Tcl-8.6</li>\n</ul>\n<ol>\n<li>下载ActiveTcl，可以去activestate网站下载。下载完成后安装，例如安装路径是d:\\tcl  <strong>注意：安装时一定要以管理员身份运行，不然会加不进系统变量！</strong></li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>打开CMAKE，Configure完成后，将<code>VTK_WRAP_TCL</code>勾选上，再次Configure，之后将<code>TCL_INTERNAL_PATH</code>更改为<code>\\你的VTK源码解压路径\\VTK-7.1.1\\ThirdParty\\TclTk\\internals\\tk8.6</code><br><strong>注意：切记:要用“/”而不是“\\”。</strong></li>\n<li>打开生成文件夹，使用VTK.SLN生成，之后在INSTALL方案上选“仅用于项目”-&gt;“仅生成INSTALL”安装。</li>\n<li>在PATH中添加：D:\\Tcl\\bin;D:\\VTK\\bin;新建系统变量<code>TCLLIBPATH</code>，内容设为<code>\\你的VTK生成文件夹\\VTK-7.1.1-bin\\Wrapping\\Tcl\\Debug</code><br>完成。<br>遇到的坑：</li>\n<li>安装Tcl时，未按照管理员身份运行，导致Tcl没有加进系统变量。</li>\n<li>未设置<code>TCL_INTERNAL_PATH</code>，因为这个的参数默认是错的。<br>这两条导致编译VTK.sln时，有80多个项目编译失败。</li>\n<li>由于<code>TCLLIBPATH</code>的设置错误，导致打开Tcl文件时提示<code>can&#39;t find package vtk</code>。</li>\n</ol>\n<blockquote>\n<p>参考：<a href=\"http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html</a></p>\n</blockquote>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<p>环境：</p>\n<ul>\n<li>Win10 64bit 家庭版</li>\n<li>VS-2008</li>\n<li>VTK-7.1.1</li>\n<li>Tcl-8.6</li>\n</ul>\n<ol>\n<li>下载ActiveTcl，可以去activestate网站下载。下载完成后安装，例如安装路径是d:\\tcl  <strong>注意：安装时一定要以管理员身份运行，不然会加不进系统变量！</strong></li>\n</ol>","more":"<ol start=\"2\">\n<li>打开CMAKE，Configure完成后，将<code>VTK_WRAP_TCL</code>勾选上，再次Configure，之后将<code>TCL_INTERNAL_PATH</code>更改为<code>\\你的VTK源码解压路径\\VTK-7.1.1\\ThirdParty\\TclTk\\internals\\tk8.6</code><br><strong>注意：切记:要用“/”而不是“\\”。</strong></li>\n<li>打开生成文件夹，使用VTK.SLN生成，之后在INSTALL方案上选“仅用于项目”-&gt;“仅生成INSTALL”安装。</li>\n<li>在PATH中添加：D:\\Tcl\\bin;D:\\VTK\\bin;新建系统变量<code>TCLLIBPATH</code>，内容设为<code>\\你的VTK生成文件夹\\VTK-7.1.1-bin\\Wrapping\\Tcl\\Debug</code><br>完成。<br>遇到的坑：</li>\n<li>安装Tcl时，未按照管理员身份运行，导致Tcl没有加进系统变量。</li>\n<li>未设置<code>TCL_INTERNAL_PATH</code>，因为这个的参数默认是错的。<br>这两条导致编译VTK.sln时，有80多个项目编译失败。</li>\n<li>由于<code>TCLLIBPATH</code>的设置错误，导致打开Tcl文件时提示<code>can&#39;t find package vtk</code>。</li>\n</ol>\n<blockquote>\n<p>参考：<a href=\"http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/limeng/archive/2010/08/28/1810701.html</a></p>\n</blockquote>"},{"title":"beamer的theme","date":"2016-05-10T10:06:12.000Z","categories":"软件","tags":["latex"],"keywords":"beamer,theme,latex,LaTex","_content":"\n发现两个不错的网站\n\n* 所有自带的主题列表\n\n      https://www.hartwork.org/beamer-theme-matrix/\n\n* 这个网站也有不少好主题\n\n https://latex.simon04.net/","source":"posts_bak/beamer的theme.md","raw":"---\ntitle: beamer的theme\ndate: 2016-05-10 18:06:12\ncategories: 软件\ntags: [latex]\nkeywords: beamer,theme,latex,LaTex\n---\n\n发现两个不错的网站\n\n* 所有自带的主题列表\n\n      https://www.hartwork.org/beamer-theme-matrix/\n\n* 这个网站也有不少好主题\n\n https://latex.simon04.net/","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/beamer的theme.html","comments":1,"layout":"page","_id":"cjpccu59h000njcm10w825a89","content":"<p>发现两个不错的网站</p>\n<ul>\n<li><p>所有自带的主题列表</p>\n<pre><code>https://www.hartwork.org/beamer-theme-matrix/\n</code></pre></li>\n<li><p>这个网站也有不少好主题</p>\n<p><a href=\"https://latex.simon04.net/\" target=\"_blank\" rel=\"noopener\">https://latex.simon04.net/</a></p>\n</li>\n</ul>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<p>发现两个不错的网站</p>\n<ul>\n<li><p>所有自带的主题列表</p>\n<pre><code>https://www.hartwork.org/beamer-theme-matrix/\n</code></pre></li>\n<li><p>这个网站也有不少好主题</p>\n<p><a href=\"https://latex.simon04.net/\" target=\"_blank\" rel=\"noopener\">https://latex.simon04.net/</a></p>\n</li>\n</ul>\n"},{"title":"coding和github同时使用","date":"2016-05-01T10:06:12.000Z","categories":"Git","tags":["coding","Github","Git"],"keywords":"coding,Github,Git","_content":"\n## 引言  \n\n先贴几个我的参考网站：\n\n>[非常好的git学习站（入门）](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)  \n>[Git管理多个远程仓库(以Github和Coding为例)](http://www.tuicool.com/articles/NZNJVvB)  \n>[如何在同一台电脑上使用两个github,一个往coding推，一个往github推，亲测有效哦](http://my.oschina.net/450192529/blog/636106)  \n>[如何在同一台电脑上使用两个github账户](http://blog.csdn.net/chaoyue0071/article/details/41824339)  \n>[执行ssh-add时出现Could not open a connection to your authentication agent](http://www.cnblogs.com/sheldonxu/archive/2012/09/17/2688281.html)  \n>[github常见操作和常见错误！错误提示：fatal: remote origin already exists. ](http://blog.163.com/023_dns/blog/static/1187273662013111301046930/)","source":"posts_bak/coding和github同时使用.md","raw":"---\ntitle: coding和github同时使用\ndate: 2016-05-01 18:06:12\ncategories: Git\ntags: [coding,Github,Git]\nkeywords: coding,Github,Git\n---\n\n## 引言  \n\n先贴几个我的参考网站：\n\n>[非常好的git学习站（入门）](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)  \n>[Git管理多个远程仓库(以Github和Coding为例)](http://www.tuicool.com/articles/NZNJVvB)  \n>[如何在同一台电脑上使用两个github,一个往coding推，一个往github推，亲测有效哦](http://my.oschina.net/450192529/blog/636106)  \n>[如何在同一台电脑上使用两个github账户](http://blog.csdn.net/chaoyue0071/article/details/41824339)  \n>[执行ssh-add时出现Could not open a connection to your authentication agent](http://www.cnblogs.com/sheldonxu/archive/2012/09/17/2688281.html)  \n>[github常见操作和常见错误！错误提示：fatal: remote origin already exists. ](http://blog.163.com/023_dns/blog/static/1187273662013111301046930/)","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/coding和github同时使用.html","comments":1,"layout":"page","_id":"cjpccu59j000qjcm1wxbqk411","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>先贴几个我的参考网站：</p>\n<blockquote>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">非常好的git学习站（入门）</a><br><a href=\"http://www.tuicool.com/articles/NZNJVvB\" target=\"_blank\" rel=\"noopener\">Git管理多个远程仓库(以Github和Coding为例)</a><br><a href=\"http://my.oschina.net/450192529/blog/636106\" target=\"_blank\" rel=\"noopener\">如何在同一台电脑上使用两个github,一个往coding推，一个往github推，亲测有效哦</a><br><a href=\"http://blog.csdn.net/chaoyue0071/article/details/41824339\" target=\"_blank\" rel=\"noopener\">如何在同一台电脑上使用两个github账户</a><br><a href=\"http://www.cnblogs.com/sheldonxu/archive/2012/09/17/2688281.html\" target=\"_blank\" rel=\"noopener\">执行ssh-add时出现Could not open a connection to your authentication agent</a><br><a href=\"http://blog.163.com/023_dns/blog/static/1187273662013111301046930/\" target=\"_blank\" rel=\"noopener\">github常见操作和常见错误！错误提示：fatal: remote origin already exists. </a></p>\n</blockquote>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>先贴几个我的参考网站：</p>\n<blockquote>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">非常好的git学习站（入门）</a><br><a href=\"http://www.tuicool.com/articles/NZNJVvB\" target=\"_blank\" rel=\"noopener\">Git管理多个远程仓库(以Github和Coding为例)</a><br><a href=\"http://my.oschina.net/450192529/blog/636106\" target=\"_blank\" rel=\"noopener\">如何在同一台电脑上使用两个github,一个往coding推，一个往github推，亲测有效哦</a><br><a href=\"http://blog.csdn.net/chaoyue0071/article/details/41824339\" target=\"_blank\" rel=\"noopener\">如何在同一台电脑上使用两个github账户</a><br><a href=\"http://www.cnblogs.com/sheldonxu/archive/2012/09/17/2688281.html\" target=\"_blank\" rel=\"noopener\">执行ssh-add时出现Could not open a connection to your authentication agent</a><br><a href=\"http://blog.163.com/023_dns/blog/static/1187273662013111301046930/\" target=\"_blank\" rel=\"noopener\">github常见操作和常见错误！错误提示：fatal: remote origin already exists. </a></p>\n</blockquote>\n"},{"title":"vtk-imageblend图像融合报错","date":"2017-05-07T15:01:49.000Z","tags":["VTK"],"categories":"VTK","_content":">参考：http://blog.csdn.net/u012526003/article/details/52066403\n\n在运行《VTK图像开发进阶》中`5.2_ImageBlendExample.cpp`代码时，报错`vtkCompositeDataPipeline (004A4880): Input for connection on index 0 input port index 1 for algorithm vtkImageBlend(004A1958) is of type vtkImageData, but a vtkImageStencilData is required.`正在无解之际，找到了解决办法，感谢原博主。\n只需将原程序中\n```\nimageBlend->SetInput(0,reader->GetOutput());\nimageBlend->SetInput(1,imageSource->GetOutput());\n```\n改为\n```\nimageBlend->AddInputData(reader->GetOutput());\nimageBlend->AddInputData(imageSource->GetOutput());\n```\n即可。","source":"posts_bak/vtk-imageblend图像融合报错.md","raw":"---\ntitle: vtk-imageblend图像融合报错\ndate: 2017-05-07 23:01:49\ntags:\n  - VTK\ncategories: VTK\n---\n>参考：http://blog.csdn.net/u012526003/article/details/52066403\n\n在运行《VTK图像开发进阶》中`5.2_ImageBlendExample.cpp`代码时，报错`vtkCompositeDataPipeline (004A4880): Input for connection on index 0 input port index 1 for algorithm vtkImageBlend(004A1958) is of type vtkImageData, but a vtkImageStencilData is required.`正在无解之际，找到了解决办法，感谢原博主。\n只需将原程序中\n```\nimageBlend->SetInput(0,reader->GetOutput());\nimageBlend->SetInput(1,imageSource->GetOutput());\n```\n改为\n```\nimageBlend->AddInputData(reader->GetOutput());\nimageBlend->AddInputData(imageSource->GetOutput());\n```\n即可。","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/vtk-imageblend图像融合报错.html","comments":1,"layout":"page","_id":"cjpccu59l000vjcm12gsrx7gu","content":"<blockquote>\n<p>参考：<a href=\"http://blog.csdn.net/u012526003/article/details/52066403\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u012526003/article/details/52066403</a></p>\n</blockquote>\n<p>在运行《VTK图像开发进阶》中<code>5.2_ImageBlendExample.cpp</code>代码时，报错<code>vtkCompositeDataPipeline (004A4880): Input for connection on index 0 input port index 1 for algorithm vtkImageBlend(004A1958) is of type vtkImageData, but a vtkImageStencilData is required.</code>正在无解之际，找到了解决办法，感谢原博主。<br>只需将原程序中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageBlend-&gt;SetInput(0,reader-&gt;GetOutput());</span><br><span class=\"line\">imageBlend-&gt;SetInput(1,imageSource-&gt;GetOutput());</span><br></pre></td></tr></table></figure></p>\n<p>改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageBlend-&gt;AddInputData(reader-&gt;GetOutput());</span><br><span class=\"line\">imageBlend-&gt;AddInputData(imageSource-&gt;GetOutput());</span><br></pre></td></tr></table></figure></p>\n<p>即可。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<blockquote>\n<p>参考：<a href=\"http://blog.csdn.net/u012526003/article/details/52066403\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u012526003/article/details/52066403</a></p>\n</blockquote>\n<p>在运行《VTK图像开发进阶》中<code>5.2_ImageBlendExample.cpp</code>代码时，报错<code>vtkCompositeDataPipeline (004A4880): Input for connection on index 0 input port index 1 for algorithm vtkImageBlend(004A1958) is of type vtkImageData, but a vtkImageStencilData is required.</code>正在无解之际，找到了解决办法，感谢原博主。<br>只需将原程序中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageBlend-&gt;SetInput(0,reader-&gt;GetOutput());</span><br><span class=\"line\">imageBlend-&gt;SetInput(1,imageSource-&gt;GetOutput());</span><br></pre></td></tr></table></figure></p>\n<p>改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageBlend-&gt;AddInputData(reader-&gt;GetOutput());</span><br><span class=\"line\">imageBlend-&gt;AddInputData(imageSource-&gt;GetOutput());</span><br></pre></td></tr></table></figure></p>\n<p>即可。</p>\n"},{"title":"利用KeePass2.x进行ftp或webdev同步","date":"2016-05-01T10:06:12.000Z","categories":"软件","tags":["KeePass","Chrome"],"keywords":"KeePass,ftp,webdev,同步","_content":">方法参考[http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html](http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html)\n\n## 前言\n\n上篇博文介绍了利用软件Keepass保存密码。其实借助Dropbox或者其他同步软件将数据库.kpbx文件进行备份也很简单。但是由于某些原因，Dropbox很难上去。所以突然想到能否将文件保存在我的vps服务器上。在网上搜索教程就找到了这个方法。\n\n<!--more-->\n\n## 同步\n\n其实同步很简单，只要借助KeePass自带的URL同步功能即可。如下图：\n\n![](http://i.imgur.com/XkgdsxV.png)\n\n也就是选择“与URL同步”，**但是要注意，必须现在指定位置建立一个.kpdb数据库文件**，同步地址就填写该文件地址。\n\n## 自动同步\n\n手动同步很麻烦，那么怎么设置自动同步呢？这里可以借助KeePass自带的触发器功能，有点像Windows的“计划任务”，以下方法可以实现本地保存后，立马服务器同步的功能。\n\n1.\t“属性”选项卡，命名该触发器，如 SavedSync.（注意，后面动作选择“更改触发器 开/关 状态”时触发器名称只能手动输入，无法选择，所以这里命名还是从简，具体描述可以写到下面的注释栏。）同时勾选“启用”和“启动时打开”复选框。 \n\n2.\t“事件”选项卡，添加事件，选择“已保存数据库文件”，下面的文件/URL - 比较和过滤器可以无视。不过如果有多个数据库文件需要同步，则可以根据待保存的数据库文件名设定后续同步动作。这里我的设置如下： \n![](http://i.imgur.com/4zcHdI0.png)\n\n3.\t“条件”选项卡不加入任何条件。你也可以选择同步到 URL 文件时选择条件“远程主机可以连接(ping)”，这样只有当 URL 文件可以访问时才同步。不过我倾向于不加入这个条件，这样即使后面无法完成同步操作，也会有弹窗提示，让我们能更清楚当前的同步状态。\n\n我这里只做了简写，如果遇到某些问题，或者想更加详细地了解“触发器”功能，请访问原博客地址：[http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html](http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html)\n\n在此，对原作者表示感谢！\n\n\n","source":"posts_bak/利用Keepass2.x进行ftp或webdev同步.md","raw":"---\ntitle: 利用KeePass2.x进行ftp或webdev同步\ndate: 2016-05-01 18:06:12\ncategories: 软件\ntags: [KeePass,Chrome]\nkeywords: KeePass,ftp,webdev,同步\n---\n>方法参考[http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html](http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html)\n\n## 前言\n\n上篇博文介绍了利用软件Keepass保存密码。其实借助Dropbox或者其他同步软件将数据库.kpbx文件进行备份也很简单。但是由于某些原因，Dropbox很难上去。所以突然想到能否将文件保存在我的vps服务器上。在网上搜索教程就找到了这个方法。\n\n<!--more-->\n\n## 同步\n\n其实同步很简单，只要借助KeePass自带的URL同步功能即可。如下图：\n\n![](http://i.imgur.com/XkgdsxV.png)\n\n也就是选择“与URL同步”，**但是要注意，必须现在指定位置建立一个.kpdb数据库文件**，同步地址就填写该文件地址。\n\n## 自动同步\n\n手动同步很麻烦，那么怎么设置自动同步呢？这里可以借助KeePass自带的触发器功能，有点像Windows的“计划任务”，以下方法可以实现本地保存后，立马服务器同步的功能。\n\n1.\t“属性”选项卡，命名该触发器，如 SavedSync.（注意，后面动作选择“更改触发器 开/关 状态”时触发器名称只能手动输入，无法选择，所以这里命名还是从简，具体描述可以写到下面的注释栏。）同时勾选“启用”和“启动时打开”复选框。 \n\n2.\t“事件”选项卡，添加事件，选择“已保存数据库文件”，下面的文件/URL - 比较和过滤器可以无视。不过如果有多个数据库文件需要同步，则可以根据待保存的数据库文件名设定后续同步动作。这里我的设置如下： \n![](http://i.imgur.com/4zcHdI0.png)\n\n3.\t“条件”选项卡不加入任何条件。你也可以选择同步到 URL 文件时选择条件“远程主机可以连接(ping)”，这样只有当 URL 文件可以访问时才同步。不过我倾向于不加入这个条件，这样即使后面无法完成同步操作，也会有弹窗提示，让我们能更清楚当前的同步状态。\n\n我这里只做了简写，如果遇到某些问题，或者想更加详细地了解“触发器”功能，请访问原博客地址：[http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html](http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html)\n\n在此，对原作者表示感谢！\n\n\n","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/利用Keepass2.x进行ftp或webdev同步.html","comments":1,"layout":"page","_id":"cjpccu59o000xjcm1bg9k6txq","content":"<blockquote>\n<p>方法参考<a href=\"http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上篇博文介绍了利用软件Keepass保存密码。其实借助Dropbox或者其他同步软件将数据库.kpbx文件进行备份也很简单。但是由于某些原因，Dropbox很难上去。所以突然想到能否将文件保存在我的vps服务器上。在网上搜索教程就找到了这个方法。</p>\n<a id=\"more\"></a>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>其实同步很简单，只要借助KeePass自带的URL同步功能即可。如下图：</p>\n<p><img src=\"http://i.imgur.com/XkgdsxV.png\" alt=\"\"></p>\n<p>也就是选择“与URL同步”，<strong>但是要注意，必须现在指定位置建立一个.kpdb数据库文件</strong>，同步地址就填写该文件地址。</p>\n<h2 id=\"自动同步\"><a href=\"#自动同步\" class=\"headerlink\" title=\"自动同步\"></a>自动同步</h2><p>手动同步很麻烦，那么怎么设置自动同步呢？这里可以借助KeePass自带的触发器功能，有点像Windows的“计划任务”，以下方法可以实现本地保存后，立马服务器同步的功能。</p>\n<ol>\n<li><p>“属性”选项卡，命名该触发器，如 SavedSync.（注意，后面动作选择“更改触发器 开/关 状态”时触发器名称只能手动输入，无法选择，所以这里命名还是从简，具体描述可以写到下面的注释栏。）同时勾选“启用”和“启动时打开”复选框。 </p>\n</li>\n<li><p>“事件”选项卡，添加事件，选择“已保存数据库文件”，下面的文件/URL - 比较和过滤器可以无视。不过如果有多个数据库文件需要同步，则可以根据待保存的数据库文件名设定后续同步动作。这里我的设置如下：<br><img src=\"http://i.imgur.com/4zcHdI0.png\" alt=\"\"></p>\n</li>\n<li><p>“条件”选项卡不加入任何条件。你也可以选择同步到 URL 文件时选择条件“远程主机可以连接(ping)”，这样只有当 URL 文件可以访问时才同步。不过我倾向于不加入这个条件，这样即使后面无法完成同步操作，也会有弹窗提示，让我们能更清楚当前的同步状态。</p>\n</li>\n</ol>\n<p>我这里只做了简写，如果遇到某些问题，或者想更加详细地了解“触发器”功能，请访问原博客地址：<a href=\"http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html</a></p>\n<p>在此，对原作者表示感谢！</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<blockquote>\n<p>方法参考<a href=\"http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html</a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上篇博文介绍了利用软件Keepass保存密码。其实借助Dropbox或者其他同步软件将数据库.kpbx文件进行备份也很简单。但是由于某些原因，Dropbox很难上去。所以突然想到能否将文件保存在我的vps服务器上。在网上搜索教程就找到了这个方法。</p>","more":"<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>其实同步很简单，只要借助KeePass自带的URL同步功能即可。如下图：</p>\n<p><img src=\"http://i.imgur.com/XkgdsxV.png\" alt=\"\"></p>\n<p>也就是选择“与URL同步”，<strong>但是要注意，必须现在指定位置建立一个.kpdb数据库文件</strong>，同步地址就填写该文件地址。</p>\n<h2 id=\"自动同步\"><a href=\"#自动同步\" class=\"headerlink\" title=\"自动同步\"></a>自动同步</h2><p>手动同步很麻烦，那么怎么设置自动同步呢？这里可以借助KeePass自带的触发器功能，有点像Windows的“计划任务”，以下方法可以实现本地保存后，立马服务器同步的功能。</p>\n<ol>\n<li><p>“属性”选项卡，命名该触发器，如 SavedSync.（注意，后面动作选择“更改触发器 开/关 状态”时触发器名称只能手动输入，无法选择，所以这里命名还是从简，具体描述可以写到下面的注释栏。）同时勾选“启用”和“启动时打开”复选框。 </p>\n</li>\n<li><p>“事件”选项卡，添加事件，选择“已保存数据库文件”，下面的文件/URL - 比较和过滤器可以无视。不过如果有多个数据库文件需要同步，则可以根据待保存的数据库文件名设定后续同步动作。这里我的设置如下：<br><img src=\"http://i.imgur.com/4zcHdI0.png\" alt=\"\"></p>\n</li>\n<li><p>“条件”选项卡不加入任何条件。你也可以选择同步到 URL 文件时选择条件“远程主机可以连接(ping)”，这样只有当 URL 文件可以访问时才同步。不过我倾向于不加入这个条件，这样即使后面无法完成同步操作，也会有弹窗提示，让我们能更清楚当前的同步状态。</p>\n</li>\n</ol>\n<p>我这里只做了简写，如果遇到某些问题，或者想更加详细地了解“触发器”功能，请访问原博客地址：<a href=\"http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/gumuyueying/p/keepass2-sync-trigger.html</a></p>\n<p>在此，对原作者表示感谢！</p>"},{"title":"如何利用Dropbox备份指定文件夹","date":"2017-05-07T14:56:06.000Z","tags":["Dropbox"],"categories":"软件","_content":"Dropbox原生只带同步单文件夹的功能，但如果我想同步其他的文件夹怎么办呢？不能把那些文件夹都复制一份到该目录下吧。所以可用`mklink`的方法来同步。(Win Vista 及以上可用)\n\n命令如下，比如我的Dropbox备份文件夹为`C:\\Dropbox`，而我想备份的文件夹为`d:\\backup`，注意必须用管理员模式运行cmd\n\n```\nmklink /d \"C:\\Dropbox\\your-name\" D:\\backup\n```\n\n\n\n\n","source":"posts_bak/如何利用Dropbox备份指定文件夹.md","raw":"---\ntitle: 如何利用Dropbox备份指定文件夹\ndate: 2017-05-07 22:56:06\ntags:\n  - Dropbox\ncategories: 软件\n---\nDropbox原生只带同步单文件夹的功能，但如果我想同步其他的文件夹怎么办呢？不能把那些文件夹都复制一份到该目录下吧。所以可用`mklink`的方法来同步。(Win Vista 及以上可用)\n\n命令如下，比如我的Dropbox备份文件夹为`C:\\Dropbox`，而我想备份的文件夹为`d:\\backup`，注意必须用管理员模式运行cmd\n\n```\nmklink /d \"C:\\Dropbox\\your-name\" D:\\backup\n```\n\n\n\n\n","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/如何利用Dropbox备份指定文件夹.html","comments":1,"layout":"page","_id":"cjpccu59r0012jcm10t0bxje0","content":"<p>Dropbox原生只带同步单文件夹的功能，但如果我想同步其他的文件夹怎么办呢？不能把那些文件夹都复制一份到该目录下吧。所以可用<code>mklink</code>的方法来同步。(Win Vista 及以上可用)</p>\n<p>命令如下，比如我的Dropbox备份文件夹为<code>C:\\Dropbox</code>，而我想备份的文件夹为<code>d:\\backup</code>，注意必须用管理员模式运行cmd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mklink /d &quot;C:\\Dropbox\\your-name&quot; D:\\backup</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<p>Dropbox原生只带同步单文件夹的功能，但如果我想同步其他的文件夹怎么办呢？不能把那些文件夹都复制一份到该目录下吧。所以可用<code>mklink</code>的方法来同步。(Win Vista 及以上可用)</p>\n<p>命令如下，比如我的Dropbox备份文件夹为<code>C:\\Dropbox</code>，而我想备份的文件夹为<code>d:\\backup</code>，注意必须用管理员模式运行cmd</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mklink /d &quot;C:\\Dropbox\\your-name&quot; D:\\backup</span><br></pre></td></tr></table></figure>\n"},{"title":"软件推荐","tags":["markdown"],"date":"2017-06-19T09:50:33.000Z","categories":"软件","keywords":"软件推荐,效率,markdown,编辑器","_content":"\n## 引言\n\n这里归纳了一些提高工作效率的软件以及小工具。\n\n<!--more-->\n\n## Typora--好用的Markdown编辑器\n\n这是一款及其好用的Markdown编辑器，实时预览。可以打Latex公式。支持Mac、Windows、Linux，官网在[这里](https://www.typora.io/)。","source":"posts_bak/软件推荐.md","raw":"---\ntitle: 软件推荐\ntags:\n  - markdown\ndate: 2017-06-19 17:50:33\ncategories: 软件\nkeywords: 软件推荐,效率,markdown,编辑器\n---\n\n## 引言\n\n这里归纳了一些提高工作效率的软件以及小工具。\n\n<!--more-->\n\n## Typora--好用的Markdown编辑器\n\n这是一款及其好用的Markdown编辑器，实时预览。可以打Latex公式。支持Mac、Windows、Linux，官网在[这里](https://www.typora.io/)。","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/软件推荐.html","comments":1,"layout":"page","_id":"cjpccu59u0015jcm10bm7bxeg","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>这里归纳了一些提高工作效率的软件以及小工具。</p>\n<a id=\"more\"></a>\n<h2 id=\"Typora–好用的Markdown编辑器\"><a href=\"#Typora–好用的Markdown编辑器\" class=\"headerlink\" title=\"Typora–好用的Markdown编辑器\"></a>Typora–好用的Markdown编辑器</h2><p>这是一款及其好用的Markdown编辑器，实时预览。可以打Latex公式。支持Mac、Windows、Linux，官网在<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>这里归纳了一些提高工作效率的软件以及小工具。</p>","more":"<h2 id=\"Typora–好用的Markdown编辑器\"><a href=\"#Typora–好用的Markdown编辑器\" class=\"headerlink\" title=\"Typora–好用的Markdown编辑器\"></a>Typora–好用的Markdown编辑器</h2><p>这是一款及其好用的Markdown编辑器，实时预览。可以打Latex公式。支持Mac、Windows、Linux，官网在<a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>"},{"title":"Linux零打碎敲","date":"2017-05-11T01:45:51.000Z","tags":["Linux"],"categories":"Linux","_content":"## 引言\n整理一些平时用到的Linux小东西，做积累。\n\n<!--more-->\n\n## 定时启动工具crond\n### 先看看机子有没有启动crond\n```bash\nservice crond status\n```\n如果没有安装crond，可以先安装\n```bash\n#安装Crond\nyum install vixie-cron crontabs\n#设置开机启动Crontab\nchkconfig crond on\n#启动Crontab\nservice crond start\n```\n### 添加定时任务\n```\ncrontab -e\n```\n> 以下引用自[来源：Linux社区  作者：RedHat Linux中crond服务与crontab用法](http://www.linuxidc.com/Linux/2010-08/27700.htm)\ncrontab file的格式: \n    crontab 文件中的行由 6 个字段组成，不同字段间用空格或 tab 键分隔。前 5 个字段指定命令要运行的时间 \n       分钟 (0-59) \n       小时 (0-23) \n       日期 (1-31) \n       月份 (1-12) \n       星期几（0-6，其中 0 代表星期日） \n       第 6 个字段是一个要在适当时间执行的字符串 \n例子: \n      #MIN HOUR DAY MONTH DAYOFWEEK COMMAND \n      #每天早上6点10分 \n      10 6 * * * date \n      #每两个小时 \n      0 */2 * * * date    (solaris 5.8似乎不支持此种写法) \n      #晚上11点到早上8点之间每两个小时，早上8点 \n      0 23-7/2，8 * * * date \n      #每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 \n      0 11 4 * mon-wed date \n      #1月份日早上4点 \n      0 4 1 jan * date\n\n### 重启crond\n```\nservice crond restart\n```\n\n## 查看磁盘空间大小\n```\ndf -hl\n```\n如下图\n![df -hl命令效果](http://op0n2nyjd.bkt.clouddn.com/1705111.JPG)\n\n## .sh文件格式\n### 开头\n文件的第一行必须是：\n```\n#!/bin/sh\n```\n符号#!用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用/bin/sh来执行程序。\n当编写脚本完成时，如果要执行该脚本，还必须使其可执行。\n```\nchmod +x filename\n```\n用`./filename`来运行\n\n### 注释\n以`#`开头的句子表示注释，直到这一行的结束。","source":"posts_bak/Linux零打碎敲.md","raw":"---\ntitle: Linux零打碎敲\ndate: 2017-05-11 09:45:51\ntags:\n  - Linux\ncategories: Linux\n---\n## 引言\n整理一些平时用到的Linux小东西，做积累。\n\n<!--more-->\n\n## 定时启动工具crond\n### 先看看机子有没有启动crond\n```bash\nservice crond status\n```\n如果没有安装crond，可以先安装\n```bash\n#安装Crond\nyum install vixie-cron crontabs\n#设置开机启动Crontab\nchkconfig crond on\n#启动Crontab\nservice crond start\n```\n### 添加定时任务\n```\ncrontab -e\n```\n> 以下引用自[来源：Linux社区  作者：RedHat Linux中crond服务与crontab用法](http://www.linuxidc.com/Linux/2010-08/27700.htm)\ncrontab file的格式: \n    crontab 文件中的行由 6 个字段组成，不同字段间用空格或 tab 键分隔。前 5 个字段指定命令要运行的时间 \n       分钟 (0-59) \n       小时 (0-23) \n       日期 (1-31) \n       月份 (1-12) \n       星期几（0-6，其中 0 代表星期日） \n       第 6 个字段是一个要在适当时间执行的字符串 \n例子: \n      #MIN HOUR DAY MONTH DAYOFWEEK COMMAND \n      #每天早上6点10分 \n      10 6 * * * date \n      #每两个小时 \n      0 */2 * * * date    (solaris 5.8似乎不支持此种写法) \n      #晚上11点到早上8点之间每两个小时，早上8点 \n      0 23-7/2，8 * * * date \n      #每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 \n      0 11 4 * mon-wed date \n      #1月份日早上4点 \n      0 4 1 jan * date\n\n### 重启crond\n```\nservice crond restart\n```\n\n## 查看磁盘空间大小\n```\ndf -hl\n```\n如下图\n![df -hl命令效果](http://op0n2nyjd.bkt.clouddn.com/1705111.JPG)\n\n## .sh文件格式\n### 开头\n文件的第一行必须是：\n```\n#!/bin/sh\n```\n符号#!用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用/bin/sh来执行程序。\n当编写脚本完成时，如果要执行该脚本，还必须使其可执行。\n```\nchmod +x filename\n```\n用`./filename`来运行\n\n### 注释\n以`#`开头的句子表示注释，直到这一行的结束。","updated":"2018-07-20T11:34:08.000Z","path":"posts_bak/Linux零打碎敲.html","comments":1,"layout":"page","_id":"cjpccu66q003qjcm1tqy1uspb","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>整理一些平时用到的Linux小东西，做积累。</p>\n<a id=\"more\"></a>\n<h2 id=\"定时启动工具crond\"><a href=\"#定时启动工具crond\" class=\"headerlink\" title=\"定时启动工具crond\"></a>定时启动工具crond</h2><h3 id=\"先看看机子有没有启动crond\"><a href=\"#先看看机子有没有启动crond\" class=\"headerlink\" title=\"先看看机子有没有启动crond\"></a>先看看机子有没有启动crond</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond status</span><br></pre></td></tr></table></figure>\n<p>如果没有安装crond，可以先安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装Crond</span></span><br><span class=\"line\">yum install vixie-cron crontabs</span><br><span class=\"line\"><span class=\"comment\">#设置开机启动Crontab</span></span><br><span class=\"line\">chkconfig crond on</span><br><span class=\"line\"><span class=\"comment\">#启动Crontab</span></span><br><span class=\"line\">service crond start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下引用自<a href=\"http://www.linuxidc.com/Linux/2010-08/27700.htm\" target=\"_blank\" rel=\"noopener\">来源：Linux社区  作者：RedHat Linux中crond服务与crontab用法</a><br>crontab file的格式:<br>    crontab 文件中的行由 6 个字段组成，不同字段间用空格或 tab 键分隔。前 5 个字段指定命令要运行的时间<br>       分钟 (0-59)<br>       小时 (0-23)<br>       日期 (1-31)<br>       月份 (1-12)<br>       星期几（0-6，其中 0 代表星期日）<br>       第 6 个字段是一个要在适当时间执行的字符串<br>例子: </p>\n</blockquote>\n<pre><code>#MIN HOUR DAY MONTH DAYOFWEEK COMMAND \n#每天早上6点10分 \n10 6 * * * date \n#每两个小时 \n0 */2 * * * date    (solaris 5.8似乎不支持此种写法) \n#晚上11点到早上8点之间每两个小时，早上8点 \n0 23-7/2，8 * * * date \n#每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 \n0 11 4 * mon-wed date \n#1月份日早上4点 \n0 4 1 jan * date\n</code></pre><h3 id=\"重启crond\"><a href=\"#重启crond\" class=\"headerlink\" title=\"重启crond\"></a>重启crond</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看磁盘空间大小\"><a href=\"#查看磁盘空间大小\" class=\"headerlink\" title=\"查看磁盘空间大小\"></a>查看磁盘空间大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -hl</span><br></pre></td></tr></table></figure>\n<p>如下图<br><img src=\"http://op0n2nyjd.bkt.clouddn.com/1705111.JPG\" alt=\"df -hl命令效果\"></p>\n<h2 id=\"sh文件格式\"><a href=\"#sh文件格式\" class=\"headerlink\" title=\".sh文件格式\"></a>.sh文件格式</h2><h3 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h3><p>文件的第一行必须是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br></pre></td></tr></table></figure></p>\n<p>符号#!用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用/bin/sh来执行程序。<br>当编写脚本完成时，如果要执行该脚本，还必须使其可执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x filename</span><br></pre></td></tr></table></figure></p>\n<p>用<code>./filename</code>来运行</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>以<code>#</code>开头的句子表示注释，直到这一行的结束。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>整理一些平时用到的Linux小东西，做积累。</p>","more":"<h2 id=\"定时启动工具crond\"><a href=\"#定时启动工具crond\" class=\"headerlink\" title=\"定时启动工具crond\"></a>定时启动工具crond</h2><h3 id=\"先看看机子有没有启动crond\"><a href=\"#先看看机子有没有启动crond\" class=\"headerlink\" title=\"先看看机子有没有启动crond\"></a>先看看机子有没有启动crond</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond status</span><br></pre></td></tr></table></figure>\n<p>如果没有安装crond，可以先安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装Crond</span></span><br><span class=\"line\">yum install vixie-cron crontabs</span><br><span class=\"line\"><span class=\"comment\">#设置开机启动Crontab</span></span><br><span class=\"line\">chkconfig crond on</span><br><span class=\"line\"><span class=\"comment\">#启动Crontab</span></span><br><span class=\"line\">service crond start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下引用自<a href=\"http://www.linuxidc.com/Linux/2010-08/27700.htm\" target=\"_blank\" rel=\"noopener\">来源：Linux社区  作者：RedHat Linux中crond服务与crontab用法</a><br>crontab file的格式:<br>    crontab 文件中的行由 6 个字段组成，不同字段间用空格或 tab 键分隔。前 5 个字段指定命令要运行的时间<br>       分钟 (0-59)<br>       小时 (0-23)<br>       日期 (1-31)<br>       月份 (1-12)<br>       星期几（0-6，其中 0 代表星期日）<br>       第 6 个字段是一个要在适当时间执行的字符串<br>例子: </p>\n</blockquote>\n<pre><code>#MIN HOUR DAY MONTH DAYOFWEEK COMMAND \n#每天早上6点10分 \n10 6 * * * date \n#每两个小时 \n0 */2 * * * date    (solaris 5.8似乎不支持此种写法) \n#晚上11点到早上8点之间每两个小时，早上8点 \n0 23-7/2，8 * * * date \n#每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 \n0 11 4 * mon-wed date \n#1月份日早上4点 \n0 4 1 jan * date\n</code></pre><h3 id=\"重启crond\"><a href=\"#重启crond\" class=\"headerlink\" title=\"重启crond\"></a>重启crond</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看磁盘空间大小\"><a href=\"#查看磁盘空间大小\" class=\"headerlink\" title=\"查看磁盘空间大小\"></a>查看磁盘空间大小</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -hl</span><br></pre></td></tr></table></figure>\n<p>如下图<br><img src=\"http://op0n2nyjd.bkt.clouddn.com/1705111.JPG\" alt=\"df -hl命令效果\"></p>\n<h2 id=\"sh文件格式\"><a href=\"#sh文件格式\" class=\"headerlink\" title=\".sh文件格式\"></a>.sh文件格式</h2><h3 id=\"开头\"><a href=\"#开头\" class=\"headerlink\" title=\"开头\"></a>开头</h3><p>文件的第一行必须是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br></pre></td></tr></table></figure></p>\n<p>符号#!用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用/bin/sh来执行程序。<br>当编写脚本完成时，如果要执行该脚本，还必须使其可执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x filename</span><br></pre></td></tr></table></figure></p>\n<p>用<code>./filename</code>来运行</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>以<code>#</code>开头的句子表示注释，直到这一行的结束。</p>"},{"title":"Slides","date":"2018-01-04T16:00:00.000Z","type":"slides","_content":"","source":"slides/index.md","raw":"---\ntitle: Slides\ndate: 2018-01-05 00:00:00\ntype: \"slides\"\n---\n","updated":"2018-07-20T10:29:52.055Z","path":"slides/index.html","comments":1,"layout":"page","_id":"cjpccu66s003sjcm16uwa02dd","content":"","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":""},{"title":"Gallery","date":"2018-01-04T16:00:00.000Z","type":"gallery","_content":"\n{% gallery https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse melody %}\n{% gallery https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png background %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b demo1 %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq demo2 %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic demo3 %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd %}\n","source":"gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2018-01-05 00:00:00\ntype: \"gallery\"\n---\n\n{% gallery https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse melody %}\n{% gallery https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png background %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b demo1 %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq demo2 %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic demo3 %}\n{% gallery https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd %}\n","updated":"2018-07-20T10:34:28.938Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"cjpccu66t003ujcm15fmqnqsd","content":"\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse')\" data-title=\"melody\" data-url=\"https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse\">\n      <div class=\"gallery-item__title\">\n        melody\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png')\" data-title=\"background\" data-url=\"https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png\">\n      <div class=\"gallery-item__title\">\n        background\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b')\" data-title=\"demo1\" data-url=\"https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b\">\n      <div class=\"gallery-item__title\">\n        demo1\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq')\" data-title=\"demo2\" data-url=\"https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq\">\n      <div class=\"gallery-item__title\">\n        demo2\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic')\" data-title=\"demo3\" data-url=\"https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic\">\n      <div class=\"gallery-item__title\">\n        demo3\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd')\" data-title=\"No title\" data-url=\"https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd\">\n      <div class=\"gallery-item__title\">\n        No title\n      </div>\n    </div>\n  \n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse')\" data-title=\"melody\" data-url=\"https://ws1.sinaimg.cn/large/8700af19gy1fp5i6o2vghj20ea0eajse\">\n      <div class=\"gallery-item__title\">\n        melody\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png')\" data-title=\"background\" data-url=\"https://user-images.githubusercontent.com/12621342/37325500-23e8f77c-26c9-11e8-8e24-eb4346f1fff5.png\">\n      <div class=\"gallery-item__title\">\n        background\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b')\" data-title=\"demo1\" data-url=\"https://ws1.sinaimg.cn/large/8700af19gy1fp5i64zaxqj20b40b474b\">\n      <div class=\"gallery-item__title\">\n        demo1\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq')\" data-title=\"demo2\" data-url=\"https://ws1.sinaimg.cn/large/8700af19ly1fn2h26q32uj21120kudqq\">\n      <div class=\"gallery-item__title\">\n        demo2\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic')\" data-title=\"demo3\" data-url=\"https://ws1.sinaimg.cn/large/8700af19ly1fnhdaimi40j218g0p0dic\">\n      <div class=\"gallery-item__title\">\n        demo3\n      </div>\n    </div>\n  \n\n    <div class=\"gallery-item\" style=\"background-image: url('https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd')\" data-title=\"No title\" data-url=\"https://ws1.sinaimg.cn/large/8700af19ly1fn2i5kjh2pj21120kuncd\">\n      <div class=\"gallery-item__title\">\n        No title\n      </div>\n    </div>\n  \n"},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2018-07-20T10:26:09.143Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjpccu670003xjcm1xygxoe80","content":"","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":""}],"Post":[{"title":"Bash编程（一）","date":"2017-05-15T10:00:27.000Z","_content":"## 入门\n### Shell\nshell是一个命令解释器，是介于操作系统内核与用户之间的一个绝缘层。准确地说，它也是能力很强的计算机语言，被称为解释性语言或脚本语言。它可以通过将**系统调用、公共程序、工具和编译过的二进制程序**“粘合”在一起来建立应用，这是大多数脚本语言的共同特征，所以有时候脚本语言又叫做“胶水语言”\n\n<!--more-->\n\n### 重定向\n`>` 这个符号是重定向,执行以下代码，就会在当前目录下生成一个my.txt。\n```\n#!/bin/bash\n echo \"Hello World\" > my.txt\n```\n### 小案例\n如何利用bash将某文件的内容清楚而保留文件？\n```\n#!/bin/bash\n\n# 初始化一个变量\nLOG_DIR=/var/log\n\ncd $LOG_DIR\n\ncat /dev/null > messages\ncat /dev/null > wtmp\n\necho \"Logs cleaned up.\"\n\nexit\n```\n注：\n`/dev/null` 这个东西可以理解为一个黑洞，里面是空的，将这个空文件写入某个文件，里面的内容就被删了。\n## 特殊字符\n### 注释\n行首以`#`开头(除`#!`之外)的是注释。`#!`是用于指定当前脚本的解释器，我们这里为`bash`，且应该指明完整路径，所以为`/bin/bash`。\n```\n #!/bin/bash\n\n echo \"The # here does not begin a comment.\"\n echo 'The # here does not begin a comment.'\n echo The \\# here does not begin a comment. # \\#是转义字符\n echo The # 这里开始一个注释\n echo $(( 2#101011 ))     # 数制转换（使用二进制表示），不是一个注释，双括号表示对于数字的处理\n\n # 欢迎来到实验楼参观学习\n```\n","source":"_posts/Bash编程（一）.md","raw":"---\ntitle: Bash编程（一）\ndate: 2017-05-15 18:00:27\ntags:\n  - Linux\n  - Bash\ncategories: Linux\n---\n## 入门\n### Shell\nshell是一个命令解释器，是介于操作系统内核与用户之间的一个绝缘层。准确地说，它也是能力很强的计算机语言，被称为解释性语言或脚本语言。它可以通过将**系统调用、公共程序、工具和编译过的二进制程序**“粘合”在一起来建立应用，这是大多数脚本语言的共同特征，所以有时候脚本语言又叫做“胶水语言”\n\n<!--more-->\n\n### 重定向\n`>` 这个符号是重定向,执行以下代码，就会在当前目录下生成一个my.txt。\n```\n#!/bin/bash\n echo \"Hello World\" > my.txt\n```\n### 小案例\n如何利用bash将某文件的内容清楚而保留文件？\n```\n#!/bin/bash\n\n# 初始化一个变量\nLOG_DIR=/var/log\n\ncd $LOG_DIR\n\ncat /dev/null > messages\ncat /dev/null > wtmp\n\necho \"Logs cleaned up.\"\n\nexit\n```\n注：\n`/dev/null` 这个东西可以理解为一个黑洞，里面是空的，将这个空文件写入某个文件，里面的内容就被删了。\n## 特殊字符\n### 注释\n行首以`#`开头(除`#!`之外)的是注释。`#!`是用于指定当前脚本的解释器，我们这里为`bash`，且应该指明完整路径，所以为`/bin/bash`。\n```\n #!/bin/bash\n\n echo \"The # here does not begin a comment.\"\n echo 'The # here does not begin a comment.'\n echo The \\# here does not begin a comment. # \\#是转义字符\n echo The # 这里开始一个注释\n echo $(( 2#101011 ))     # 数制转换（使用二进制表示），不是一个注释，双括号表示对于数字的处理\n\n # 欢迎来到实验楼参观学习\n```\n","slug":"Bash编程（一）","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu58u0000jcm1wff5hs5q","content":"<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><h3 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h3><p>shell是一个命令解释器，是介于操作系统内核与用户之间的一个绝缘层。准确地说，它也是能力很强的计算机语言，被称为解释性语言或脚本语言。它可以通过将<strong>系统调用、公共程序、工具和编译过的二进制程序</strong>“粘合”在一起来建立应用，这是大多数脚本语言的共同特征，所以有时候脚本语言又叫做“胶水语言”</p>\n<a id=\"more\"></a>\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><p><code>&gt;</code> 这个符号是重定向,执行以下代码，就会在当前目录下生成一个my.txt。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"> echo &quot;Hello World&quot; &gt; my.txt</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"小案例\"><a href=\"#小案例\" class=\"headerlink\" title=\"小案例\"></a>小案例</h3><p>如何利用bash将某文件的内容清楚而保留文件？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一个变量</span><br><span class=\"line\">LOG_DIR=/var/log</span><br><span class=\"line\"></span><br><span class=\"line\">cd $LOG_DIR</span><br><span class=\"line\"></span><br><span class=\"line\">cat /dev/null &gt; messages</span><br><span class=\"line\">cat /dev/null &gt; wtmp</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Logs cleaned up.&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure></p>\n<p>注：<br><code>/dev/null</code> 这个东西可以理解为一个黑洞，里面是空的，将这个空文件写入某个文件，里面的内容就被删了。</p>\n<h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>行首以<code>#</code>开头(除<code>#!</code>之外)的是注释。<code>#!</code>是用于指定当前脚本的解释器，我们这里为<code>bash</code>，且应该指明完整路径，所以为<code>/bin/bash</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;The # here does not begin a comment.&quot;</span><br><span class=\"line\">echo &apos;The # here does not begin a comment.&apos;</span><br><span class=\"line\">echo The \\# here does not begin a comment. # \\#是转义字符</span><br><span class=\"line\">echo The # 这里开始一个注释</span><br><span class=\"line\">echo $(( 2#101011 ))     # 数制转换（使用二进制表示），不是一个注释，双括号表示对于数字的处理</span><br><span class=\"line\"></span><br><span class=\"line\"># 欢迎来到实验楼参观学习</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><h3 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h3><p>shell是一个命令解释器，是介于操作系统内核与用户之间的一个绝缘层。准确地说，它也是能力很强的计算机语言，被称为解释性语言或脚本语言。它可以通过将<strong>系统调用、公共程序、工具和编译过的二进制程序</strong>“粘合”在一起来建立应用，这是大多数脚本语言的共同特征，所以有时候脚本语言又叫做“胶水语言”</p>","more":"<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><p><code>&gt;</code> 这个符号是重定向,执行以下代码，就会在当前目录下生成一个my.txt。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"> echo &quot;Hello World&quot; &gt; my.txt</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"小案例\"><a href=\"#小案例\" class=\"headerlink\" title=\"小案例\"></a>小案例</h3><p>如何利用bash将某文件的内容清楚而保留文件？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一个变量</span><br><span class=\"line\">LOG_DIR=/var/log</span><br><span class=\"line\"></span><br><span class=\"line\">cd $LOG_DIR</span><br><span class=\"line\"></span><br><span class=\"line\">cat /dev/null &gt; messages</span><br><span class=\"line\">cat /dev/null &gt; wtmp</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;Logs cleaned up.&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure></p>\n<p>注：<br><code>/dev/null</code> 这个东西可以理解为一个黑洞，里面是空的，将这个空文件写入某个文件，里面的内容就被删了。</p>\n<h2 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>行首以<code>#</code>开头(除<code>#!</code>之外)的是注释。<code>#!</code>是用于指定当前脚本的解释器，我们这里为<code>bash</code>，且应该指明完整路径，所以为<code>/bin/bash</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;The # here does not begin a comment.&quot;</span><br><span class=\"line\">echo &apos;The # here does not begin a comment.&apos;</span><br><span class=\"line\">echo The \\# here does not begin a comment. # \\#是转义字符</span><br><span class=\"line\">echo The # 这里开始一个注释</span><br><span class=\"line\">echo $(( 2#101011 ))     # 数制转换（使用二进制表示），不是一个注释，双括号表示对于数字的处理</span><br><span class=\"line\"></span><br><span class=\"line\"># 欢迎来到实验楼参观学习</span><br></pre></td></tr></table></figure></p>"},{"title":"利用Swiftype建立站内搜索——hexo系列文章（二）","date":"2016-05-14T08:12:29.000Z","keywords":"Hexo,Swiftype,站内搜索","_content":">部分内容引用自[http://www.jianshu.com/p/2010ad07d960](http://www.jianshu.com/p/2010ad07d960)\n\n>原文链接：[http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/](http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/)\n作者：drunkevil\n\n## 说明\n此方法是基于jacman主题，其余主题可能稍有不同\n\n## Swiftype账号注册及搜索引擎开通\n\n* 进入[Swiftype官网](https://swiftype.com/)注册账号，并根据提示初始化搜索引擎。\n* 获得js代码，复制到jacman\\layout\\ _partial目录下的footer.ejs文件，在最后一个`</div>`标签前即可。\n<!--more-->\n## 本地操作\n1. 在jacman主题下的_config.yml文件末尾添加如下代码：\n\n\t```\n\tswift_search:\n      \tenable: true\n\t```\n\n2. 在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为：\n\n\t```\n\tlayout: search\n\ttitle: search\n\t---\n\t```\n\n3. 找到jacman\\layout\\ _partial目录下的header.ejs文件，在其中添加如下代码：\n\n\t```\n\t<% if (theme.swift_search.enable){ %>\n    <form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n    <input type=\"text\" id=\"st-search-inpu\" maxlength=\"20\" placeholder=\"搜索\" />\n    </form>\n\t<% }\n\t```\n4. 将jacman\\layout\\ _partial目录下的search.ejs中的内容替换为如下代码（主要用来控制结果的显示样式，可根据个人爱好修改）：\n\n\t```\n\t<% if(theme.swift_search.enable) { %>\n    <div  id=\"container\" class=\"page\">\n      <div id=\"st-results-container\" style=\"width:70%; margin:1.5em auto\">正在加载搜索结果，请稍等。</div>\n\t<style>\n\t.st-result-text {\n\tbackground: #fafafa;\n\tdisplay: block;\n\tborder-left: 0.5em solid #ccc;\n\t-webkit-transition: border-left 0.45s;\n\t-moz-transition: border-left 0.45s;\n\t-o-transition: border-left 0.45s;\n\t-ms-transition: border-left 0.45s;\n\ttransition: border-left 0.45s;\n\tpadding: 0.5em;\n\t}\n\t@media only screen and (min-width: 768px) {\n\t.st-result-text {\n\tpadding: 1em;\n      }\n\t}\n\t.st-result-text:hover {\n      border-left: 0.5em solid #ea6753;\n    }\n\t.st-result-text h3 a{\n      color: #2ca6cb;\n      line-height: 1.5;\n      font-size: 22px;\n    }\n\t.st-snippet em {\n      font-weight: bold;\n      color: #ea6753;\n    }\n\t</style>\n\t<% } %>\n\t```\n\n## 完成\n\n至此，配置完成，hexo d -g重新部署一下即可出现站内搜索功能。搜索框的样式可根据个人爱好在CSS文件中修改。\n\n麻雀虽小，五脏俱全，博客的基础功能基本上都已实现。\n\n\n","source":"_posts/Hexo利用Swiftype建立站内搜索.md","raw":"---\ntitle: 利用Swiftype建立站内搜索——hexo系列文章（二）\ndate: 2016-05-14 16:12:29\ntags: [Hexo,Swiftype,站内搜索]\ncategories: 博客\nkeywords: Hexo,Swiftype,站内搜索\n---\n>部分内容引用自[http://www.jianshu.com/p/2010ad07d960](http://www.jianshu.com/p/2010ad07d960)\n\n>原文链接：[http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/](http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/)\n作者：drunkevil\n\n## 说明\n此方法是基于jacman主题，其余主题可能稍有不同\n\n## Swiftype账号注册及搜索引擎开通\n\n* 进入[Swiftype官网](https://swiftype.com/)注册账号，并根据提示初始化搜索引擎。\n* 获得js代码，复制到jacman\\layout\\ _partial目录下的footer.ejs文件，在最后一个`</div>`标签前即可。\n<!--more-->\n## 本地操作\n1. 在jacman主题下的_config.yml文件末尾添加如下代码：\n\n\t```\n\tswift_search:\n      \tenable: true\n\t```\n\n2. 在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为：\n\n\t```\n\tlayout: search\n\ttitle: search\n\t---\n\t```\n\n3. 找到jacman\\layout\\ _partial目录下的header.ejs文件，在其中添加如下代码：\n\n\t```\n\t<% if (theme.swift_search.enable){ %>\n    <form class=\"search\" action=\"<%- config.root %>search/index.html\" method=\"get\" accept-charset=\"utf-8\">\n    <input type=\"text\" id=\"st-search-inpu\" maxlength=\"20\" placeholder=\"搜索\" />\n    </form>\n\t<% }\n\t```\n4. 将jacman\\layout\\ _partial目录下的search.ejs中的内容替换为如下代码（主要用来控制结果的显示样式，可根据个人爱好修改）：\n\n\t```\n\t<% if(theme.swift_search.enable) { %>\n    <div  id=\"container\" class=\"page\">\n      <div id=\"st-results-container\" style=\"width:70%; margin:1.5em auto\">正在加载搜索结果，请稍等。</div>\n\t<style>\n\t.st-result-text {\n\tbackground: #fafafa;\n\tdisplay: block;\n\tborder-left: 0.5em solid #ccc;\n\t-webkit-transition: border-left 0.45s;\n\t-moz-transition: border-left 0.45s;\n\t-o-transition: border-left 0.45s;\n\t-ms-transition: border-left 0.45s;\n\ttransition: border-left 0.45s;\n\tpadding: 0.5em;\n\t}\n\t@media only screen and (min-width: 768px) {\n\t.st-result-text {\n\tpadding: 1em;\n      }\n\t}\n\t.st-result-text:hover {\n      border-left: 0.5em solid #ea6753;\n    }\n\t.st-result-text h3 a{\n      color: #2ca6cb;\n      line-height: 1.5;\n      font-size: 22px;\n    }\n\t.st-snippet em {\n      font-weight: bold;\n      color: #ea6753;\n    }\n\t</style>\n\t<% } %>\n\t```\n\n## 完成\n\n至此，配置完成，hexo d -g重新部署一下即可出现站内搜索功能。搜索框的样式可根据个人爱好在CSS文件中修改。\n\n麻雀虽小，五脏俱全，博客的基础功能基本上都已实现。\n\n\n","slug":"Hexo利用Swiftype建立站内搜索","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu58y0002jcm1bzbkswuu","content":"<blockquote>\n<p>部分内容引用自<a href=\"http://www.jianshu.com/p/2010ad07d960\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2010ad07d960</a></p>\n</blockquote>\n<blockquote>\n<p>原文链接：<a href=\"http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/\" target=\"_blank\" rel=\"noopener\">http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/</a><br>作者：drunkevil</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>此方法是基于jacman主题，其余主题可能稍有不同</p>\n<h2 id=\"Swiftype账号注册及搜索引擎开通\"><a href=\"#Swiftype账号注册及搜索引擎开通\" class=\"headerlink\" title=\"Swiftype账号注册及搜索引擎开通\"></a>Swiftype账号注册及搜索引擎开通</h2><ul>\n<li>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">Swiftype官网</a>注册账号，并根据提示初始化搜索引擎。</li>\n<li>获得js代码，复制到jacman\\layout\\ _partial目录下的footer.ejs文件，在最后一个<code>&lt;/div&gt;</code>标签前即可。<a id=\"more\"></a>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2></li>\n</ul>\n<ol>\n<li><p>在jacman主题下的_config.yml文件末尾添加如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift_search:</span><br><span class=\"line\">     \tenable: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: search</span><br><span class=\"line\">title: search</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到jacman\\layout\\ _partial目录下的header.ejs文件，在其中添加如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.swift_search.enable)&#123; %&gt;</span><br><span class=\"line\">   &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">   &lt;input type=&quot;text&quot; id=&quot;st-search-inpu&quot; maxlength=&quot;20&quot; placeholder=&quot;搜索&quot; /&gt;</span><br><span class=\"line\">   &lt;/form&gt;</span><br><span class=\"line\">&lt;% &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将jacman\\layout\\ _partial目录下的search.ejs中的内容替换为如下代码（主要用来控制结果的显示样式，可根据个人爱好修改）：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.swift_search.enable) &#123; %&gt;</span><br><span class=\"line\">   &lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;</span><br><span class=\"line\">     &lt;div id=&quot;st-results-container&quot; style=&quot;width:70%; margin:1.5em auto&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.st-result-text &#123;</span><br><span class=\"line\">background: #fafafa;</span><br><span class=\"line\">display: block;</span><br><span class=\"line\">border-left: 0.5em solid #ccc;</span><br><span class=\"line\">-webkit-transition: border-left 0.45s;</span><br><span class=\"line\">-moz-transition: border-left 0.45s;</span><br><span class=\"line\">-o-transition: border-left 0.45s;</span><br><span class=\"line\">-ms-transition: border-left 0.45s;</span><br><span class=\"line\">transition: border-left 0.45s;</span><br><span class=\"line\">padding: 0.5em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media only screen and (min-width: 768px) &#123;</span><br><span class=\"line\">.st-result-text &#123;</span><br><span class=\"line\">padding: 1em;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.st-result-text:hover &#123;</span><br><span class=\"line\">     border-left: 0.5em solid #ea6753;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">.st-result-text h3 a&#123;</span><br><span class=\"line\">     color: #2ca6cb;</span><br><span class=\"line\">     line-height: 1.5;</span><br><span class=\"line\">     font-size: 22px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">.st-snippet em &#123;</span><br><span class=\"line\">     font-weight: bold;</span><br><span class=\"line\">     color: #ea6753;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>至此，配置完成，hexo d -g重新部署一下即可出现站内搜索功能。搜索框的样式可根据个人爱好在CSS文件中修改。</p>\n<p>麻雀虽小，五脏俱全，博客的基础功能基本上都已实现。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<blockquote>\n<p>部分内容引用自<a href=\"http://www.jianshu.com/p/2010ad07d960\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/2010ad07d960</a></p>\n</blockquote>\n<blockquote>\n<p>原文链接：<a href=\"http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/\" target=\"_blank\" rel=\"noopener\">http://drunkevil.com/2015/04/08/swiftype-search-engine-for-hexo/</a><br>作者：drunkevil</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>此方法是基于jacman主题，其余主题可能稍有不同</p>\n<h2 id=\"Swiftype账号注册及搜索引擎开通\"><a href=\"#Swiftype账号注册及搜索引擎开通\" class=\"headerlink\" title=\"Swiftype账号注册及搜索引擎开通\"></a>Swiftype账号注册及搜索引擎开通</h2><ul>\n<li>进入<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">Swiftype官网</a>注册账号，并根据提示初始化搜索引擎。</li>\n<li>获得js代码，复制到jacman\\layout\\ _partial目录下的footer.ejs文件，在最后一个<code>&lt;/div&gt;</code>标签前即可。","more":"<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2></li>\n</ul>\n<ol>\n<li><p>在jacman主题下的_config.yml文件末尾添加如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swift_search:</span><br><span class=\"line\">     \tenable: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在hexo的source目录下建立一个search文件夹，并在其中新建一个index.md文件，其内容为：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layout: search</span><br><span class=\"line\">title: search</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到jacman\\layout\\ _partial目录下的header.ejs文件，在其中添加如下代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (theme.swift_search.enable)&#123; %&gt;</span><br><span class=\"line\">   &lt;form class=&quot;search&quot; action=&quot;&lt;%- config.root %&gt;search/index.html&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">   &lt;input type=&quot;text&quot; id=&quot;st-search-inpu&quot; maxlength=&quot;20&quot; placeholder=&quot;搜索&quot; /&gt;</span><br><span class=\"line\">   &lt;/form&gt;</span><br><span class=\"line\">&lt;% &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将jacman\\layout\\ _partial目录下的search.ejs中的内容替换为如下代码（主要用来控制结果的显示样式，可根据个人爱好修改）：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if(theme.swift_search.enable) &#123; %&gt;</span><br><span class=\"line\">   &lt;div  id=&quot;container&quot; class=&quot;page&quot;&gt;</span><br><span class=\"line\">     &lt;div id=&quot;st-results-container&quot; style=&quot;width:70%; margin:1.5em auto&quot;&gt;正在加载搜索结果，请稍等。&lt;/div&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.st-result-text &#123;</span><br><span class=\"line\">background: #fafafa;</span><br><span class=\"line\">display: block;</span><br><span class=\"line\">border-left: 0.5em solid #ccc;</span><br><span class=\"line\">-webkit-transition: border-left 0.45s;</span><br><span class=\"line\">-moz-transition: border-left 0.45s;</span><br><span class=\"line\">-o-transition: border-left 0.45s;</span><br><span class=\"line\">-ms-transition: border-left 0.45s;</span><br><span class=\"line\">transition: border-left 0.45s;</span><br><span class=\"line\">padding: 0.5em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media only screen and (min-width: 768px) &#123;</span><br><span class=\"line\">.st-result-text &#123;</span><br><span class=\"line\">padding: 1em;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.st-result-text:hover &#123;</span><br><span class=\"line\">     border-left: 0.5em solid #ea6753;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">.st-result-text h3 a&#123;</span><br><span class=\"line\">     color: #2ca6cb;</span><br><span class=\"line\">     line-height: 1.5;</span><br><span class=\"line\">     font-size: 22px;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">.st-snippet em &#123;</span><br><span class=\"line\">     font-weight: bold;</span><br><span class=\"line\">     color: #ea6753;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>至此，配置完成，hexo d -g重新部署一下即可出现站内搜索功能。搜索框的样式可根据个人爱好在CSS文件中修改。</p>\n<p>麻雀虽小，五脏俱全，博客的基础功能基本上都已实现。</p>"},{"title":"KeePass+KeePassHTTP+chromeIPass储存个人密码","date":"2016-05-01T10:06:12.000Z","keywords":"KeePass,KeePassHTTP,chromeIPass,Chrome","_content":"## 前言\n\n现在密码越来越多，但是为了密码安全还是不愿所有网站用同一个密码。所以就想到了用密码管理软件。尝试过1Password和Lastpass，可惜都收费。所以找到了KeePass，不仅免费，还开源。支持多平台。结合插件，可以实现在chrome上自动填写密码。\n<!--more-->\n\n>本文参考[http://devzc.com/post/465](http://devzc.com/post/465)写作而成，再次对原作者表示感谢。\n\n\n## 安装步骤\n\n1.\t首先从以下网址下载所需文件\n\t*\tKeePass主体程序:\n\thttp://keepass.info/download.html\n\n\t*\tKeePassHTTP扩展下载:\n\thttps://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true\n\t源码: https://github.com/pfn/keepasshttp/\n\n\t*\tchromeIPass:\n\tChrome应用商店搜索[chromeIPass],安装即可;\n\tchromeIPass源码: https://github.com/pfn/passifox\n2.\t依次安装以上文件。\n\t注意KeePassHTTP的配置：\n\t1.\t将KeePassHttp.plgx放在KeePass.exe同目录下,重启KeePass。并单击工具下的“KeePassHttp Options”。\n\t2.\t按照如下图配置：\n\t\t![](http://i.imgur.com/0R82YzX.png)\n\t3.\t点击Chrome上的chromeIPass图标，会出现Connect按钮,点击进去；\n\t4.\tKey_Name自己起名\n\t5.\t保存后，重新点击chromeIPass，若出现以下信息，则说明成功：\n\n\t\t\t![](http://i.imgur.com/PDcuXmf.png)\n\n\t\n","source":"_posts/KeePass.md","raw":"---\ntitle: KeePass+KeePassHTTP+chromeIPass储存个人密码\ndate: 2016-05-01 18:06:12\ncategories: 软件\ntags: [KeePass,Chrome]\nkeywords: KeePass,KeePassHTTP,chromeIPass,Chrome\n---\n## 前言\n\n现在密码越来越多，但是为了密码安全还是不愿所有网站用同一个密码。所以就想到了用密码管理软件。尝试过1Password和Lastpass，可惜都收费。所以找到了KeePass，不仅免费，还开源。支持多平台。结合插件，可以实现在chrome上自动填写密码。\n<!--more-->\n\n>本文参考[http://devzc.com/post/465](http://devzc.com/post/465)写作而成，再次对原作者表示感谢。\n\n\n## 安装步骤\n\n1.\t首先从以下网址下载所需文件\n\t*\tKeePass主体程序:\n\thttp://keepass.info/download.html\n\n\t*\tKeePassHTTP扩展下载:\n\thttps://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true\n\t源码: https://github.com/pfn/keepasshttp/\n\n\t*\tchromeIPass:\n\tChrome应用商店搜索[chromeIPass],安装即可;\n\tchromeIPass源码: https://github.com/pfn/passifox\n2.\t依次安装以上文件。\n\t注意KeePassHTTP的配置：\n\t1.\t将KeePassHttp.plgx放在KeePass.exe同目录下,重启KeePass。并单击工具下的“KeePassHttp Options”。\n\t2.\t按照如下图配置：\n\t\t![](http://i.imgur.com/0R82YzX.png)\n\t3.\t点击Chrome上的chromeIPass图标，会出现Connect按钮,点击进去；\n\t4.\tKey_Name自己起名\n\t5.\t保存后，重新点击chromeIPass，若出现以下信息，则说明成功：\n\n\t\t\t![](http://i.imgur.com/PDcuXmf.png)\n\n\t\n","slug":"KeePass","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu5930006jcm1t1m9sda3","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>现在密码越来越多，但是为了密码安全还是不愿所有网站用同一个密码。所以就想到了用密码管理软件。尝试过1Password和Lastpass，可惜都收费。所以找到了KeePass，不仅免费，还开源。支持多平台。结合插件，可以实现在chrome上自动填写密码。<br><a id=\"more\"></a></p>\n<blockquote>\n<p>本文参考<a href=\"http://devzc.com/post/465\" target=\"_blank\" rel=\"noopener\">http://devzc.com/post/465</a>写作而成，再次对原作者表示感谢。</p>\n</blockquote>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li><p>首先从以下网址下载所需文件</p>\n<ul>\n<li><p>KeePass主体程序:<br><a href=\"http://keepass.info/download.html\" target=\"_blank\" rel=\"noopener\">http://keepass.info/download.html</a></p>\n</li>\n<li><p>KeePassHTTP扩展下载:<br><a href=\"https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true\" target=\"_blank\" rel=\"noopener\">https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true</a><br>源码: <a href=\"https://github.com/pfn/keepasshttp/\" target=\"_blank\" rel=\"noopener\">https://github.com/pfn/keepasshttp/</a></p>\n</li>\n<li><p>chromeIPass:<br>Chrome应用商店搜索[chromeIPass],安装即可;<br>chromeIPass源码: <a href=\"https://github.com/pfn/passifox\" target=\"_blank\" rel=\"noopener\">https://github.com/pfn/passifox</a></p>\n</li>\n</ul>\n</li>\n<li><p>依次安装以上文件。<br>注意KeePassHTTP的配置：</p>\n<ol>\n<li>将KeePassHttp.plgx放在KeePass.exe同目录下,重启KeePass。并单击工具下的“KeePassHttp Options”。</li>\n<li>按照如下图配置：<br><img src=\"http://i.imgur.com/0R82YzX.png\" alt=\"\"></li>\n<li>点击Chrome上的chromeIPass图标，会出现Connect按钮,点击进去；</li>\n<li>Key_Name自己起名</li>\n<li><p>保存后，重新点击chromeIPass，若出现以下信息，则说明成功：</p>\n<p><img src=\"http://i.imgur.com/PDcuXmf.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>现在密码越来越多，但是为了密码安全还是不愿所有网站用同一个密码。所以就想到了用密码管理软件。尝试过1Password和Lastpass，可惜都收费。所以找到了KeePass，不仅免费，还开源。支持多平台。结合插件，可以实现在chrome上自动填写密码。<br>","more":"</p>\n<blockquote>\n<p>本文参考<a href=\"http://devzc.com/post/465\" target=\"_blank\" rel=\"noopener\">http://devzc.com/post/465</a>写作而成，再次对原作者表示感谢。</p>\n</blockquote>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><ol>\n<li><p>首先从以下网址下载所需文件</p>\n<ul>\n<li><p>KeePass主体程序:<br><a href=\"http://keepass.info/download.html\" target=\"_blank\" rel=\"noopener\">http://keepass.info/download.html</a></p>\n</li>\n<li><p>KeePassHTTP扩展下载:<br><a href=\"https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true\" target=\"_blank\" rel=\"noopener\">https://github.com/pfn/keepasshttp/blob/master/KeePassHttp.plgx?raw=true</a><br>源码: <a href=\"https://github.com/pfn/keepasshttp/\" target=\"_blank\" rel=\"noopener\">https://github.com/pfn/keepasshttp/</a></p>\n</li>\n<li><p>chromeIPass:<br>Chrome应用商店搜索[chromeIPass],安装即可;<br>chromeIPass源码: <a href=\"https://github.com/pfn/passifox\" target=\"_blank\" rel=\"noopener\">https://github.com/pfn/passifox</a></p>\n</li>\n</ul>\n</li>\n<li><p>依次安装以上文件。<br>注意KeePassHTTP的配置：</p>\n<ol>\n<li>将KeePassHttp.plgx放在KeePass.exe同目录下,重启KeePass。并单击工具下的“KeePassHttp Options”。</li>\n<li>按照如下图配置：<br><img src=\"http://i.imgur.com/0R82YzX.png\" alt=\"\"></li>\n<li>点击Chrome上的chromeIPass图标，会出现Connect按钮,点击进去；</li>\n<li>Key_Name自己起名</li>\n<li><p>保存后，重新点击chromeIPass，若出现以下信息，则说明成功：</p>\n<p><img src=\"http://i.imgur.com/PDcuXmf.png\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"Leanote安装教程","date":"2017-05-07T14:47:13.000Z","_content":"> 此教程参考官方教程[Leanote安装教程](https://github.com/leanote/leanote/wiki/leanote%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%89%88%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B)而成，只是做了一点修改。\n\n## 下载Leanote\n\n此处我下载的是二进制版，假设下载到`/home/wwwroot/blog.heleou.com/web/`下，那么下载后解压，命令如下：\n```\ntar -xzvf leanote-*.tar.gz\n```\n\n<!--more-->\n\n## 安装数据库-mongodb\n\n到 http://www.mongodb.org/downloads 去下载\n\n64位linux mongodb2.6.4下载链接: http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download\n64位linux mongodb 3.0.1下载链接: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\n\n我下载的是3.0.1版，这两个版本的拷贝数据库操作不太一样，到后面的时候需要稍微注意一下。\n\n还是直接解压\n```\ntar -xzvf mongodb-linux-x86_64-3.0.1.tgz/\n```\n\n为了快速使用mongodb的命令, 可以配置环境变量,\n\n编辑`/etc/profile` 将mongodb bin路径加入即可.（写到文件最后即可）\n```\nvim /etc/profile\nexport PATH=$PATH:/home/wwwroot/blog.heleou.com/web/mongodb/bin\nsource /etc/profile\n```\n\n## 简单使用mongoDB\n\n先在/home/wwwroot/blog.heleou.com/web下新建一个目录data存放mongodb数据\n\n开启mongodb\n```\nmongod --dbpath /home/wwwroot/blog.heleou.com/web/data\n```\n\n附：后台开启命令：\n```\nmongod --fork --dbpath /home/wwwroot/blog.heleou.com/web/data --logpath /home/wwwroot/blog.heleou.com/web/logpath1/mongodb.log\n```\n`--logpath`是日志路径，自己设置即可。\n\n这时mongod已经启动了\n\n重新打开一个终端, 使用下mongodb\n\n```\n> mongo\n> show dbs\n```\nmongodb安装到此为止, 下面为mongodb导入数据leanote初始数据\n\n## 导入初始数据\n\nv3的导入命令\n```\nmongorestore -h localhost -d leanote --dir /home/wwwroot/blog.heleou.com/web/leanote/mongodb_backup/leanote_install_data/\n\n```\n\n## 配置leanote\n\n```\nvim conf/app.conf\n```\n\n这里要做的有两件事，一个是修个URL，一个是修改安全信息。\n1. 修改网址：\n```\nhttp.port=80\nsite.url=http://blog.heleou.com\n```\n\n当然你还需要将a.com绑定ip到Leanote服务器.\n\n如果服务器上已有其它程序运行了80端口, 怎么办呢? 请google或百度下 \"使用nginx分发请求到不同端口\".\n\n## 运行leanote\n\n注意 在此之前请确保mongodb已在运行!\n\n新开一个窗口, 运行:\n\n```\ncd /home/wwwroot/blog.heleou.com/web/leanote/bin\nbash run.sh (或 sh run.sh)\n# 最后出现以下信息证明运行成功\n...\nTRACE 2013/06/06 15:01:27 watcher.go:72: Watching: /home/life/leanote/bin/src/github.com/leanote/leanote/conf/routes\nGo to /@tests to run the tests.\nListening on :80...\n```\n\n附：后台运行方法\n\n此时按`Crtl + z`暂停进程，然后敲入`bg`命令即可，退出终端还可继续运行。","source":"_posts/Leanote安装教程.md","raw":"---\ntitle: Leanote安装教程\ndate: 2017-05-07 22:47:13\ntags:\n  - leanote\n  - VPS\n  - web\ncategories: web\n---\n> 此教程参考官方教程[Leanote安装教程](https://github.com/leanote/leanote/wiki/leanote%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%89%88%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B)而成，只是做了一点修改。\n\n## 下载Leanote\n\n此处我下载的是二进制版，假设下载到`/home/wwwroot/blog.heleou.com/web/`下，那么下载后解压，命令如下：\n```\ntar -xzvf leanote-*.tar.gz\n```\n\n<!--more-->\n\n## 安装数据库-mongodb\n\n到 http://www.mongodb.org/downloads 去下载\n\n64位linux mongodb2.6.4下载链接: http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download\n64位linux mongodb 3.0.1下载链接: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\n\n我下载的是3.0.1版，这两个版本的拷贝数据库操作不太一样，到后面的时候需要稍微注意一下。\n\n还是直接解压\n```\ntar -xzvf mongodb-linux-x86_64-3.0.1.tgz/\n```\n\n为了快速使用mongodb的命令, 可以配置环境变量,\n\n编辑`/etc/profile` 将mongodb bin路径加入即可.（写到文件最后即可）\n```\nvim /etc/profile\nexport PATH=$PATH:/home/wwwroot/blog.heleou.com/web/mongodb/bin\nsource /etc/profile\n```\n\n## 简单使用mongoDB\n\n先在/home/wwwroot/blog.heleou.com/web下新建一个目录data存放mongodb数据\n\n开启mongodb\n```\nmongod --dbpath /home/wwwroot/blog.heleou.com/web/data\n```\n\n附：后台开启命令：\n```\nmongod --fork --dbpath /home/wwwroot/blog.heleou.com/web/data --logpath /home/wwwroot/blog.heleou.com/web/logpath1/mongodb.log\n```\n`--logpath`是日志路径，自己设置即可。\n\n这时mongod已经启动了\n\n重新打开一个终端, 使用下mongodb\n\n```\n> mongo\n> show dbs\n```\nmongodb安装到此为止, 下面为mongodb导入数据leanote初始数据\n\n## 导入初始数据\n\nv3的导入命令\n```\nmongorestore -h localhost -d leanote --dir /home/wwwroot/blog.heleou.com/web/leanote/mongodb_backup/leanote_install_data/\n\n```\n\n## 配置leanote\n\n```\nvim conf/app.conf\n```\n\n这里要做的有两件事，一个是修个URL，一个是修改安全信息。\n1. 修改网址：\n```\nhttp.port=80\nsite.url=http://blog.heleou.com\n```\n\n当然你还需要将a.com绑定ip到Leanote服务器.\n\n如果服务器上已有其它程序运行了80端口, 怎么办呢? 请google或百度下 \"使用nginx分发请求到不同端口\".\n\n## 运行leanote\n\n注意 在此之前请确保mongodb已在运行!\n\n新开一个窗口, 运行:\n\n```\ncd /home/wwwroot/blog.heleou.com/web/leanote/bin\nbash run.sh (或 sh run.sh)\n# 最后出现以下信息证明运行成功\n...\nTRACE 2013/06/06 15:01:27 watcher.go:72: Watching: /home/life/leanote/bin/src/github.com/leanote/leanote/conf/routes\nGo to /@tests to run the tests.\nListening on :80...\n```\n\n附：后台运行方法\n\n此时按`Crtl + z`暂停进程，然后敲入`bg`命令即可，退出终端还可继续运行。","slug":"Leanote安装教程","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu5950008jcm1jaiod4x3","content":"<blockquote>\n<p>此教程参考官方教程<a href=\"https://github.com/leanote/leanote/wiki/leanote%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%89%88%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">Leanote安装教程</a>而成，只是做了一点修改。</p>\n</blockquote>\n<h2 id=\"下载Leanote\"><a href=\"#下载Leanote\" class=\"headerlink\" title=\"下载Leanote\"></a>下载Leanote</h2><p>此处我下载的是二进制版，假设下载到<code>/home/wwwroot/blog.heleou.com/web/</code>下，那么下载后解压，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf leanote-*.tar.gz</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"安装数据库-mongodb\"><a href=\"#安装数据库-mongodb\" class=\"headerlink\" title=\"安装数据库-mongodb\"></a>安装数据库-mongodb</h2><p>到 <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">http://www.mongodb.org/downloads</a> 去下载</p>\n<p>64位linux mongodb2.6.4下载链接: <a href=\"http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download\" target=\"_blank\" rel=\"noopener\">http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download</a><br>64位linux mongodb 3.0.1下载链接: <a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</a></p>\n<p>我下载的是3.0.1版，这两个版本的拷贝数据库操作不太一样，到后面的时候需要稍微注意一下。</p>\n<p>还是直接解压<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz/</span><br></pre></td></tr></table></figure></p>\n<p>为了快速使用mongodb的命令, 可以配置环境变量,</p>\n<p>编辑<code>/etc/profile</code> 将mongodb bin路径加入即可.（写到文件最后即可）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export PATH=$PATH:/home/wwwroot/blog.heleou.com/web/mongodb/bin</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"简单使用mongoDB\"><a href=\"#简单使用mongoDB\" class=\"headerlink\" title=\"简单使用mongoDB\"></a>简单使用mongoDB</h2><p>先在/home/wwwroot/blog.heleou.com/web下新建一个目录data存放mongodb数据</p>\n<p>开启mongodb<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath /home/wwwroot/blog.heleou.com/web/data</span><br></pre></td></tr></table></figure></p>\n<p>附：后台开启命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --fork --dbpath /home/wwwroot/blog.heleou.com/web/data --logpath /home/wwwroot/blog.heleou.com/web/logpath1/mongodb.log</span><br></pre></td></tr></table></figure></p>\n<p><code>--logpath</code>是日志路径，自己设置即可。</p>\n<p>这时mongod已经启动了</p>\n<p>重新打开一个终端, 使用下mongodb</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongo</span><br><span class=\"line\">&gt; show dbs</span><br></pre></td></tr></table></figure>\n<p>mongodb安装到此为止, 下面为mongodb导入数据leanote初始数据</p>\n<h2 id=\"导入初始数据\"><a href=\"#导入初始数据\" class=\"headerlink\" title=\"导入初始数据\"></a>导入初始数据</h2><p>v3的导入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -h localhost -d leanote --dir /home/wwwroot/blog.heleou.com/web/leanote/mongodb_backup/leanote_install_data/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置leanote\"><a href=\"#配置leanote\" class=\"headerlink\" title=\"配置leanote\"></a>配置leanote</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/app.conf</span><br></pre></td></tr></table></figure>\n<p>这里要做的有两件事，一个是修个URL，一个是修改安全信息。</p>\n<ol>\n<li>修改网址：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.port=80</span><br><span class=\"line\">site.url=http://blog.heleou.com</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当然你还需要将a.com绑定ip到Leanote服务器.</p>\n<p>如果服务器上已有其它程序运行了80端口, 怎么办呢? 请google或百度下 “使用nginx分发请求到不同端口”.</p>\n<h2 id=\"运行leanote\"><a href=\"#运行leanote\" class=\"headerlink\" title=\"运行leanote\"></a>运行leanote</h2><p>注意 在此之前请确保mongodb已在运行!</p>\n<p>新开一个窗口, 运行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/wwwroot/blog.heleou.com/web/leanote/bin</span><br><span class=\"line\">bash run.sh (或 sh run.sh)</span><br><span class=\"line\"># 最后出现以下信息证明运行成功</span><br><span class=\"line\">...</span><br><span class=\"line\">TRACE 2013/06/06 15:01:27 watcher.go:72: Watching: /home/life/leanote/bin/src/github.com/leanote/leanote/conf/routes</span><br><span class=\"line\">Go to /@tests to run the tests.</span><br><span class=\"line\">Listening on :80...</span><br></pre></td></tr></table></figure>\n<p>附：后台运行方法</p>\n<p>此时按<code>Crtl + z</code>暂停进程，然后敲入<code>bg</code>命令即可，退出终端还可继续运行。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<blockquote>\n<p>此教程参考官方教程<a href=\"https://github.com/leanote/leanote/wiki/leanote%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%89%88%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">Leanote安装教程</a>而成，只是做了一点修改。</p>\n</blockquote>\n<h2 id=\"下载Leanote\"><a href=\"#下载Leanote\" class=\"headerlink\" title=\"下载Leanote\"></a>下载Leanote</h2><p>此处我下载的是二进制版，假设下载到<code>/home/wwwroot/blog.heleou.com/web/</code>下，那么下载后解压，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf leanote-*.tar.gz</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"安装数据库-mongodb\"><a href=\"#安装数据库-mongodb\" class=\"headerlink\" title=\"安装数据库-mongodb\"></a>安装数据库-mongodb</h2><p>到 <a href=\"http://www.mongodb.org/downloads\" target=\"_blank\" rel=\"noopener\">http://www.mongodb.org/downloads</a> 去下载</p>\n<p>64位linux mongodb2.6.4下载链接: <a href=\"http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download\" target=\"_blank\" rel=\"noopener\">http://www.mongodb.org/dr//fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz/download</a><br>64位linux mongodb 3.0.1下载链接: <a href=\"https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\" target=\"_blank\" rel=\"noopener\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</a></p>\n<p>我下载的是3.0.1版，这两个版本的拷贝数据库操作不太一样，到后面的时候需要稍微注意一下。</p>\n<p>还是直接解压<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz/</span><br></pre></td></tr></table></figure></p>\n<p>为了快速使用mongodb的命令, 可以配置环境变量,</p>\n<p>编辑<code>/etc/profile</code> 将mongodb bin路径加入即可.（写到文件最后即可）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">export PATH=$PATH:/home/wwwroot/blog.heleou.com/web/mongodb/bin</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"简单使用mongoDB\"><a href=\"#简单使用mongoDB\" class=\"headerlink\" title=\"简单使用mongoDB\"></a>简单使用mongoDB</h2><p>先在/home/wwwroot/blog.heleou.com/web下新建一个目录data存放mongodb数据</p>\n<p>开启mongodb<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath /home/wwwroot/blog.heleou.com/web/data</span><br></pre></td></tr></table></figure></p>\n<p>附：后台开启命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --fork --dbpath /home/wwwroot/blog.heleou.com/web/data --logpath /home/wwwroot/blog.heleou.com/web/logpath1/mongodb.log</span><br></pre></td></tr></table></figure></p>\n<p><code>--logpath</code>是日志路径，自己设置即可。</p>\n<p>这时mongod已经启动了</p>\n<p>重新打开一个终端, 使用下mongodb</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; mongo</span><br><span class=\"line\">&gt; show dbs</span><br></pre></td></tr></table></figure>\n<p>mongodb安装到此为止, 下面为mongodb导入数据leanote初始数据</p>\n<h2 id=\"导入初始数据\"><a href=\"#导入初始数据\" class=\"headerlink\" title=\"导入初始数据\"></a>导入初始数据</h2><p>v3的导入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongorestore -h localhost -d leanote --dir /home/wwwroot/blog.heleou.com/web/leanote/mongodb_backup/leanote_install_data/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置leanote\"><a href=\"#配置leanote\" class=\"headerlink\" title=\"配置leanote\"></a>配置leanote</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim conf/app.conf</span><br></pre></td></tr></table></figure>\n<p>这里要做的有两件事，一个是修个URL，一个是修改安全信息。</p>\n<ol>\n<li>修改网址：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.port=80</span><br><span class=\"line\">site.url=http://blog.heleou.com</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当然你还需要将a.com绑定ip到Leanote服务器.</p>\n<p>如果服务器上已有其它程序运行了80端口, 怎么办呢? 请google或百度下 “使用nginx分发请求到不同端口”.</p>\n<h2 id=\"运行leanote\"><a href=\"#运行leanote\" class=\"headerlink\" title=\"运行leanote\"></a>运行leanote</h2><p>注意 在此之前请确保mongodb已在运行!</p>\n<p>新开一个窗口, 运行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/wwwroot/blog.heleou.com/web/leanote/bin</span><br><span class=\"line\">bash run.sh (或 sh run.sh)</span><br><span class=\"line\"># 最后出现以下信息证明运行成功</span><br><span class=\"line\">...</span><br><span class=\"line\">TRACE 2013/06/06 15:01:27 watcher.go:72: Watching: /home/life/leanote/bin/src/github.com/leanote/leanote/conf/routes</span><br><span class=\"line\">Go to /@tests to run the tests.</span><br><span class=\"line\">Listening on :80...</span><br></pre></td></tr></table></figure>\n<p>附：后台运行方法</p>\n<p>此时按<code>Crtl + z</code>暂停进程，然后敲入<code>bg</code>命令即可，退出终端还可继续运行。</p>"},{"title":"OS X 10.14å 怎么安装非AppStore的Safari扩展","date":"2018-11-28T02:07:54.000Z","keywords":"OSX, Safari, 浏览器扩展, safari扩展, safariextz","_content":"## OS X 10.14 怎么安装非AppStore的Safari扩展\n\n### 前言\n自从苹果更新系统后，很多人发现无法通过双击`.safariextz`文件来安装safari扩展了。所有的扩展都要通过AppStore来安装，所以找到一个可以通过safariextz文件来安装的方法就很重要了。\n\n### 安装步骤\n> 此处以safari翻译扩展Polyglot为例。\n\n1. 将Polyglot.safariextz的后缀名直接改为`.zip`，也就是`Polyglot.zip`，双击解压文件会得到一个文件夹。\n2. 如果在第一步中没有得到文件夹，相反是一个文件的话。尝试将文件后缀改为`.xar`也就是`Polyglot.xar`再进行解压一般就可以了。\n3. 打开safari浏览器，在设置中显示“开发”菜单。\n4. 在开发菜单中选择，“打开扩展构建器”。\n5. 进入以后点击+号将刚刚解压的文件夹导入就可以了。","source":"_posts/OS-X-10.14-怎么安装非AppStore的Safari扩展.md","raw":"---\ntitle: OS X 10.14å 怎么安装非AppStore的Safari扩展\ndate: 2018-11-28 10:07:54\ncategories: 浏览器\ntags:\n  - Safari\nkeywords: OSX, Safari, 浏览器扩展, safari扩展, safariextz\n---\n## OS X 10.14 怎么安装非AppStore的Safari扩展\n\n### 前言\n自从苹果更新系统后，很多人发现无法通过双击`.safariextz`文件来安装safari扩展了。所有的扩展都要通过AppStore来安装，所以找到一个可以通过safariextz文件来安装的方法就很重要了。\n\n### 安装步骤\n> 此处以safari翻译扩展Polyglot为例。\n\n1. 将Polyglot.safariextz的后缀名直接改为`.zip`，也就是`Polyglot.zip`，双击解压文件会得到一个文件夹。\n2. 如果在第一步中没有得到文件夹，相反是一个文件的话。尝试将文件后缀改为`.xar`也就是`Polyglot.xar`再进行解压一般就可以了。\n3. 打开safari浏览器，在设置中显示“开发”菜单。\n4. 在开发菜单中选择，“打开扩展构建器”。\n5. 进入以后点击+号将刚刚解压的文件夹导入就可以了。","slug":"OS-X-10.14-怎么安装非AppStore的Safari扩展","published":1,"updated":"2018-11-30T02:15:56.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu597000ajcm1k82e2zxv","content":"<h2 id=\"OS-X-10-14-怎么安装非AppStore的Safari扩展\"><a href=\"#OS-X-10-14-怎么安装非AppStore的Safari扩展\" class=\"headerlink\" title=\"OS X 10.14 怎么安装非AppStore的Safari扩展\"></a>OS X 10.14 怎么安装非AppStore的Safari扩展</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>自从苹果更新系统后，很多人发现无法通过双击<code>.safariextz</code>文件来安装safari扩展了。所有的扩展都要通过AppStore来安装，所以找到一个可以通过safariextz文件来安装的方法就很重要了。</p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><blockquote>\n<p>此处以safari翻译扩展Polyglot为例。</p>\n</blockquote>\n<ol>\n<li>将Polyglot.safariextz的后缀名直接改为<code>.zip</code>，也就是<code>Polyglot.zip</code>，双击解压文件会得到一个文件夹。</li>\n<li>如果在第一步中没有得到文件夹，相反是一个文件的话。尝试将文件后缀改为<code>.xar</code>也就是<code>Polyglot.xar</code>再进行解压一般就可以了。</li>\n<li>打开safari浏览器，在设置中显示“开发”菜单。</li>\n<li>在开发菜单中选择，“打开扩展构建器”。</li>\n<li>进入以后点击+号将刚刚解压的文件夹导入就可以了。</li>\n</ol>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"OS-X-10-14-怎么安装非AppStore的Safari扩展\"><a href=\"#OS-X-10-14-怎么安装非AppStore的Safari扩展\" class=\"headerlink\" title=\"OS X 10.14 怎么安装非AppStore的Safari扩展\"></a>OS X 10.14 怎么安装非AppStore的Safari扩展</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>自从苹果更新系统后，很多人发现无法通过双击<code>.safariextz</code>文件来安装safari扩展了。所有的扩展都要通过AppStore来安装，所以找到一个可以通过safariextz文件来安装的方法就很重要了。</p>\n<h3 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h3><blockquote>\n<p>此处以safari翻译扩展Polyglot为例。</p>\n</blockquote>\n<ol>\n<li>将Polyglot.safariextz的后缀名直接改为<code>.zip</code>，也就是<code>Polyglot.zip</code>，双击解压文件会得到一个文件夹。</li>\n<li>如果在第一步中没有得到文件夹，相反是一个文件的话。尝试将文件后缀改为<code>.xar</code>也就是<code>Polyglot.xar</code>再进行解压一般就可以了。</li>\n<li>打开safari浏览器，在设置中显示“开发”菜单。</li>\n<li>在开发菜单中选择，“打开扩展构建器”。</li>\n<li>进入以后点击+号将刚刚解压的文件夹导入就可以了。</li>\n</ol>\n"},{"title":"VPS+Hexo+Dropbox创建个人博客——hexo系列教程（三）","date":"2016-05-01T10:06:12.000Z","keywords":"VPS,Hexo,Dropbox","_content":">本文参考以下文章完成：\n1.[用Hexo+Vps搭建博客并用Dropbox同步自动发布](http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/)\n2.[VPS+Dropbox+markeditor打造Hexo完美体验 (长期更新)](http://www.jianshu.com/p/0839b09dc381#)\n3.[使用 Dropbox 和 VPS 实现实时部署 Hexo 博客](http://www.xmt.design/2016/04/04/blog-depoly-via-dropbox.html)\n\n废话少说，直接进入正题：\n\n## VPS\n为CentOS 6.8 x64 ,512MB内存\n\n## 安装需要的所有软件\n### 安装 Git\n```\nyum install git-core\n```\n\n<!--more-->\n### 安装NodeJS\n```\n% 前三步是先安装EPEL\n# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm \n# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\n# rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm\n% 安装node\nyum install nodejs npm --enablerepo=epel\n```\n\n### 安装Dropbox\n```\ncd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf -\n%然后，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序.\n~/.dropbox-dist/dropboxd\n%下载官方提供的 cli 来控制和管理Dropbox\nwget https://linux.dropbox.com/packages/dropbox.py\n%更改权限:\nchmod +x ./dropbox.py\n%启动Dropbox:\n./dropbox.py start y\n关闭局域网广播:\n./dropbox.py lansync n\n```\n\n### 安装Hexo\n\n```\nnpm install -g hexo-cli\ncd Dropbox\nmkdir hexo\ncd hexo\nhexo init\n```\n\n### 安装Nginx\n这里推荐不是很熟悉Nginx设置的用以下链接提供的一键安装包安装，可以只安装Nginx，自动设置\n[lnmp、lamp、lnmpa一键安装包](https://blog.linuxeye.com/31.html)\n这里设置时，可以将主机目录设置为dropbox的同步目录\n```\n/root/Dropbox/hexo/public\n```\n添加权限：\n```\nchmod -R 755 /root/Dropbox/hexo/public\nchown www:www /root/Dropbox/hexo/public\nchmod +x /root/Dropbox/ /root/Dropbox/hexo/\n```\n\n### 安装incron\n```\nyum install incron\nservice incrond start\n```\n## 同步发布\n\nincron 监测文件夹配置\n```\nincrontab -e\n```\n在其中添加：\n```\n/root/Dropbox/hexo/source/_posts/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash\n/root/Dropbox/hexo/theme/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash\n```\n\nrunhexo.bash:\n```\n#!/usr/bin/env bash\nexec 200<$0\nflock -n 200 || exit 1\nsleep 10\ncd /root/Dropbox/hexo && hexo g\n```\n添加权限\n```\nchmod +x runhexo.bash\n```\n\n","source":"_posts/VPS+Hexo+Dropbox创建个人博客.md","raw":"---\ntitle: VPS+Hexo+Dropbox创建个人博客——hexo系列教程（三）\ndate: 2016-05-01 18:06:12\ncategories: web\ntags: [Hexo,VPS,Dropbox]\nkeywords: VPS,Hexo,Dropbox\n---\n>本文参考以下文章完成：\n1.[用Hexo+Vps搭建博客并用Dropbox同步自动发布](http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/)\n2.[VPS+Dropbox+markeditor打造Hexo完美体验 (长期更新)](http://www.jianshu.com/p/0839b09dc381#)\n3.[使用 Dropbox 和 VPS 实现实时部署 Hexo 博客](http://www.xmt.design/2016/04/04/blog-depoly-via-dropbox.html)\n\n废话少说，直接进入正题：\n\n## VPS\n为CentOS 6.8 x64 ,512MB内存\n\n## 安装需要的所有软件\n### 安装 Git\n```\nyum install git-core\n```\n\n<!--more-->\n### 安装NodeJS\n```\n% 前三步是先安装EPEL\n# wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm \n# wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm\n# rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm\n% 安装node\nyum install nodejs npm --enablerepo=epel\n```\n\n### 安装Dropbox\n```\ncd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf -\n%然后，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序.\n~/.dropbox-dist/dropboxd\n%下载官方提供的 cli 来控制和管理Dropbox\nwget https://linux.dropbox.com/packages/dropbox.py\n%更改权限:\nchmod +x ./dropbox.py\n%启动Dropbox:\n./dropbox.py start y\n关闭局域网广播:\n./dropbox.py lansync n\n```\n\n### 安装Hexo\n\n```\nnpm install -g hexo-cli\ncd Dropbox\nmkdir hexo\ncd hexo\nhexo init\n```\n\n### 安装Nginx\n这里推荐不是很熟悉Nginx设置的用以下链接提供的一键安装包安装，可以只安装Nginx，自动设置\n[lnmp、lamp、lnmpa一键安装包](https://blog.linuxeye.com/31.html)\n这里设置时，可以将主机目录设置为dropbox的同步目录\n```\n/root/Dropbox/hexo/public\n```\n添加权限：\n```\nchmod -R 755 /root/Dropbox/hexo/public\nchown www:www /root/Dropbox/hexo/public\nchmod +x /root/Dropbox/ /root/Dropbox/hexo/\n```\n\n### 安装incron\n```\nyum install incron\nservice incrond start\n```\n## 同步发布\n\nincron 监测文件夹配置\n```\nincrontab -e\n```\n在其中添加：\n```\n/root/Dropbox/hexo/source/_posts/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash\n/root/Dropbox/hexo/theme/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash\n```\n\nrunhexo.bash:\n```\n#!/usr/bin/env bash\nexec 200<$0\nflock -n 200 || exit 1\nsleep 10\ncd /root/Dropbox/hexo && hexo g\n```\n添加权限\n```\nchmod +x runhexo.bash\n```\n\n","slug":"VPS+Hexo+Dropbox创建个人博客","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59b000ejcm1v7x4res8","content":"<blockquote>\n<p>本文参考以下文章完成：<br>1.<a href=\"http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/\" target=\"_blank\" rel=\"noopener\">用Hexo+Vps搭建博客并用Dropbox同步自动发布</a><br>2.<a href=\"http://www.jianshu.com/p/0839b09dc381#\" target=\"_blank\" rel=\"noopener\">VPS+Dropbox+markeditor打造Hexo完美体验 (长期更新)</a><br>3.<a href=\"http://www.xmt.design/2016/04/04/blog-depoly-via-dropbox.html\" target=\"_blank\" rel=\"noopener\">使用 Dropbox 和 VPS 实现实时部署 Hexo 博客</a></p>\n</blockquote>\n<p>废话少说，直接进入正题：</p>\n<h2 id=\"VPS\"><a href=\"#VPS\" class=\"headerlink\" title=\"VPS\"></a>VPS</h2><p>为CentOS 6.8 x64 ,512MB内存</p>\n<h2 id=\"安装需要的所有软件\"><a href=\"#安装需要的所有软件\" class=\"headerlink\" title=\"安装需要的所有软件\"></a>安装需要的所有软件</h2><h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git-core</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"安装NodeJS\"><a href=\"#安装NodeJS\" class=\"headerlink\" title=\"安装NodeJS\"></a>安装NodeJS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 前三步是先安装EPEL</span><br><span class=\"line\"># wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm </span><br><span class=\"line\"># wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span><br><span class=\"line\"># rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm</span><br><span class=\"line\">% 安装node</span><br><span class=\"line\">yum install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Dropbox\"><a href=\"#安装Dropbox\" class=\"headerlink\" title=\"安装Dropbox\"></a>安装Dropbox</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -</span><br><span class=\"line\">%然后，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序.</span><br><span class=\"line\">~/.dropbox-dist/dropboxd</span><br><span class=\"line\">%下载官方提供的 cli 来控制和管理Dropbox</span><br><span class=\"line\">wget https://linux.dropbox.com/packages/dropbox.py</span><br><span class=\"line\">%更改权限:</span><br><span class=\"line\">chmod +x ./dropbox.py</span><br><span class=\"line\">%启动Dropbox:</span><br><span class=\"line\">./dropbox.py start y</span><br><span class=\"line\">关闭局域网广播:</span><br><span class=\"line\">./dropbox.py lansync n</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">cd Dropbox</span><br><span class=\"line\">mkdir hexo</span><br><span class=\"line\">cd hexo</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><p>这里推荐不是很熟悉Nginx设置的用以下链接提供的一键安装包安装，可以只安装Nginx，自动设置<br><a href=\"https://blog.linuxeye.com/31.html\" target=\"_blank\" rel=\"noopener\">lnmp、lamp、lnmpa一键安装包</a><br>这里设置时，可以将主机目录设置为dropbox的同步目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/Dropbox/hexo/public</span><br></pre></td></tr></table></figure></p>\n<p>添加权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 755 /root/Dropbox/hexo/public</span><br><span class=\"line\">chown www:www /root/Dropbox/hexo/public</span><br><span class=\"line\">chmod +x /root/Dropbox/ /root/Dropbox/hexo/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装incron\"><a href=\"#安装incron\" class=\"headerlink\" title=\"安装incron\"></a>安装incron</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install incron</span><br><span class=\"line\">service incrond start</span><br></pre></td></tr></table></figure>\n<h2 id=\"同步发布\"><a href=\"#同步发布\" class=\"headerlink\" title=\"同步发布\"></a>同步发布</h2><p>incron 监测文件夹配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrontab -e</span><br></pre></td></tr></table></figure></p>\n<p>在其中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/Dropbox/hexo/source/_posts/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash</span><br><span class=\"line\">/root/Dropbox/hexo/theme/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash</span><br></pre></td></tr></table></figure></p>\n<p>runhexo.bash:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">exec 200&lt;$0</span><br><span class=\"line\">flock -n 200 || exit 1</span><br><span class=\"line\">sleep 10</span><br><span class=\"line\">cd /root/Dropbox/hexo &amp;&amp; hexo g</span><br></pre></td></tr></table></figure></p>\n<p>添加权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x runhexo.bash</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<blockquote>\n<p>本文参考以下文章完成：<br>1.<a href=\"http://www.fanicy.com/2014/06/01/0001.hexowithvpsdropbox/\" target=\"_blank\" rel=\"noopener\">用Hexo+Vps搭建博客并用Dropbox同步自动发布</a><br>2.<a href=\"http://www.jianshu.com/p/0839b09dc381#\" target=\"_blank\" rel=\"noopener\">VPS+Dropbox+markeditor打造Hexo完美体验 (长期更新)</a><br>3.<a href=\"http://www.xmt.design/2016/04/04/blog-depoly-via-dropbox.html\" target=\"_blank\" rel=\"noopener\">使用 Dropbox 和 VPS 实现实时部署 Hexo 博客</a></p>\n</blockquote>\n<p>废话少说，直接进入正题：</p>\n<h2 id=\"VPS\"><a href=\"#VPS\" class=\"headerlink\" title=\"VPS\"></a>VPS</h2><p>为CentOS 6.8 x64 ,512MB内存</p>\n<h2 id=\"安装需要的所有软件\"><a href=\"#安装需要的所有软件\" class=\"headerlink\" title=\"安装需要的所有软件\"></a>安装需要的所有软件</h2><h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git-core</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"安装NodeJS\"><a href=\"#安装NodeJS\" class=\"headerlink\" title=\"安装NodeJS\"></a>安装NodeJS</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">% 前三步是先安装EPEL</span><br><span class=\"line\"># wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm </span><br><span class=\"line\"># wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span><br><span class=\"line\"># rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm</span><br><span class=\"line\">% 安装node</span><br><span class=\"line\">yum install nodejs npm --enablerepo=epel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Dropbox\"><a href=\"#安装Dropbox\" class=\"headerlink\" title=\"安装Dropbox\"></a>安装Dropbox</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~ &amp;&amp; wget -O - &quot;https://www.dropbox.com/download?plat=lnx.x86_64&quot; | tar xzf -</span><br><span class=\"line\">%然后，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序.</span><br><span class=\"line\">~/.dropbox-dist/dropboxd</span><br><span class=\"line\">%下载官方提供的 cli 来控制和管理Dropbox</span><br><span class=\"line\">wget https://linux.dropbox.com/packages/dropbox.py</span><br><span class=\"line\">%更改权限:</span><br><span class=\"line\">chmod +x ./dropbox.py</span><br><span class=\"line\">%启动Dropbox:</span><br><span class=\"line\">./dropbox.py start y</span><br><span class=\"line\">关闭局域网广播:</span><br><span class=\"line\">./dropbox.py lansync n</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">cd Dropbox</span><br><span class=\"line\">mkdir hexo</span><br><span class=\"line\">cd hexo</span><br><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><p>这里推荐不是很熟悉Nginx设置的用以下链接提供的一键安装包安装，可以只安装Nginx，自动设置<br><a href=\"https://blog.linuxeye.com/31.html\" target=\"_blank\" rel=\"noopener\">lnmp、lamp、lnmpa一键安装包</a><br>这里设置时，可以将主机目录设置为dropbox的同步目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/Dropbox/hexo/public</span><br></pre></td></tr></table></figure></p>\n<p>添加权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod -R 755 /root/Dropbox/hexo/public</span><br><span class=\"line\">chown www:www /root/Dropbox/hexo/public</span><br><span class=\"line\">chmod +x /root/Dropbox/ /root/Dropbox/hexo/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装incron\"><a href=\"#安装incron\" class=\"headerlink\" title=\"安装incron\"></a>安装incron</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install incron</span><br><span class=\"line\">service incrond start</span><br></pre></td></tr></table></figure>\n<h2 id=\"同步发布\"><a href=\"#同步发布\" class=\"headerlink\" title=\"同步发布\"></a>同步发布</h2><p>incron 监测文件夹配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrontab -e</span><br></pre></td></tr></table></figure></p>\n<p>在其中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/root/Dropbox/hexo/source/_posts/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash</span><br><span class=\"line\">/root/Dropbox/hexo/theme/ IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE /root/runhexo.bash</span><br></pre></td></tr></table></figure></p>\n<p>runhexo.bash:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">exec 200&lt;$0</span><br><span class=\"line\">flock -n 200 || exit 1</span><br><span class=\"line\">sleep 10</span><br><span class=\"line\">cd /root/Dropbox/hexo &amp;&amp; hexo g</span><br></pre></td></tr></table></figure></p>\n<p>添加权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x runhexo.bash</span><br></pre></td></tr></table></figure></p>"},{"title":"VPS服务器搭建ghost blog","date":"2016-05-01T10:06:12.000Z","keywords":"VPS,ghost blog","_content":"\n####前传\n***\n&#160;&#160;无意中看到markdown语法，立马就喜欢上它，所以就想博客能不能也用这种语法写，因为我的博客原来一直用wordpress来搞，第一个想到的当然是用插件，当然也下到了，不过估计是主题css的问题，代码框老显示不出来，对于想要代码框的我来说实在是不能忍，就上网搜有没有其他的博客工具，哈哈终于找到了它，ghostblog！\n\n&#160;&#160;但是安装下来着实费了不少功夫。总结起来比较简便的方法还是AMH+Node.js\n<!--more-->\n注：以下步骤引用自：\nhttp://www.tuicool.com/articles/jQnIJf3\n\n1.  安装AMH，网上有详细教程\n\n2.  安装Node.js\n\n  也是网上的教程，不过有些gcc版本可能支持不了太新的Node.js\n\n3.  安装ghost\n  \n 1. 新建数据库\n\n      登陆AMH面板，进入数据库，快速建库，很简单。\n\n 2. 新建站点\n\n     登陆AMH面板，点击虚拟主机，新建虚拟主机，这也很简单。\n\n 3. 安装Ghost程序\n\n     这里我们使用的是 http://ghostchina.com/ 发布的中文版Ghost。\n\n     登陆ssh，运行命令，\n\n            wget http://dl.ghostchina.com/Ghost-0.5.9-zh-full.zip //下载Ghost到VPS  \n            unzip Ghost-0.5.9-zh-full.zip -d ghost //解压Ghost-0.5.9-zh-full.zip并xiu修改文件夹名为ghost  \n如没有安装unzip，请执行 sudo yum install unzip 来安装，\n\n     &#160;&#160;到这里需要注意，ghost文件夹里的所有文件全部移动到之前你新建虚拟主机的web根目录下，不然会出错，文件移动号后，进入虚拟主机的web根目录下\n\n            cd /虚拟主机web根目录路径   //进入虚拟主机web根目录，此步骤不能少  \n            cp config.example.js config.js //复制config.example.js成config.js  \n            vim config.js //用vim编辑config.js文件  \n将相关位置修改成以下这样：\n\n            production: {  \n            url: 'http://your_blog_url',\n            mail: {},\n            database: {\n            client: 'mysql',\n            connection: {\n            host\t : '127.0.0.1', \n            user\t : 'root', //暂且直接用root账户\n            password : 'password', //你的root账户密码\n            database : 'ghost', //你之前建立的数据库名\n            charset  : 'utf8'\n            },\n            debug: false\n            },\n            server: {\n            // Host to be passed to node's                 `net.Server#listen()`\n            host: '127.0.0.1',//改为0.0.0.0，否则他人无法访问\n            // Port to be passed to node's `net.Server#listen()`, for iisnode set this to `process.env.PORT`\n            port: '2368'\n            }\n            },\n\n     这里说一下vim编辑器的一般用法：\n\n     i: 进入插入编辑模式\n\n      ESC: 退出编辑模式\n\n      :x : 退出并保存文件（退出编辑模式下使用）\n\n 4. 配置Nginx\n\n     由于之前你新建的虚拟主机的Nginx配置是为php服务的，所以，我们要将其进行修改成为node.js服务，\n\n            vim /usr/local/nginx/conf/***.conf //进入Nginx配置文件目录,并编辑与你新建的虚拟主机相应的Nginx配置文件  \n清空里面的内容，替换成以下：\n\n            server {  \n            listen 80;\n            server_name  xxx.com www.xxxx.com; //替换为你自己的域名！\n            location / {\n            proxy_set_header   X-Real-IP $remote_addr;\n            proxy_set_header   Host\t  $http_host;\n            proxy_pass\t\t http://127.0.0.1:2368;\n             }\n            }\n\n     然后进AMH控制面板重启一下Nginx，\n\n            npm start --production //启动Ghost，如果不出差错，在浏览器输入你的域名就可以看见Ghost的界面了，--production不能少  \n   别以为到这就结束了，目前Ghost在我们SSH断开后就会结束进程，所以我们继续：\n\n 5. 安装forever守护Ghost进程\n\n      为了让Ghost程序能够后台运行不中断，我们还得再安装个工具，就是forever，使用-g参数就是在全局模式中安装，这样我们就可以再任何地方都能使用forever命令了。\n\n     以下命令都请在网站根目录下运行\n\n            npm install forever -g //forever的安装命令  \n            NODE_ENV=production forever start index.js  //安装forever后的Ghost启动命令  \n          好了，Ghost就此安装完成\n\nGhost相关命令：\n\n//以下命令都请在网站根目录下运行\n                   \n    NODE_ENV=production forever start index.js //启动Ghost  \n    NODE_ENV=production forever stop index.js //停止Ghost  \n    NODE_ENV=production forever restart index.js //重启Ghost  \n现在，你就可以通过AMH控制面板进行数据管理、在线的文件编辑和上传 同样，你也可以按正常步骤新建一个php网站。","source":"_posts/VPS服务器搭建ghost blog.md","raw":"---\ntitle: VPS服务器搭建ghost blog\ndate: 2016-05-01 18:06:12\ncategories: web\ntags: [ghost blog]\nkeywords: VPS,ghost blog\n---\n\n####前传\n***\n&#160;&#160;无意中看到markdown语法，立马就喜欢上它，所以就想博客能不能也用这种语法写，因为我的博客原来一直用wordpress来搞，第一个想到的当然是用插件，当然也下到了，不过估计是主题css的问题，代码框老显示不出来，对于想要代码框的我来说实在是不能忍，就上网搜有没有其他的博客工具，哈哈终于找到了它，ghostblog！\n\n&#160;&#160;但是安装下来着实费了不少功夫。总结起来比较简便的方法还是AMH+Node.js\n<!--more-->\n注：以下步骤引用自：\nhttp://www.tuicool.com/articles/jQnIJf3\n\n1.  安装AMH，网上有详细教程\n\n2.  安装Node.js\n\n  也是网上的教程，不过有些gcc版本可能支持不了太新的Node.js\n\n3.  安装ghost\n  \n 1. 新建数据库\n\n      登陆AMH面板，进入数据库，快速建库，很简单。\n\n 2. 新建站点\n\n     登陆AMH面板，点击虚拟主机，新建虚拟主机，这也很简单。\n\n 3. 安装Ghost程序\n\n     这里我们使用的是 http://ghostchina.com/ 发布的中文版Ghost。\n\n     登陆ssh，运行命令，\n\n            wget http://dl.ghostchina.com/Ghost-0.5.9-zh-full.zip //下载Ghost到VPS  \n            unzip Ghost-0.5.9-zh-full.zip -d ghost //解压Ghost-0.5.9-zh-full.zip并xiu修改文件夹名为ghost  \n如没有安装unzip，请执行 sudo yum install unzip 来安装，\n\n     &#160;&#160;到这里需要注意，ghost文件夹里的所有文件全部移动到之前你新建虚拟主机的web根目录下，不然会出错，文件移动号后，进入虚拟主机的web根目录下\n\n            cd /虚拟主机web根目录路径   //进入虚拟主机web根目录，此步骤不能少  \n            cp config.example.js config.js //复制config.example.js成config.js  \n            vim config.js //用vim编辑config.js文件  \n将相关位置修改成以下这样：\n\n            production: {  \n            url: 'http://your_blog_url',\n            mail: {},\n            database: {\n            client: 'mysql',\n            connection: {\n            host\t : '127.0.0.1', \n            user\t : 'root', //暂且直接用root账户\n            password : 'password', //你的root账户密码\n            database : 'ghost', //你之前建立的数据库名\n            charset  : 'utf8'\n            },\n            debug: false\n            },\n            server: {\n            // Host to be passed to node's                 `net.Server#listen()`\n            host: '127.0.0.1',//改为0.0.0.0，否则他人无法访问\n            // Port to be passed to node's `net.Server#listen()`, for iisnode set this to `process.env.PORT`\n            port: '2368'\n            }\n            },\n\n     这里说一下vim编辑器的一般用法：\n\n     i: 进入插入编辑模式\n\n      ESC: 退出编辑模式\n\n      :x : 退出并保存文件（退出编辑模式下使用）\n\n 4. 配置Nginx\n\n     由于之前你新建的虚拟主机的Nginx配置是为php服务的，所以，我们要将其进行修改成为node.js服务，\n\n            vim /usr/local/nginx/conf/***.conf //进入Nginx配置文件目录,并编辑与你新建的虚拟主机相应的Nginx配置文件  \n清空里面的内容，替换成以下：\n\n            server {  \n            listen 80;\n            server_name  xxx.com www.xxxx.com; //替换为你自己的域名！\n            location / {\n            proxy_set_header   X-Real-IP $remote_addr;\n            proxy_set_header   Host\t  $http_host;\n            proxy_pass\t\t http://127.0.0.1:2368;\n             }\n            }\n\n     然后进AMH控制面板重启一下Nginx，\n\n            npm start --production //启动Ghost，如果不出差错，在浏览器输入你的域名就可以看见Ghost的界面了，--production不能少  \n   别以为到这就结束了，目前Ghost在我们SSH断开后就会结束进程，所以我们继续：\n\n 5. 安装forever守护Ghost进程\n\n      为了让Ghost程序能够后台运行不中断，我们还得再安装个工具，就是forever，使用-g参数就是在全局模式中安装，这样我们就可以再任何地方都能使用forever命令了。\n\n     以下命令都请在网站根目录下运行\n\n            npm install forever -g //forever的安装命令  \n            NODE_ENV=production forever start index.js  //安装forever后的Ghost启动命令  \n          好了，Ghost就此安装完成\n\nGhost相关命令：\n\n//以下命令都请在网站根目录下运行\n                   \n    NODE_ENV=production forever start index.js //启动Ghost  \n    NODE_ENV=production forever stop index.js //停止Ghost  \n    NODE_ENV=production forever restart index.js //重启Ghost  \n现在，你就可以通过AMH控制面板进行数据管理、在线的文件编辑和上传 同样，你也可以按正常步骤新建一个php网站。","slug":"VPS服务器搭建ghost blog","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59e000gjcm1dtaakr0d","content":"<p>####前传</p>\n<hr>\n<p>&#160;&#160;无意中看到markdown语法，立马就喜欢上它，所以就想博客能不能也用这种语法写，因为我的博客原来一直用wordpress来搞，第一个想到的当然是用插件，当然也下到了，不过估计是主题css的问题，代码框老显示不出来，对于想要代码框的我来说实在是不能忍，就上网搜有没有其他的博客工具，哈哈终于找到了它，ghostblog！</p>\n<p>&#160;&#160;但是安装下来着实费了不少功夫。总结起来比较简便的方法还是AMH+Node.js<br><a id=\"more\"></a><br>注：以下步骤引用自：<br><a href=\"http://www.tuicool.com/articles/jQnIJf3\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/jQnIJf3</a></p>\n<ol>\n<li><p>安装AMH，网上有详细教程</p>\n</li>\n<li><p>安装Node.js</p>\n<p>也是网上的教程，不过有些gcc版本可能支持不了太新的Node.js</p>\n</li>\n<li><p>安装ghost</p>\n<ol>\n<li><p>新建数据库</p>\n<p>登陆AMH面板，进入数据库，快速建库，很简单。</p>\n</li>\n<li><p>新建站点</p>\n<p>登陆AMH面板，点击虚拟主机，新建虚拟主机，这也很简单。</p>\n</li>\n<li><p>安装Ghost程序</p>\n<p>这里我们使用的是 <a href=\"http://ghostchina.com/\" target=\"_blank\" rel=\"noopener\">http://ghostchina.com/</a> 发布的中文版Ghost。</p>\n<p>登陆ssh，运行命令，</p>\n<pre><code>wget http://dl.ghostchina.com/Ghost-0.5.9-zh-full.zip //下载Ghost到VPS  \nunzip Ghost-0.5.9-zh-full.zip -d ghost //解压Ghost-0.5.9-zh-full.zip并xiu修改文件夹名为ghost  \n</code></pre><p>如没有安装unzip，请执行 sudo yum install unzip 来安装，</p>\n<p>&#160;&#160;到这里需要注意，ghost文件夹里的所有文件全部移动到之前你新建虚拟主机的web根目录下，不然会出错，文件移动号后，进入虚拟主机的web根目录下</p>\n<pre><code>cd /虚拟主机web根目录路径   //进入虚拟主机web根目录，此步骤不能少  \ncp config.example.js config.js //复制config.example.js成config.js  \nvim config.js //用vim编辑config.js文件  \n</code></pre><p>将相关位置修改成以下这样：</p>\n<pre><code>production: {  \nurl: &apos;http://your_blog_url&apos;,\nmail: {},\ndatabase: {\nclient: &apos;mysql&apos;,\nconnection: {\nhost     : &apos;127.0.0.1&apos;, \nuser     : &apos;root&apos;, //暂且直接用root账户\npassword : &apos;password&apos;, //你的root账户密码\ndatabase : &apos;ghost&apos;, //你之前建立的数据库名\ncharset  : &apos;utf8&apos;\n},\ndebug: false\n},\nserver: {\n// Host to be passed to node&apos;s                 `net.Server#listen()`\nhost: &apos;127.0.0.1&apos;,//改为0.0.0.0，否则他人无法访问\n// Port to be passed to node&apos;s `net.Server#listen()`, for iisnode set this to `process.env.PORT`\nport: &apos;2368&apos;\n}\n},\n</code></pre><p>这里说一下vim编辑器的一般用法：</p>\n<p>i: 进入插入编辑模式</p>\n<p>ESC: 退出编辑模式</p>\n<p>:x : 退出并保存文件（退出编辑模式下使用）</p>\n</li>\n<li><p>配置Nginx</p>\n<p>由于之前你新建的虚拟主机的Nginx配置是为php服务的，所以，我们要将其进行修改成为node.js服务，</p>\n<pre><code>vim /usr/local/nginx/conf/***.conf //进入Nginx配置文件目录,并编辑与你新建的虚拟主机相应的Nginx配置文件  \n</code></pre><p>清空里面的内容，替换成以下：</p>\n<pre><code>server {  \nlisten 80;\nserver_name  xxx.com www.xxxx.com; //替换为你自己的域名！\nlocation / {\nproxy_set_header   X-Real-IP $remote_addr;\nproxy_set_header   Host      $http_host;\nproxy_pass         http://127.0.0.1:2368;\n }\n}\n</code></pre><p>然后进AMH控制面板重启一下Nginx，</p>\n<pre><code>npm start --production //启动Ghost，如果不出差错，在浏览器输入你的域名就可以看见Ghost的界面了，--production不能少  \n</code></pre><p>别以为到这就结束了，目前Ghost在我们SSH断开后就会结束进程，所以我们继续：</p>\n</li>\n<li><p>安装forever守护Ghost进程</p>\n<p>为了让Ghost程序能够后台运行不中断，我们还得再安装个工具，就是forever，使用-g参数就是在全局模式中安装，这样我们就可以再任何地方都能使用forever命令了。</p>\n<p>以下命令都请在网站根目录下运行</p>\n<pre><code>npm install forever -g //forever的安装命令  \nNODE_ENV=production forever start index.js  //安装forever后的Ghost启动命令  \n</code></pre><p>   好了，Ghost就此安装完成</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>Ghost相关命令：</p>\n<p>//以下命令都请在网站根目录下运行</p>\n<pre><code>NODE_ENV=production forever start index.js //启动Ghost  \nNODE_ENV=production forever stop index.js //停止Ghost  \nNODE_ENV=production forever restart index.js //重启Ghost  \n</code></pre><p>现在，你就可以通过AMH控制面板进行数据管理、在线的文件编辑和上传 同样，你也可以按正常步骤新建一个php网站。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<p>####前传</p>\n<hr>\n<p>&#160;&#160;无意中看到markdown语法，立马就喜欢上它，所以就想博客能不能也用这种语法写，因为我的博客原来一直用wordpress来搞，第一个想到的当然是用插件，当然也下到了，不过估计是主题css的问题，代码框老显示不出来，对于想要代码框的我来说实在是不能忍，就上网搜有没有其他的博客工具，哈哈终于找到了它，ghostblog！</p>\n<p>&#160;&#160;但是安装下来着实费了不少功夫。总结起来比较简便的方法还是AMH+Node.js<br>","more":"<br>注：以下步骤引用自：<br><a href=\"http://www.tuicool.com/articles/jQnIJf3\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/jQnIJf3</a></p>\n<ol>\n<li><p>安装AMH，网上有详细教程</p>\n</li>\n<li><p>安装Node.js</p>\n<p>也是网上的教程，不过有些gcc版本可能支持不了太新的Node.js</p>\n</li>\n<li><p>安装ghost</p>\n<ol>\n<li><p>新建数据库</p>\n<p>登陆AMH面板，进入数据库，快速建库，很简单。</p>\n</li>\n<li><p>新建站点</p>\n<p>登陆AMH面板，点击虚拟主机，新建虚拟主机，这也很简单。</p>\n</li>\n<li><p>安装Ghost程序</p>\n<p>这里我们使用的是 <a href=\"http://ghostchina.com/\" target=\"_blank\" rel=\"noopener\">http://ghostchina.com/</a> 发布的中文版Ghost。</p>\n<p>登陆ssh，运行命令，</p>\n<pre><code>wget http://dl.ghostchina.com/Ghost-0.5.9-zh-full.zip //下载Ghost到VPS  \nunzip Ghost-0.5.9-zh-full.zip -d ghost //解压Ghost-0.5.9-zh-full.zip并xiu修改文件夹名为ghost  \n</code></pre><p>如没有安装unzip，请执行 sudo yum install unzip 来安装，</p>\n<p>&#160;&#160;到这里需要注意，ghost文件夹里的所有文件全部移动到之前你新建虚拟主机的web根目录下，不然会出错，文件移动号后，进入虚拟主机的web根目录下</p>\n<pre><code>cd /虚拟主机web根目录路径   //进入虚拟主机web根目录，此步骤不能少  \ncp config.example.js config.js //复制config.example.js成config.js  \nvim config.js //用vim编辑config.js文件  \n</code></pre><p>将相关位置修改成以下这样：</p>\n<pre><code>production: {  \nurl: &apos;http://your_blog_url&apos;,\nmail: {},\ndatabase: {\nclient: &apos;mysql&apos;,\nconnection: {\nhost     : &apos;127.0.0.1&apos;, \nuser     : &apos;root&apos;, //暂且直接用root账户\npassword : &apos;password&apos;, //你的root账户密码\ndatabase : &apos;ghost&apos;, //你之前建立的数据库名\ncharset  : &apos;utf8&apos;\n},\ndebug: false\n},\nserver: {\n// Host to be passed to node&apos;s                 `net.Server#listen()`\nhost: &apos;127.0.0.1&apos;,//改为0.0.0.0，否则他人无法访问\n// Port to be passed to node&apos;s `net.Server#listen()`, for iisnode set this to `process.env.PORT`\nport: &apos;2368&apos;\n}\n},\n</code></pre><p>这里说一下vim编辑器的一般用法：</p>\n<p>i: 进入插入编辑模式</p>\n<p>ESC: 退出编辑模式</p>\n<p>:x : 退出并保存文件（退出编辑模式下使用）</p>\n</li>\n<li><p>配置Nginx</p>\n<p>由于之前你新建的虚拟主机的Nginx配置是为php服务的，所以，我们要将其进行修改成为node.js服务，</p>\n<pre><code>vim /usr/local/nginx/conf/***.conf //进入Nginx配置文件目录,并编辑与你新建的虚拟主机相应的Nginx配置文件  \n</code></pre><p>清空里面的内容，替换成以下：</p>\n<pre><code>server {  \nlisten 80;\nserver_name  xxx.com www.xxxx.com; //替换为你自己的域名！\nlocation / {\nproxy_set_header   X-Real-IP $remote_addr;\nproxy_set_header   Host      $http_host;\nproxy_pass         http://127.0.0.1:2368;\n }\n}\n</code></pre><p>然后进AMH控制面板重启一下Nginx，</p>\n<pre><code>npm start --production //启动Ghost，如果不出差错，在浏览器输入你的域名就可以看见Ghost的界面了，--production不能少  \n</code></pre><p>别以为到这就结束了，目前Ghost在我们SSH断开后就会结束进程，所以我们继续：</p>\n</li>\n<li><p>安装forever守护Ghost进程</p>\n<p>为了让Ghost程序能够后台运行不中断，我们还得再安装个工具，就是forever，使用-g参数就是在全局模式中安装，这样我们就可以再任何地方都能使用forever命令了。</p>\n<p>以下命令都请在网站根目录下运行</p>\n<pre><code>npm install forever -g //forever的安装命令  \nNODE_ENV=production forever start index.js  //安装forever后的Ghost启动命令  \n</code></pre><p>   好了，Ghost就此安装完成</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>Ghost相关命令：</p>\n<p>//以下命令都请在网站根目录下运行</p>\n<pre><code>NODE_ENV=production forever start index.js //启动Ghost  \nNODE_ENV=production forever stop index.js //停止Ghost  \nNODE_ENV=production forever restart index.js //重启Ghost  \n</code></pre><p>现在，你就可以通过AMH控制面板进行数据管理、在线的文件编辑和上传 同样，你也可以按正常步骤新建一个php网站。</p>"},{"title":"colab读写外部文件的四种方式","date":"2018-10-20T09:05:35.000Z","keywords":"google, colab, jupyter, notebook, 机器学习, gpu","_content":"\n\n## 引言\n众所周知，colab是google提供的运行在云端的jupyter notebook环境。里面集成了许多著名的机器学习python库。由于这个环境是运行在google虚拟机上的，显然与自己的pc不在一个文件系统。那么怎么与我们自己的文件交互呢？\n\ncolab文档里提供了四种方式，分别是：\n1. 从本地直接上传\n2. 连接Google Drive\n3. 连接Google Sheet\n4. 连接Google Cloud Storage\n\n下面就来分别描述。\n\n\n\n### 与本地文件交互\n#### 本地文件上传\n`files.upload()` 返回一个由我们上传的所有文件构成的一个字典。 这个字典的`key`是文件名, 这个字典的`value`是我们上传的文件的`data`。\n```python\nfrom google.colab import files\n\nuploaded = files.upload()\n\nfor fn in uploaded.keys():\n    print('User uploaded file \"{name}\" with length {length} bytes'.format(name=fn, length=len(uploaded[fn])))\n```\n\n#### 从colab下载文件到本地\n```python\nfrom google.colab import files\nwith open('example.txt', 'w') as f:\n      f.write('some content')\nfiles.download('example.txt')\n```\n\n### 连接Google Drive\n这里官方有提供了许多种方法。这里我就挑一种介绍了，有兴趣的可以点进这个[链接](https://colab.research.google.com/notebooks/io.ipynb#scrollTo=P3KX0Sm0E2sF)进去看。\n\n这里只介绍使用`PyDrive`的方法。PyDrive是google-api-python-client的包装库，简化了许多常见的Google Drive API任务。\n\n```python\n!pip install -U -q PyDrive\n\nfrom pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n\n# 1. 验证身份并创建pydrive客户端.\nauth.authenticate_user()\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)\n\n# PyDrive 参考:\n# https://gsuitedevs.github.io/PyDrive/docs/build/html/index.html\n\n# 2. 创建并上传一个文本文档.\nuploaded = drive.CreateFile({'title': 'Sample upload.txt'})\nuploaded.SetContentString('Sample upload file content')\nuploaded.Upload()\nprint('Uploaded file with ID {}'.format(uploaded.get('id')))\n\n# 3. 通过id访问文件并输出它的内容.\ndownloaded = drive.CreateFile({'id': uploaded.get('id')})\nprint('Downloaded content \"{}\"'.format(downloaded.GetContentString()))\n```\n### 连接Google Sheet\n### 连接Google Cloud Storage","source":"_posts/colab读写外部文件的四种方式.md","raw":"---\ntitle: colab读写外部文件的四种方式\ndate: 2018-10-20 17:05:35\ncategories: 机器学习\ntags:\n  - colab\nkeywords: google, colab, jupyter, notebook, 机器学习, gpu\n---\n\n\n## 引言\n众所周知，colab是google提供的运行在云端的jupyter notebook环境。里面集成了许多著名的机器学习python库。由于这个环境是运行在google虚拟机上的，显然与自己的pc不在一个文件系统。那么怎么与我们自己的文件交互呢？\n\ncolab文档里提供了四种方式，分别是：\n1. 从本地直接上传\n2. 连接Google Drive\n3. 连接Google Sheet\n4. 连接Google Cloud Storage\n\n下面就来分别描述。\n\n\n\n### 与本地文件交互\n#### 本地文件上传\n`files.upload()` 返回一个由我们上传的所有文件构成的一个字典。 这个字典的`key`是文件名, 这个字典的`value`是我们上传的文件的`data`。\n```python\nfrom google.colab import files\n\nuploaded = files.upload()\n\nfor fn in uploaded.keys():\n    print('User uploaded file \"{name}\" with length {length} bytes'.format(name=fn, length=len(uploaded[fn])))\n```\n\n#### 从colab下载文件到本地\n```python\nfrom google.colab import files\nwith open('example.txt', 'w') as f:\n      f.write('some content')\nfiles.download('example.txt')\n```\n\n### 连接Google Drive\n这里官方有提供了许多种方法。这里我就挑一种介绍了，有兴趣的可以点进这个[链接](https://colab.research.google.com/notebooks/io.ipynb#scrollTo=P3KX0Sm0E2sF)进去看。\n\n这里只介绍使用`PyDrive`的方法。PyDrive是google-api-python-client的包装库，简化了许多常见的Google Drive API任务。\n\n```python\n!pip install -U -q PyDrive\n\nfrom pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n\n# 1. 验证身份并创建pydrive客户端.\nauth.authenticate_user()\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)\n\n# PyDrive 参考:\n# https://gsuitedevs.github.io/PyDrive/docs/build/html/index.html\n\n# 2. 创建并上传一个文本文档.\nuploaded = drive.CreateFile({'title': 'Sample upload.txt'})\nuploaded.SetContentString('Sample upload file content')\nuploaded.Upload()\nprint('Uploaded file with ID {}'.format(uploaded.get('id')))\n\n# 3. 通过id访问文件并输出它的内容.\ndownloaded = drive.CreateFile({'id': uploaded.get('id')})\nprint('Downloaded content \"{}\"'.format(downloaded.GetContentString()))\n```\n### 连接Google Sheet\n### 连接Google Cloud Storage","slug":"colab读写外部文件的四种方式","published":1,"updated":"2018-10-20T12:30:25.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59g000ljcm180qdare6","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>众所周知，colab是google提供的运行在云端的jupyter notebook环境。里面集成了许多著名的机器学习python库。由于这个环境是运行在google虚拟机上的，显然与自己的pc不在一个文件系统。那么怎么与我们自己的文件交互呢？</p>\n<p>colab文档里提供了四种方式，分别是：</p>\n<ol>\n<li>从本地直接上传</li>\n<li>连接Google Drive</li>\n<li>连接Google Sheet</li>\n<li>连接Google Cloud Storage</li>\n</ol>\n<p>下面就来分别描述。</p>\n<h3 id=\"与本地文件交互\"><a href=\"#与本地文件交互\" class=\"headerlink\" title=\"与本地文件交互\"></a>与本地文件交互</h3><h4 id=\"本地文件上传\"><a href=\"#本地文件上传\" class=\"headerlink\" title=\"本地文件上传\"></a>本地文件上传</h4><p><code>files.upload()</code> 返回一个由我们上传的所有文件构成的一个字典。 这个字典的<code>key</code>是文件名, 这个字典的<code>value</code>是我们上传的文件的<code>data</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> files</span><br><span class=\"line\"></span><br><span class=\"line\">uploaded = files.upload()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> fn <span class=\"keyword\">in</span> uploaded.keys():</span><br><span class=\"line\">    print(<span class=\"string\">'User uploaded file \"&#123;name&#125;\" with length &#123;length&#125; bytes'</span>.format(name=fn, length=len(uploaded[fn])))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"从colab下载文件到本地\"><a href=\"#从colab下载文件到本地\" class=\"headerlink\" title=\"从colab下载文件到本地\"></a>从colab下载文件到本地</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> files</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'example.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">      f.write(<span class=\"string\">'some content'</span>)</span><br><span class=\"line\">files.download(<span class=\"string\">'example.txt'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接Google-Drive\"><a href=\"#连接Google-Drive\" class=\"headerlink\" title=\"连接Google Drive\"></a>连接Google Drive</h3><p>这里官方有提供了许多种方法。这里我就挑一种介绍了，有兴趣的可以点进这个<a href=\"https://colab.research.google.com/notebooks/io.ipynb#scrollTo=P3KX0Sm0E2sF\" target=\"_blank\" rel=\"noopener\">链接</a>进去看。</p>\n<p>这里只介绍使用<code>PyDrive</code>的方法。PyDrive是google-api-python-client的包装库，简化了许多常见的Google Drive API任务。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!pip install -U -q PyDrive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pydrive.auth <span class=\"keyword\">import</span> GoogleAuth</span><br><span class=\"line\"><span class=\"keyword\">from</span> pydrive.drive <span class=\"keyword\">import</span> GoogleDrive</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> oauth2client.client <span class=\"keyword\">import</span> GoogleCredentials</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 验证身份并创建pydrive客户端.</span></span><br><span class=\"line\">auth.authenticate_user()</span><br><span class=\"line\">gauth = GoogleAuth()</span><br><span class=\"line\">gauth.credentials = GoogleCredentials.get_application_default()</span><br><span class=\"line\">drive = GoogleDrive(gauth)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PyDrive 参考:</span></span><br><span class=\"line\"><span class=\"comment\"># https://gsuitedevs.github.io/PyDrive/docs/build/html/index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建并上传一个文本文档.</span></span><br><span class=\"line\">uploaded = drive.CreateFile(&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'Sample upload.txt'</span>&#125;)</span><br><span class=\"line\">uploaded.SetContentString(<span class=\"string\">'Sample upload file content'</span>)</span><br><span class=\"line\">uploaded.Upload()</span><br><span class=\"line\">print(<span class=\"string\">'Uploaded file with ID &#123;&#125;'</span>.format(uploaded.get(<span class=\"string\">'id'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 通过id访问文件并输出它的内容.</span></span><br><span class=\"line\">downloaded = drive.CreateFile(&#123;<span class=\"string\">'id'</span>: uploaded.get(<span class=\"string\">'id'</span>)&#125;)</span><br><span class=\"line\">print(<span class=\"string\">'Downloaded content \"&#123;&#125;\"'</span>.format(downloaded.GetContentString()))</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接Google-Sheet\"><a href=\"#连接Google-Sheet\" class=\"headerlink\" title=\"连接Google Sheet\"></a>连接Google Sheet</h3><h3 id=\"连接Google-Cloud-Storage\"><a href=\"#连接Google-Cloud-Storage\" class=\"headerlink\" title=\"连接Google Cloud Storage\"></a>连接Google Cloud Storage</h3>","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>众所周知，colab是google提供的运行在云端的jupyter notebook环境。里面集成了许多著名的机器学习python库。由于这个环境是运行在google虚拟机上的，显然与自己的pc不在一个文件系统。那么怎么与我们自己的文件交互呢？</p>\n<p>colab文档里提供了四种方式，分别是：</p>\n<ol>\n<li>从本地直接上传</li>\n<li>连接Google Drive</li>\n<li>连接Google Sheet</li>\n<li>连接Google Cloud Storage</li>\n</ol>\n<p>下面就来分别描述。</p>\n<h3 id=\"与本地文件交互\"><a href=\"#与本地文件交互\" class=\"headerlink\" title=\"与本地文件交互\"></a>与本地文件交互</h3><h4 id=\"本地文件上传\"><a href=\"#本地文件上传\" class=\"headerlink\" title=\"本地文件上传\"></a>本地文件上传</h4><p><code>files.upload()</code> 返回一个由我们上传的所有文件构成的一个字典。 这个字典的<code>key</code>是文件名, 这个字典的<code>value</code>是我们上传的文件的<code>data</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> files</span><br><span class=\"line\"></span><br><span class=\"line\">uploaded = files.upload()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> fn <span class=\"keyword\">in</span> uploaded.keys():</span><br><span class=\"line\">    print(<span class=\"string\">'User uploaded file \"&#123;name&#125;\" with length &#123;length&#125; bytes'</span>.format(name=fn, length=len(uploaded[fn])))</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"从colab下载文件到本地\"><a href=\"#从colab下载文件到本地\" class=\"headerlink\" title=\"从colab下载文件到本地\"></a>从colab下载文件到本地</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> files</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'example.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">      f.write(<span class=\"string\">'some content'</span>)</span><br><span class=\"line\">files.download(<span class=\"string\">'example.txt'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接Google-Drive\"><a href=\"#连接Google-Drive\" class=\"headerlink\" title=\"连接Google Drive\"></a>连接Google Drive</h3><p>这里官方有提供了许多种方法。这里我就挑一种介绍了，有兴趣的可以点进这个<a href=\"https://colab.research.google.com/notebooks/io.ipynb#scrollTo=P3KX0Sm0E2sF\" target=\"_blank\" rel=\"noopener\">链接</a>进去看。</p>\n<p>这里只介绍使用<code>PyDrive</code>的方法。PyDrive是google-api-python-client的包装库，简化了许多常见的Google Drive API任务。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!pip install -U -q PyDrive</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pydrive.auth <span class=\"keyword\">import</span> GoogleAuth</span><br><span class=\"line\"><span class=\"keyword\">from</span> pydrive.drive <span class=\"keyword\">import</span> GoogleDrive</span><br><span class=\"line\"><span class=\"keyword\">from</span> google.colab <span class=\"keyword\">import</span> auth</span><br><span class=\"line\"><span class=\"keyword\">from</span> oauth2client.client <span class=\"keyword\">import</span> GoogleCredentials</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 验证身份并创建pydrive客户端.</span></span><br><span class=\"line\">auth.authenticate_user()</span><br><span class=\"line\">gauth = GoogleAuth()</span><br><span class=\"line\">gauth.credentials = GoogleCredentials.get_application_default()</span><br><span class=\"line\">drive = GoogleDrive(gauth)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PyDrive 参考:</span></span><br><span class=\"line\"><span class=\"comment\"># https://gsuitedevs.github.io/PyDrive/docs/build/html/index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 创建并上传一个文本文档.</span></span><br><span class=\"line\">uploaded = drive.CreateFile(&#123;<span class=\"string\">'title'</span>: <span class=\"string\">'Sample upload.txt'</span>&#125;)</span><br><span class=\"line\">uploaded.SetContentString(<span class=\"string\">'Sample upload file content'</span>)</span><br><span class=\"line\">uploaded.Upload()</span><br><span class=\"line\">print(<span class=\"string\">'Uploaded file with ID &#123;&#125;'</span>.format(uploaded.get(<span class=\"string\">'id'</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 通过id访问文件并输出它的内容.</span></span><br><span class=\"line\">downloaded = drive.CreateFile(&#123;<span class=\"string\">'id'</span>: uploaded.get(<span class=\"string\">'id'</span>)&#125;)</span><br><span class=\"line\">print(<span class=\"string\">'Downloaded content \"&#123;&#125;\"'</span>.format(downloaded.GetContentString()))</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接Google-Sheet\"><a href=\"#连接Google-Sheet\" class=\"headerlink\" title=\"连接Google Sheet\"></a>连接Google Sheet</h3><h3 id=\"连接Google-Cloud-Storage\"><a href=\"#连接Google-Cloud-Storage\" class=\"headerlink\" title=\"连接Google Cloud Storage\"></a>连接Google Cloud Storage</h3>"},{"title":"hexo在线编写博客——hexo系列文章（四）","date":"2017-05-10T10:30:03.000Z","_content":"## 引言\n这篇文章就是在线写出来的~\n\n从编辑、到生成，全部云上完成，妈妈再也不用担心我在别的电脑上没法写hexo了！\n\n<!--more-->\n\n效果如图：\n\n![cloud9在线写博客](http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705102.jpg)\n\n## 综述\n搭建这个环境其实也并不麻烦啦，Cloud9我是用别人的镜像装的，所以简单很多。总体来说，大概需要这些东西：\n\n* VPS一台\n* Docker\n* Cloud9\n* nvm\n* node(建议>6.*)\n* npm\n* hexo\n* apache(可选)\n* rsync(可选)\n* incrond（可选）\n\n## 安装\n### VPS篇\n我VPS用的系统是CentOS6.8 x64\n### Docker安装\nCentOS下安装Docker还是很简单的，命令如下：\n```\nsudo yum install docker-io\n```\n安装完后启动docker服务\n```\nservice docker start\n```\n\n### Cloud9安装（Docker）\n#### 用VPS\n~~**注：**dockerhub上现成的image是没有密码的，我可不希望别人谁都可以进来编辑我的博客，所以改一下Dockerfile，自己构建镜像。~~\n\n不要用这个办法了，dockerhub上有现成的镜像`sapk/cloud9`，地址[点这里](https://hub.docker.com/r/sapk/cloud9/)\n想看旧方法，请[点这里](https://heliublog.com/2017/05/10/hexo%E5%9C%A8%E7%BA%BF%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/#cloud9-docker)\n\n\n```\ndocker pull sapk/cloud9\n\n# start with auth 将username,password替换成自己的账号密码\ndocker run -d -v your-path/workspace:/workspace -p 8181:8181 sapk/cloud9 --auth username:password\n\n```\nhttp://ip:8181  查看效果吧！\n\n#### 用Docker云\n这里仅以[Arukas](https://arukas.io/)为例。\n注册账号什么的就不说了。\n直接创建应用，按照下图填写就行了：\n![Arukas](http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705112.jpg)\n创建完成后启动应用，如果一次不成功就多试几次。\n创建成功后，点击`Endpoint`后面的链接就可以进到你自己的cloud9了。\n\n**千万注意：我不知道这里的数据都储存在了哪里，所以一定要定时将自己的博文通过cloud9页面下载到自己的电脑上，以作备份。**\n\n### nvm、node、npm、hexo\n这些我们一起讲，因为都是在cloud9中安装的。\n\n#### nvm、node、npm的安装\nnvm是node的版本管理器。\n##### 首先安装必要的包\n```\nsudo apt-get update  \nsudo apt-get install build-essential libssl-dev\n```\n\n**注意：cloud9镜像是用ubuntu搭建的，所以要用apt-get，这个不是centos系统了，不要弄混了~**\n##### 安装nvm的脚本\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash  \n```\n\n##### 使用nvm安装并使用node6\n```\nnvm install v6.10.3\nnvm use v6.10.3\nnode -v\n# v6.10.3  即表示安装成功\n```\nnpm有了，就不必装了\n\n#### hexo安装\n> 这个不是本文重点，可以参考我以前的文章\n> [搭建hexo博客小记——hexo系列文章（一）](https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/)\n```\nnpm install -g hexo-cli\nmkdir hexo\nhexo init\nnpm install\nhexo g\n```\n好了，到此为止，整个在线环境就部署成功了，你可以`hexo d`来提交你的博客到github，当然，也可以用你的VPS来\n做网页服务器。如果不想的话，下面的部分就不用看了。\n\n***\n\n### apache安装\n由于我没学过前端，这里我用的是[lnmp一键安装包](https://blog.linuxeye.com/31.html)，可以只装Apache，别的都不用装。\n\n将主机目录设置为`your-workspace/hexo/public`\n\n我的这样做是不行，改了权限也不行，所以只能用默认的目录`/data/wwwroot/your-domain-name`然后同步两个文件夹了。\n这是就用到最后两个工具：\n* rsync用来同步\n* incron用来监控文件改动\n\n### rsync的使用\n使用方法如下：\n```\nrsync -av --delete /ressourcen /ressourcen_backup\n```\n这样当`/ressourcen`目录中的文件有变动、删除时，就会同步到`/ressourcen_backup`。\n\n我们要把这个文件写到一个脚本中，这样才能发挥他的作用（后述）。\n\n### incron\nincron的使用，我在前面的文章中也提到过[VPS+Hexo+Dropbox创建个人博客](https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#安装incron)\n\n安装incron\n```\nyum install incron\nservice incrond start\n```\n用incron来监测文件夹变动\n```\nincrontab -e\n# 在其中添加：\nyour-path/hexo/public IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE your-path/runrsync.bash\n```\n\n```\nvim runrsync.bash \n```\n\nrunrsync.bash中写入:\n```\n#!/usr/bin/env bash\nexec 200<$0\nflock -n 200 || exit 1\nsleep 1\nrsync -av --delete /ressourcen /ressourcen_backup\n```\n\n赋予权限\n```\nchmod +x runrsync.bash\n```\n\n这样当`hexo g`，`public`文件夹就会发生变动，此时incron检测到了文件变动，运行脚本`runrsync.bash`，实现两个文件夹的同步。\n\n\n## 补充\n### 时区问题\n若用国外主机，在`hexo new`时，会由于时区设置的问题，`date`显示的不是本地时间，可以更改时区：\n```\ndate -R  # 查看当前系统时区\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  # 设置时区为东八区\n```\n\n### 开机启动\n我们写了很多脚本，运行了很多服务，机器重启之后都不会开起来，所以我们要加入开机自启，才能保证功能的正常。\n```\nvim /etc/rc.d/rc.local\n\n# 写入以下内容\n\n# Docker\nservice docker start\n\n# cloud9\ndocker start 3e9a55a\n\n# incrond\nservice incrond start\n\n```\n\n## old\n### cloud9-docker\n**(此方法已过期)**\nDockerfile的github地址在这里：[https://github.com/kdelfour/cloud9-docker](https://github.com/kdelfour/cloud9-docker)\n\n我们将它克隆下来：\n\n```\ncd ~\nmkdir cloud9\ncd cloud9\ngit clone https://github.com/kdelfour/cloud9-docker.git\n```\n\n然后就要改改文件了，方法如下：\n\n（我是参考别人的）\n\n> 参考issue页面https://github.com/kdelfour/cloud9-docker/issues/15\n> pbelyaev的回答:\n> Just clone this repository and edit conf/cloud9.conf:\n> \n> [program:cloud9]\n> command = node /cloud9/server.js --listen 0.0.0.0 --port 80 --auth user:password -w /workspace\n> directory = /cloud9\n> user = root\n> autostart = true\n> autorestart = true\n> stdout_logfile = /var/log/supervisor/cloud9.log\n> stderr_logfile = /var/log/supervisor/cloud9_errors.log\n> environment = NODE_ENV=\"production\"\n> Then edit docker-compose.yml file:\n> \n> ...\n>   cnine:\n>     build: ./dir/to/cloned/repository\n\n改好以后就可以构建镜像了，build命令格式如下\n```\ndocker build -t image_name Dockerfile_path\n```\n\n所以我们敲命令：\n```\ncd Dockerfile所在目录\ndocker build -t yourname/cloud9 .\n```\n\n构建完成后，我们来创建并启动容器：\n\n```\ndocker run -it -d -p 80:80 -v /your-path/workspace/:/workspace/ yourname/cloud9 --auth user:password \n```\n**注：记得将user:password改为你自己的用户名:密码；yourname/cloud9是你自己起的image名字。**\n\nhttp://your-server-ip\n\n就可以进入icloud了。\n\n## 推荐\n推荐大家看我以前写的hexo系列：\n\n[搭建hexo博客小记——hexo系列文章（一）](https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/)\n\n[利用Swiftype建立站内搜索——hexo系列文章（二）](https://heliublog.com/2016/05/14/Hexo%E5%88%A9%E7%94%A8Swiftype%E5%BB%BA%E7%AB%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/)\n\n[VPS+Hexo+Dropbox创建个人博客——hexo系列教程（三）](https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)","source":"_posts/hexo在线编写博客.md","raw":"---\ntitle: hexo在线编写博客——hexo系列文章（四）\ndate: 2017-05-10 18:30:03\ntags:\n  - Hexo\n  - VPS\n  - Linux\n  - cloud9\n  - Docker\ncategories: 博客\n---\n## 引言\n这篇文章就是在线写出来的~\n\n从编辑、到生成，全部云上完成，妈妈再也不用担心我在别的电脑上没法写hexo了！\n\n<!--more-->\n\n效果如图：\n\n![cloud9在线写博客](http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705102.jpg)\n\n## 综述\n搭建这个环境其实也并不麻烦啦，Cloud9我是用别人的镜像装的，所以简单很多。总体来说，大概需要这些东西：\n\n* VPS一台\n* Docker\n* Cloud9\n* nvm\n* node(建议>6.*)\n* npm\n* hexo\n* apache(可选)\n* rsync(可选)\n* incrond（可选）\n\n## 安装\n### VPS篇\n我VPS用的系统是CentOS6.8 x64\n### Docker安装\nCentOS下安装Docker还是很简单的，命令如下：\n```\nsudo yum install docker-io\n```\n安装完后启动docker服务\n```\nservice docker start\n```\n\n### Cloud9安装（Docker）\n#### 用VPS\n~~**注：**dockerhub上现成的image是没有密码的，我可不希望别人谁都可以进来编辑我的博客，所以改一下Dockerfile，自己构建镜像。~~\n\n不要用这个办法了，dockerhub上有现成的镜像`sapk/cloud9`，地址[点这里](https://hub.docker.com/r/sapk/cloud9/)\n想看旧方法，请[点这里](https://heliublog.com/2017/05/10/hexo%E5%9C%A8%E7%BA%BF%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/#cloud9-docker)\n\n\n```\ndocker pull sapk/cloud9\n\n# start with auth 将username,password替换成自己的账号密码\ndocker run -d -v your-path/workspace:/workspace -p 8181:8181 sapk/cloud9 --auth username:password\n\n```\nhttp://ip:8181  查看效果吧！\n\n#### 用Docker云\n这里仅以[Arukas](https://arukas.io/)为例。\n注册账号什么的就不说了。\n直接创建应用，按照下图填写就行了：\n![Arukas](http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705112.jpg)\n创建完成后启动应用，如果一次不成功就多试几次。\n创建成功后，点击`Endpoint`后面的链接就可以进到你自己的cloud9了。\n\n**千万注意：我不知道这里的数据都储存在了哪里，所以一定要定时将自己的博文通过cloud9页面下载到自己的电脑上，以作备份。**\n\n### nvm、node、npm、hexo\n这些我们一起讲，因为都是在cloud9中安装的。\n\n#### nvm、node、npm的安装\nnvm是node的版本管理器。\n##### 首先安装必要的包\n```\nsudo apt-get update  \nsudo apt-get install build-essential libssl-dev\n```\n\n**注意：cloud9镜像是用ubuntu搭建的，所以要用apt-get，这个不是centos系统了，不要弄混了~**\n##### 安装nvm的脚本\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash  \n```\n\n##### 使用nvm安装并使用node6\n```\nnvm install v6.10.3\nnvm use v6.10.3\nnode -v\n# v6.10.3  即表示安装成功\n```\nnpm有了，就不必装了\n\n#### hexo安装\n> 这个不是本文重点，可以参考我以前的文章\n> [搭建hexo博客小记——hexo系列文章（一）](https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/)\n```\nnpm install -g hexo-cli\nmkdir hexo\nhexo init\nnpm install\nhexo g\n```\n好了，到此为止，整个在线环境就部署成功了，你可以`hexo d`来提交你的博客到github，当然，也可以用你的VPS来\n做网页服务器。如果不想的话，下面的部分就不用看了。\n\n***\n\n### apache安装\n由于我没学过前端，这里我用的是[lnmp一键安装包](https://blog.linuxeye.com/31.html)，可以只装Apache，别的都不用装。\n\n将主机目录设置为`your-workspace/hexo/public`\n\n我的这样做是不行，改了权限也不行，所以只能用默认的目录`/data/wwwroot/your-domain-name`然后同步两个文件夹了。\n这是就用到最后两个工具：\n* rsync用来同步\n* incron用来监控文件改动\n\n### rsync的使用\n使用方法如下：\n```\nrsync -av --delete /ressourcen /ressourcen_backup\n```\n这样当`/ressourcen`目录中的文件有变动、删除时，就会同步到`/ressourcen_backup`。\n\n我们要把这个文件写到一个脚本中，这样才能发挥他的作用（后述）。\n\n### incron\nincron的使用，我在前面的文章中也提到过[VPS+Hexo+Dropbox创建个人博客](https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#安装incron)\n\n安装incron\n```\nyum install incron\nservice incrond start\n```\n用incron来监测文件夹变动\n```\nincrontab -e\n# 在其中添加：\nyour-path/hexo/public IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE your-path/runrsync.bash\n```\n\n```\nvim runrsync.bash \n```\n\nrunrsync.bash中写入:\n```\n#!/usr/bin/env bash\nexec 200<$0\nflock -n 200 || exit 1\nsleep 1\nrsync -av --delete /ressourcen /ressourcen_backup\n```\n\n赋予权限\n```\nchmod +x runrsync.bash\n```\n\n这样当`hexo g`，`public`文件夹就会发生变动，此时incron检测到了文件变动，运行脚本`runrsync.bash`，实现两个文件夹的同步。\n\n\n## 补充\n### 时区问题\n若用国外主机，在`hexo new`时，会由于时区设置的问题，`date`显示的不是本地时间，可以更改时区：\n```\ndate -R  # 查看当前系统时区\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  # 设置时区为东八区\n```\n\n### 开机启动\n我们写了很多脚本，运行了很多服务，机器重启之后都不会开起来，所以我们要加入开机自启，才能保证功能的正常。\n```\nvim /etc/rc.d/rc.local\n\n# 写入以下内容\n\n# Docker\nservice docker start\n\n# cloud9\ndocker start 3e9a55a\n\n# incrond\nservice incrond start\n\n```\n\n## old\n### cloud9-docker\n**(此方法已过期)**\nDockerfile的github地址在这里：[https://github.com/kdelfour/cloud9-docker](https://github.com/kdelfour/cloud9-docker)\n\n我们将它克隆下来：\n\n```\ncd ~\nmkdir cloud9\ncd cloud9\ngit clone https://github.com/kdelfour/cloud9-docker.git\n```\n\n然后就要改改文件了，方法如下：\n\n（我是参考别人的）\n\n> 参考issue页面https://github.com/kdelfour/cloud9-docker/issues/15\n> pbelyaev的回答:\n> Just clone this repository and edit conf/cloud9.conf:\n> \n> [program:cloud9]\n> command = node /cloud9/server.js --listen 0.0.0.0 --port 80 --auth user:password -w /workspace\n> directory = /cloud9\n> user = root\n> autostart = true\n> autorestart = true\n> stdout_logfile = /var/log/supervisor/cloud9.log\n> stderr_logfile = /var/log/supervisor/cloud9_errors.log\n> environment = NODE_ENV=\"production\"\n> Then edit docker-compose.yml file:\n> \n> ...\n>   cnine:\n>     build: ./dir/to/cloned/repository\n\n改好以后就可以构建镜像了，build命令格式如下\n```\ndocker build -t image_name Dockerfile_path\n```\n\n所以我们敲命令：\n```\ncd Dockerfile所在目录\ndocker build -t yourname/cloud9 .\n```\n\n构建完成后，我们来创建并启动容器：\n\n```\ndocker run -it -d -p 80:80 -v /your-path/workspace/:/workspace/ yourname/cloud9 --auth user:password \n```\n**注：记得将user:password改为你自己的用户名:密码；yourname/cloud9是你自己起的image名字。**\n\nhttp://your-server-ip\n\n就可以进入icloud了。\n\n## 推荐\n推荐大家看我以前写的hexo系列：\n\n[搭建hexo博客小记——hexo系列文章（一）](https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/)\n\n[利用Swiftype建立站内搜索——hexo系列文章（二）](https://heliublog.com/2016/05/14/Hexo%E5%88%A9%E7%94%A8Swiftype%E5%BB%BA%E7%AB%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/)\n\n[VPS+Hexo+Dropbox创建个人博客——hexo系列教程（三）](https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)","slug":"hexo在线编写博客","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59i000ojcm15nmbcq4q","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>这篇文章就是在线写出来的~</p>\n<p>从编辑、到生成，全部云上完成，妈妈再也不用担心我在别的电脑上没法写hexo了！</p>\n<a id=\"more\"></a>\n<p>效果如图：</p>\n<p><img src=\"http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705102.jpg\" alt=\"cloud9在线写博客\"></p>\n<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><p>搭建这个环境其实也并不麻烦啦，Cloud9我是用别人的镜像装的，所以简单很多。总体来说，大概需要这些东西：</p>\n<ul>\n<li>VPS一台</li>\n<li>Docker</li>\n<li>Cloud9</li>\n<li>nvm</li>\n<li>node(建议&gt;6.*)</li>\n<li>npm</li>\n<li>hexo</li>\n<li>apache(可选)</li>\n<li>rsync(可选)</li>\n<li>incrond（可选）</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"VPS篇\"><a href=\"#VPS篇\" class=\"headerlink\" title=\"VPS篇\"></a>VPS篇</h3><p>我VPS用的系统是CentOS6.8 x64</p>\n<h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><p>CentOS下安装Docker还是很简单的，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-io</span><br></pre></td></tr></table></figure></p>\n<p>安装完后启动docker服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Cloud9安装（Docker）\"><a href=\"#Cloud9安装（Docker）\" class=\"headerlink\" title=\"Cloud9安装（Docker）\"></a>Cloud9安装（Docker）</h3><h4 id=\"用VPS\"><a href=\"#用VPS\" class=\"headerlink\" title=\"用VPS\"></a>用VPS</h4><p><del><strong>注：</strong>dockerhub上现成的image是没有密码的，我可不希望别人谁都可以进来编辑我的博客，所以改一下Dockerfile，自己构建镜像。</del></p>\n<p>不要用这个办法了，dockerhub上有现成的镜像<code>sapk/cloud9</code>，地址<a href=\"https://hub.docker.com/r/sapk/cloud9/\" target=\"_blank\" rel=\"noopener\">点这里</a><br>想看旧方法，请<a href=\"https://heliublog.com/2017/05/10/hexo%E5%9C%A8%E7%BA%BF%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/#cloud9-docker\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sapk/cloud9</span><br><span class=\"line\"></span><br><span class=\"line\"># start with auth 将username,password替换成自己的账号密码</span><br><span class=\"line\">docker run -d -v your-path/workspace:/workspace -p 8181:8181 sapk/cloud9 --auth username:password</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://ip:8181\" target=\"_blank\" rel=\"noopener\">http://ip:8181</a>  查看效果吧！</p>\n<h4 id=\"用Docker云\"><a href=\"#用Docker云\" class=\"headerlink\" title=\"用Docker云\"></a>用Docker云</h4><p>这里仅以<a href=\"https://arukas.io/\" target=\"_blank\" rel=\"noopener\">Arukas</a>为例。<br>注册账号什么的就不说了。<br>直接创建应用，按照下图填写就行了：<br><img src=\"http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705112.jpg\" alt=\"Arukas\"><br>创建完成后启动应用，如果一次不成功就多试几次。<br>创建成功后，点击<code>Endpoint</code>后面的链接就可以进到你自己的cloud9了。</p>\n<p><strong>千万注意：我不知道这里的数据都储存在了哪里，所以一定要定时将自己的博文通过cloud9页面下载到自己的电脑上，以作备份。</strong></p>\n<h3 id=\"nvm、node、npm、hexo\"><a href=\"#nvm、node、npm、hexo\" class=\"headerlink\" title=\"nvm、node、npm、hexo\"></a>nvm、node、npm、hexo</h3><p>这些我们一起讲，因为都是在cloud9中安装的。</p>\n<h4 id=\"nvm、node、npm的安装\"><a href=\"#nvm、node、npm的安装\" class=\"headerlink\" title=\"nvm、node、npm的安装\"></a>nvm、node、npm的安装</h4><p>nvm是node的版本管理器。</p>\n<h5 id=\"首先安装必要的包\"><a href=\"#首先安装必要的包\" class=\"headerlink\" title=\"首先安装必要的包\"></a>首先安装必要的包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update  </span><br><span class=\"line\">sudo apt-get install build-essential libssl-dev</span><br></pre></td></tr></table></figure>\n<p><strong>注意：cloud9镜像是用ubuntu搭建的，所以要用apt-get，这个不是centos系统了，不要弄混了~</strong></p>\n<h5 id=\"安装nvm的脚本\"><a href=\"#安装nvm的脚本\" class=\"headerlink\" title=\"安装nvm的脚本\"></a>安装nvm的脚本</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用nvm安装并使用node6\"><a href=\"#使用nvm安装并使用node6\" class=\"headerlink\" title=\"使用nvm安装并使用node6\"></a>使用nvm安装并使用node6</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v6.10.3</span><br><span class=\"line\">nvm use v6.10.3</span><br><span class=\"line\">node -v</span><br><span class=\"line\"># v6.10.3  即表示安装成功</span><br></pre></td></tr></table></figure>\n<p>npm有了，就不必装了</p>\n<h4 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h4><blockquote>\n<p>这个不是本文重点，可以参考我以前的文章<br><a href=\"https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">搭建hexo博客小记——hexo系列文章（一）</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">mkdir hexo</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>好了，到此为止，整个在线环境就部署成功了，你可以<code>hexo d</code>来提交你的博客到github，当然，也可以用你的VPS来<br>做网页服务器。如果不想的话，下面的部分就不用看了。</p>\n<hr>\n<h3 id=\"apache安装\"><a href=\"#apache安装\" class=\"headerlink\" title=\"apache安装\"></a>apache安装</h3><p>由于我没学过前端，这里我用的是<a href=\"https://blog.linuxeye.com/31.html\" target=\"_blank\" rel=\"noopener\">lnmp一键安装包</a>，可以只装Apache，别的都不用装。</p>\n<p>将主机目录设置为<code>your-workspace/hexo/public</code></p>\n<p>我的这样做是不行，改了权限也不行，所以只能用默认的目录<code>/data/wwwroot/your-domain-name</code>然后同步两个文件夹了。<br>这是就用到最后两个工具：</p>\n<ul>\n<li>rsync用来同步</li>\n<li>incron用来监控文件改动</li>\n</ul>\n<h3 id=\"rsync的使用\"><a href=\"#rsync的使用\" class=\"headerlink\" title=\"rsync的使用\"></a>rsync的使用</h3><p>使用方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -av --delete /ressourcen /ressourcen_backup</span><br></pre></td></tr></table></figure></p>\n<p>这样当<code>/ressourcen</code>目录中的文件有变动、删除时，就会同步到<code>/ressourcen_backup</code>。</p>\n<p>我们要把这个文件写到一个脚本中，这样才能发挥他的作用（后述）。</p>\n<h3 id=\"incron\"><a href=\"#incron\" class=\"headerlink\" title=\"incron\"></a>incron</h3><p>incron的使用，我在前面的文章中也提到过<a href=\"https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#安装incron\" target=\"_blank\" rel=\"noopener\">VPS+Hexo+Dropbox创建个人博客</a></p>\n<p>安装incron<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install incron</span><br><span class=\"line\">service incrond start</span><br></pre></td></tr></table></figure></p>\n<p>用incron来监测文件夹变动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrontab -e</span><br><span class=\"line\"># 在其中添加：</span><br><span class=\"line\">your-path/hexo/public IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE your-path/runrsync.bash</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim runrsync.bash</span><br></pre></td></tr></table></figure>\n<p>runrsync.bash中写入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">exec 200&lt;$0</span><br><span class=\"line\">flock -n 200 || exit 1</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">rsync -av --delete /ressourcen /ressourcen_backup</span><br></pre></td></tr></table></figure></p>\n<p>赋予权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x runrsync.bash</span><br></pre></td></tr></table></figure></p>\n<p>这样当<code>hexo g</code>，<code>public</code>文件夹就会发生变动，此时incron检测到了文件变动，运行脚本<code>runrsync.bash</code>，实现两个文件夹的同步。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"时区问题\"><a href=\"#时区问题\" class=\"headerlink\" title=\"时区问题\"></a>时区问题</h3><p>若用国外主机，在<code>hexo new</code>时，会由于时区设置的问题，<code>date</code>显示的不是本地时间，可以更改时区：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -R  # 查看当前系统时区</span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  # 设置时区为东八区</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>我们写了很多脚本，运行了很多服务，机器重启之后都不会开起来，所以我们要加入开机自启，才能保证功能的正常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"></span><br><span class=\"line\"># 写入以下内容</span><br><span class=\"line\"></span><br><span class=\"line\"># Docker</span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\"># cloud9</span><br><span class=\"line\">docker start 3e9a55a</span><br><span class=\"line\"></span><br><span class=\"line\"># incrond</span><br><span class=\"line\">service incrond start</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"old\"><a href=\"#old\" class=\"headerlink\" title=\"old\"></a>old</h2><h3 id=\"cloud9-docker\"><a href=\"#cloud9-docker\" class=\"headerlink\" title=\"cloud9-docker\"></a>cloud9-docker</h3><p><strong>(此方法已过期)</strong><br>Dockerfile的github地址在这里：<a href=\"https://github.com/kdelfour/cloud9-docker\" target=\"_blank\" rel=\"noopener\">https://github.com/kdelfour/cloud9-docker</a></p>\n<p>我们将它克隆下来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir cloud9</span><br><span class=\"line\">cd cloud9</span><br><span class=\"line\">git clone https://github.com/kdelfour/cloud9-docker.git</span><br></pre></td></tr></table></figure>\n<p>然后就要改改文件了，方法如下：</p>\n<p>（我是参考别人的）</p>\n<blockquote>\n<p>参考issue页面<a href=\"https://github.com/kdelfour/cloud9-docker/issues/15\" target=\"_blank\" rel=\"noopener\">https://github.com/kdelfour/cloud9-docker/issues/15</a><br>pbelyaev的回答:<br>Just clone this repository and edit conf/cloud9.conf:</p>\n<p>[program:cloud9]<br>command = node /cloud9/server.js –listen 0.0.0.0 –port 80 –auth user:password -w /workspace<br>directory = /cloud9<br>user = root<br>autostart = true<br>autorestart = true<br>stdout_logfile = /var/log/supervisor/cloud9.log<br>stderr_logfile = /var/log/supervisor/cloud9_errors.log<br>environment = NODE_ENV=”production”<br>Then edit docker-compose.yml file:</p>\n<p>…<br>  cnine:<br>    build: ./dir/to/cloned/repository</p>\n</blockquote>\n<p>改好以后就可以构建镜像了，build命令格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t image_name Dockerfile_path</span><br></pre></td></tr></table></figure></p>\n<p>所以我们敲命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Dockerfile所在目录</span><br><span class=\"line\">docker build -t yourname/cloud9 .</span><br></pre></td></tr></table></figure></p>\n<p>构建完成后，我们来创建并启动容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d -p 80:80 -v /your-path/workspace/:/workspace/ yourname/cloud9 --auth user:password</span><br></pre></td></tr></table></figure>\n<p><strong>注：记得将user:password改为你自己的用户名:密码；yourname/cloud9是你自己起的image名字。</strong></p>\n<p><a href=\"http://your-server-ip\" target=\"_blank\" rel=\"noopener\">http://your-server-ip</a></p>\n<p>就可以进入icloud了。</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><p>推荐大家看我以前写的hexo系列：</p>\n<p><a href=\"https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">搭建hexo博客小记——hexo系列文章（一）</a></p>\n<p><a href=\"https://heliublog.com/2016/05/14/Hexo%E5%88%A9%E7%94%A8Swiftype%E5%BB%BA%E7%AB%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/\" target=\"_blank\" rel=\"noopener\">利用Swiftype建立站内搜索——hexo系列文章（二）</a></p>\n<p><a href=\"https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">VPS+Hexo+Dropbox创建个人博客——hexo系列教程（三）</a></p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>这篇文章就是在线写出来的~</p>\n<p>从编辑、到生成，全部云上完成，妈妈再也不用担心我在别的电脑上没法写hexo了！</p>","more":"<p>效果如图：</p>\n<p><img src=\"http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705102.jpg\" alt=\"cloud9在线写博客\"></p>\n<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><p>搭建这个环境其实也并不麻烦啦，Cloud9我是用别人的镜像装的，所以简单很多。总体来说，大概需要这些东西：</p>\n<ul>\n<li>VPS一台</li>\n<li>Docker</li>\n<li>Cloud9</li>\n<li>nvm</li>\n<li>node(建议&gt;6.*)</li>\n<li>npm</li>\n<li>hexo</li>\n<li>apache(可选)</li>\n<li>rsync(可选)</li>\n<li>incrond（可选）</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"VPS篇\"><a href=\"#VPS篇\" class=\"headerlink\" title=\"VPS篇\"></a>VPS篇</h3><p>我VPS用的系统是CentOS6.8 x64</p>\n<h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><p>CentOS下安装Docker还是很简单的，命令如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-io</span><br></pre></td></tr></table></figure></p>\n<p>安装完后启动docker服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service docker start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Cloud9安装（Docker）\"><a href=\"#Cloud9安装（Docker）\" class=\"headerlink\" title=\"Cloud9安装（Docker）\"></a>Cloud9安装（Docker）</h3><h4 id=\"用VPS\"><a href=\"#用VPS\" class=\"headerlink\" title=\"用VPS\"></a>用VPS</h4><p><del><strong>注：</strong>dockerhub上现成的image是没有密码的，我可不希望别人谁都可以进来编辑我的博客，所以改一下Dockerfile，自己构建镜像。</del></p>\n<p>不要用这个办法了，dockerhub上有现成的镜像<code>sapk/cloud9</code>，地址<a href=\"https://hub.docker.com/r/sapk/cloud9/\" target=\"_blank\" rel=\"noopener\">点这里</a><br>想看旧方法，请<a href=\"https://heliublog.com/2017/05/10/hexo%E5%9C%A8%E7%BA%BF%E7%BC%96%E5%86%99%E5%8D%9A%E5%AE%A2/#cloud9-docker\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull sapk/cloud9</span><br><span class=\"line\"></span><br><span class=\"line\"># start with auth 将username,password替换成自己的账号密码</span><br><span class=\"line\">docker run -d -v your-path/workspace:/workspace -p 8181:8181 sapk/cloud9 --auth username:password</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://ip:8181\" target=\"_blank\" rel=\"noopener\">http://ip:8181</a>  查看效果吧！</p>\n<h4 id=\"用Docker云\"><a href=\"#用Docker云\" class=\"headerlink\" title=\"用Docker云\"></a>用Docker云</h4><p>这里仅以<a href=\"https://arukas.io/\" target=\"_blank\" rel=\"noopener\">Arukas</a>为例。<br>注册账号什么的就不说了。<br>直接创建应用，按照下图填写就行了：<br><img src=\"http://op0n2nyjd.bkt.clouddn.com//nextd/posts/img1705112.jpg\" alt=\"Arukas\"><br>创建完成后启动应用，如果一次不成功就多试几次。<br>创建成功后，点击<code>Endpoint</code>后面的链接就可以进到你自己的cloud9了。</p>\n<p><strong>千万注意：我不知道这里的数据都储存在了哪里，所以一定要定时将自己的博文通过cloud9页面下载到自己的电脑上，以作备份。</strong></p>\n<h3 id=\"nvm、node、npm、hexo\"><a href=\"#nvm、node、npm、hexo\" class=\"headerlink\" title=\"nvm、node、npm、hexo\"></a>nvm、node、npm、hexo</h3><p>这些我们一起讲，因为都是在cloud9中安装的。</p>\n<h4 id=\"nvm、node、npm的安装\"><a href=\"#nvm、node、npm的安装\" class=\"headerlink\" title=\"nvm、node、npm的安装\"></a>nvm、node、npm的安装</h4><p>nvm是node的版本管理器。</p>\n<h5 id=\"首先安装必要的包\"><a href=\"#首先安装必要的包\" class=\"headerlink\" title=\"首先安装必要的包\"></a>首先安装必要的包</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update  </span><br><span class=\"line\">sudo apt-get install build-essential libssl-dev</span><br></pre></td></tr></table></figure>\n<p><strong>注意：cloud9镜像是用ubuntu搭建的，所以要用apt-get，这个不是centos系统了，不要弄混了~</strong></p>\n<h5 id=\"安装nvm的脚本\"><a href=\"#安装nvm的脚本\" class=\"headerlink\" title=\"安装nvm的脚本\"></a>安装nvm的脚本</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用nvm安装并使用node6\"><a href=\"#使用nvm安装并使用node6\" class=\"headerlink\" title=\"使用nvm安装并使用node6\"></a>使用nvm安装并使用node6</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install v6.10.3</span><br><span class=\"line\">nvm use v6.10.3</span><br><span class=\"line\">node -v</span><br><span class=\"line\"># v6.10.3  即表示安装成功</span><br></pre></td></tr></table></figure>\n<p>npm有了，就不必装了</p>\n<h4 id=\"hexo安装\"><a href=\"#hexo安装\" class=\"headerlink\" title=\"hexo安装\"></a>hexo安装</h4><blockquote>\n<p>这个不是本文重点，可以参考我以前的文章<br><a href=\"https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">搭建hexo博客小记——hexo系列文章（一）</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">mkdir hexo</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>好了，到此为止，整个在线环境就部署成功了，你可以<code>hexo d</code>来提交你的博客到github，当然，也可以用你的VPS来<br>做网页服务器。如果不想的话，下面的部分就不用看了。</p>\n<hr>\n<h3 id=\"apache安装\"><a href=\"#apache安装\" class=\"headerlink\" title=\"apache安装\"></a>apache安装</h3><p>由于我没学过前端，这里我用的是<a href=\"https://blog.linuxeye.com/31.html\" target=\"_blank\" rel=\"noopener\">lnmp一键安装包</a>，可以只装Apache，别的都不用装。</p>\n<p>将主机目录设置为<code>your-workspace/hexo/public</code></p>\n<p>我的这样做是不行，改了权限也不行，所以只能用默认的目录<code>/data/wwwroot/your-domain-name</code>然后同步两个文件夹了。<br>这是就用到最后两个工具：</p>\n<ul>\n<li>rsync用来同步</li>\n<li>incron用来监控文件改动</li>\n</ul>\n<h3 id=\"rsync的使用\"><a href=\"#rsync的使用\" class=\"headerlink\" title=\"rsync的使用\"></a>rsync的使用</h3><p>使用方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -av --delete /ressourcen /ressourcen_backup</span><br></pre></td></tr></table></figure></p>\n<p>这样当<code>/ressourcen</code>目录中的文件有变动、删除时，就会同步到<code>/ressourcen_backup</code>。</p>\n<p>我们要把这个文件写到一个脚本中，这样才能发挥他的作用（后述）。</p>\n<h3 id=\"incron\"><a href=\"#incron\" class=\"headerlink\" title=\"incron\"></a>incron</h3><p>incron的使用，我在前面的文章中也提到过<a href=\"https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#安装incron\" target=\"_blank\" rel=\"noopener\">VPS+Hexo+Dropbox创建个人博客</a></p>\n<p>安装incron<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install incron</span><br><span class=\"line\">service incrond start</span><br></pre></td></tr></table></figure></p>\n<p>用incron来监测文件夹变动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">incrontab -e</span><br><span class=\"line\"># 在其中添加：</span><br><span class=\"line\">your-path/hexo/public IN_MOVE,IN_MODIFY,IN_CREATE,IN_DELETE your-path/runrsync.bash</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim runrsync.bash</span><br></pre></td></tr></table></figure>\n<p>runrsync.bash中写入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">exec 200&lt;$0</span><br><span class=\"line\">flock -n 200 || exit 1</span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">rsync -av --delete /ressourcen /ressourcen_backup</span><br></pre></td></tr></table></figure></p>\n<p>赋予权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x runrsync.bash</span><br></pre></td></tr></table></figure></p>\n<p>这样当<code>hexo g</code>，<code>public</code>文件夹就会发生变动，此时incron检测到了文件变动，运行脚本<code>runrsync.bash</code>，实现两个文件夹的同步。</p>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><h3 id=\"时区问题\"><a href=\"#时区问题\" class=\"headerlink\" title=\"时区问题\"></a>时区问题</h3><p>若用国外主机，在<code>hexo new</code>时，会由于时区设置的问题，<code>date</code>显示的不是本地时间，可以更改时区：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">date -R  # 查看当前系统时区</span><br><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  # 设置时区为东八区</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>我们写了很多脚本，运行了很多服务，机器重启之后都不会开起来，所以我们要加入开机自启，才能保证功能的正常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/rc.d/rc.local</span><br><span class=\"line\"></span><br><span class=\"line\"># 写入以下内容</span><br><span class=\"line\"></span><br><span class=\"line\"># Docker</span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\"># cloud9</span><br><span class=\"line\">docker start 3e9a55a</span><br><span class=\"line\"></span><br><span class=\"line\"># incrond</span><br><span class=\"line\">service incrond start</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"old\"><a href=\"#old\" class=\"headerlink\" title=\"old\"></a>old</h2><h3 id=\"cloud9-docker\"><a href=\"#cloud9-docker\" class=\"headerlink\" title=\"cloud9-docker\"></a>cloud9-docker</h3><p><strong>(此方法已过期)</strong><br>Dockerfile的github地址在这里：<a href=\"https://github.com/kdelfour/cloud9-docker\" target=\"_blank\" rel=\"noopener\">https://github.com/kdelfour/cloud9-docker</a></p>\n<p>我们将它克隆下来：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir cloud9</span><br><span class=\"line\">cd cloud9</span><br><span class=\"line\">git clone https://github.com/kdelfour/cloud9-docker.git</span><br></pre></td></tr></table></figure>\n<p>然后就要改改文件了，方法如下：</p>\n<p>（我是参考别人的）</p>\n<blockquote>\n<p>参考issue页面<a href=\"https://github.com/kdelfour/cloud9-docker/issues/15\" target=\"_blank\" rel=\"noopener\">https://github.com/kdelfour/cloud9-docker/issues/15</a><br>pbelyaev的回答:<br>Just clone this repository and edit conf/cloud9.conf:</p>\n<p>[program:cloud9]<br>command = node /cloud9/server.js –listen 0.0.0.0 –port 80 –auth user:password -w /workspace<br>directory = /cloud9<br>user = root<br>autostart = true<br>autorestart = true<br>stdout_logfile = /var/log/supervisor/cloud9.log<br>stderr_logfile = /var/log/supervisor/cloud9_errors.log<br>environment = NODE_ENV=”production”<br>Then edit docker-compose.yml file:</p>\n<p>…<br>  cnine:<br>    build: ./dir/to/cloned/repository</p>\n</blockquote>\n<p>改好以后就可以构建镜像了，build命令格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t image_name Dockerfile_path</span><br></pre></td></tr></table></figure></p>\n<p>所以我们敲命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Dockerfile所在目录</span><br><span class=\"line\">docker build -t yourname/cloud9 .</span><br></pre></td></tr></table></figure></p>\n<p>构建完成后，我们来创建并启动容器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it -d -p 80:80 -v /your-path/workspace/:/workspace/ yourname/cloud9 --auth user:password</span><br></pre></td></tr></table></figure>\n<p><strong>注：记得将user:password改为你自己的用户名:密码；yourname/cloud9是你自己起的image名字。</strong></p>\n<p><a href=\"http://your-server-ip\" target=\"_blank\" rel=\"noopener\">http://your-server-ip</a></p>\n<p>就可以进入icloud了。</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><p>推荐大家看我以前写的hexo系列：</p>\n<p><a href=\"https://heliublog.com/2016/05/01/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%B0%8F%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">搭建hexo博客小记——hexo系列文章（一）</a></p>\n<p><a href=\"https://heliublog.com/2016/05/14/Hexo%E5%88%A9%E7%94%A8Swiftype%E5%BB%BA%E7%AB%8B%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/\" target=\"_blank\" rel=\"noopener\">利用Swiftype建立站内搜索——hexo系列文章（二）</a></p>\n<p><a href=\"https://heliublog.com/2016/05/01/VPS+Hexo+Dropbox%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">VPS+Hexo+Dropbox创建个人博客——hexo系列教程（三）</a></p>"},{"title":"win8.1与ubuntu双系统安装（硬盘安装）","date":"2016-05-13T12:27:14.000Z","keywords":"Ubuntu, 系统安装, Linux","_content":">部分内容引用自[http://blog.csdn.net/risingwonderland/article/details/37902777](http://blog.csdn.net/risingwonderland/article/details/37902777)\n>作者：RisingWonderland\n\n## 安装特点\n\n此方法可使用Win8.1,Ubuntu双系统，直接硬盘安装，无需制作U盘启动，很方便。\n\n## 准备\n\n* 下载Ubuntu镜像文件\n* 下载EasyBCD\n<!--more-->\n## 第一步，磁盘分区\n\n在Windows下，分割出一块分区，我分出来的是50G，建议在磁盘最后分。注意该分区不要增添盘符，而是让其保持“空闲”状态。\n\n## 第二步，NeoGrub\n\nWindows安装好EasyBCD软件，安好后，点击左侧“添加新条目”，再点击右侧“NeoGrub”选项卡，点击“安装”按钮。如下图：\n\n![](http://i.imgur.com/ygVfVWC.png)\n\n安装后，点击“配置”按钮，会打开一个名为“menu.lst”的记事本文件。清空文件内容，写入下面的文字：\n```\ntitle Install Ububtu\nroot (hd0,0)\nkernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8\ninitrd (hd0,0)/initrd.lz\n```\n如下图所示，注意空格：\n\n![](http://i.imgur.com/6tqyUBh.png)\n\n<p style=\"color:#DD2D2D\">**注意1**</p>文件第2、3、4行出现的“(hd0,0)”指向的是当前系统盘的位置，我这里是C盘。但假如C盘并非首个分区，而是第二个，需要修改为“(hd0,1)”，依此类推。\n<p style=\"color:#DD2D2D\">**注意2**</p>文件第三行，“ubuntu-14.04-desktop-amd64.iso”是我的Ubuntu系统镜像的文件名，将其修改为你的。\n<p style=\"color:#DD2D2D\">**注意3**</p>文件第三行出现了“vmlinuz.efi”，由于我安装的Ubuntu是64位操作系统，此处必须是“vmlinuz.efi”，不能缺少扩展名。\n\n## 第三步\n\n使用压缩工具打开Ubuntu镜像文件，将“.disk”文件夹和casper文件夹内的“initrd.lz”和“vmlinuz.efi”文件复制到C盘根目录，再将Ubuntu系统镜像文件复制到C盘根目录：\n\n![](http://i.imgur.com/XVxEkBK.png)\n\n## 第四步\n\n* 重启计算机，在启动界面看到操作系统选择项，选择“NeoGrub引导加载器”：\n![](http://o6hbo6ufa.bkt.clouddn.com/4.png)\n* 之后出现Ubuntu选择界面，选择“Install Ubuntu”。\n* 注意：此处有可能出现“File not found”错误，若出现，请转至原文博客查看：[http://blog.csdn.net/risingwonderland/article/details/37902777](http://blog.csdn.net/risingwonderland/article/details/37902777)\n\n## 第五步\n\n成功进入Ubuntu试用界面后，桌面上有两个文件。\n按Ctrl+Alt+T打开终端，输入`sudo umount –l /isodevice`，取消光盘驱动器挂载，否则在后面安装过程中可能会无限卡进度：\n\n<p style=\"color:#DD2D2D\">**注意**</p>注意空格，而且“-l”中的“l”是大写字母“L”的小写形态。不是数字1，也不是字母“i”。\n\n## 第六步\n\n双击桌面图标“安装Ubuntu14.04 LTS”，开始安装Ubuntu。\n如果你连接了网络，可以选择“安装中下载更新”，会延长安装时间，也可以在安装完Ubuntu系统后再下载安装更新。\n在“安装类型”界面会有多个安装选项：\n如果选择第一项，Ubuntu会自动进行分区安装，之后与Windows操作系统共存为双系统。对分区没有细致要求的用户选择此项即可，本教程即可直接跳过步骤Step7、Step8。如果要自定义分区，选择“其它选项”。此处，我选择“其他选项”。\n![](http://o6hbo6ufa.bkt.clouddn.com/5.png)\n\n我们要将Ubuntu安装在“空闲”分区内。选择“空闲”分区，再点击左下方红线处的加号，进行分区。\n\n下面说一下我的分区状况：\n\n总共50GB空闲分区，（分区时需要选择文件系统类型，选择“Ext4”即可）\n\n* 根目录“/”我分了8 GB；\n* 交换分区swap我分了2 GB；（类似于虚拟内存）\n* /boot我分了200 MB；（引导分区）\n* /home 10 GB;（存放用户文件）\n* /usr 30GB;（存放应用程序）\n\n## 第七步\n\n分区完成后，开始安装。\n如果你没有分配交换空间，系统会给出提示，跳过即可。\n\n## 安装成功\n\n安装完成后，选择重启。如果一切正常，可以看到如下图所示的Ubuntu样式的启动项选择界面：\n\n![](http://o6hbo6ufa.bkt.clouddn.com/6.png)\n\n## 可选操作\n\n在系统启动界面，Win8.1系统处于最后一项，如果需要让Win8.1处于第一项，可以这样设置：\n1. 进入Ubuntu系统。\n2. Ctrl+Alt+T打开终端，输入“sudo nautilus”，以root权限打开资源管理器。\n3. 找到“30_os-prober”文件，将其名称修改为“06_os-prober”即可：\n\n进入Windows系统，清除C盘下之前复制的文件。\n打开EasyBCD，在之前的“添加新条目”功能中，点击“删除”按钮，清除“NeoGrub”引导。\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/win8.1与ubuntu双系统安装（硬盘安装）.md","raw":"---\ntitle: win8.1与ubuntu双系统安装（硬盘安装）\ndate: 2016-05-13 20:27:14\ntags: [Ubuntu,系统安装,Linux]\ncategories: Linux\nkeywords: Ubuntu, 系统安装, Linux\n---\n>部分内容引用自[http://blog.csdn.net/risingwonderland/article/details/37902777](http://blog.csdn.net/risingwonderland/article/details/37902777)\n>作者：RisingWonderland\n\n## 安装特点\n\n此方法可使用Win8.1,Ubuntu双系统，直接硬盘安装，无需制作U盘启动，很方便。\n\n## 准备\n\n* 下载Ubuntu镜像文件\n* 下载EasyBCD\n<!--more-->\n## 第一步，磁盘分区\n\n在Windows下，分割出一块分区，我分出来的是50G，建议在磁盘最后分。注意该分区不要增添盘符，而是让其保持“空闲”状态。\n\n## 第二步，NeoGrub\n\nWindows安装好EasyBCD软件，安好后，点击左侧“添加新条目”，再点击右侧“NeoGrub”选项卡，点击“安装”按钮。如下图：\n\n![](http://i.imgur.com/ygVfVWC.png)\n\n安装后，点击“配置”按钮，会打开一个名为“menu.lst”的记事本文件。清空文件内容，写入下面的文字：\n```\ntitle Install Ububtu\nroot (hd0,0)\nkernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8\ninitrd (hd0,0)/initrd.lz\n```\n如下图所示，注意空格：\n\n![](http://i.imgur.com/6tqyUBh.png)\n\n<p style=\"color:#DD2D2D\">**注意1**</p>文件第2、3、4行出现的“(hd0,0)”指向的是当前系统盘的位置，我这里是C盘。但假如C盘并非首个分区，而是第二个，需要修改为“(hd0,1)”，依此类推。\n<p style=\"color:#DD2D2D\">**注意2**</p>文件第三行，“ubuntu-14.04-desktop-amd64.iso”是我的Ubuntu系统镜像的文件名，将其修改为你的。\n<p style=\"color:#DD2D2D\">**注意3**</p>文件第三行出现了“vmlinuz.efi”，由于我安装的Ubuntu是64位操作系统，此处必须是“vmlinuz.efi”，不能缺少扩展名。\n\n## 第三步\n\n使用压缩工具打开Ubuntu镜像文件，将“.disk”文件夹和casper文件夹内的“initrd.lz”和“vmlinuz.efi”文件复制到C盘根目录，再将Ubuntu系统镜像文件复制到C盘根目录：\n\n![](http://i.imgur.com/XVxEkBK.png)\n\n## 第四步\n\n* 重启计算机，在启动界面看到操作系统选择项，选择“NeoGrub引导加载器”：\n![](http://o6hbo6ufa.bkt.clouddn.com/4.png)\n* 之后出现Ubuntu选择界面，选择“Install Ubuntu”。\n* 注意：此处有可能出现“File not found”错误，若出现，请转至原文博客查看：[http://blog.csdn.net/risingwonderland/article/details/37902777](http://blog.csdn.net/risingwonderland/article/details/37902777)\n\n## 第五步\n\n成功进入Ubuntu试用界面后，桌面上有两个文件。\n按Ctrl+Alt+T打开终端，输入`sudo umount –l /isodevice`，取消光盘驱动器挂载，否则在后面安装过程中可能会无限卡进度：\n\n<p style=\"color:#DD2D2D\">**注意**</p>注意空格，而且“-l”中的“l”是大写字母“L”的小写形态。不是数字1，也不是字母“i”。\n\n## 第六步\n\n双击桌面图标“安装Ubuntu14.04 LTS”，开始安装Ubuntu。\n如果你连接了网络，可以选择“安装中下载更新”，会延长安装时间，也可以在安装完Ubuntu系统后再下载安装更新。\n在“安装类型”界面会有多个安装选项：\n如果选择第一项，Ubuntu会自动进行分区安装，之后与Windows操作系统共存为双系统。对分区没有细致要求的用户选择此项即可，本教程即可直接跳过步骤Step7、Step8。如果要自定义分区，选择“其它选项”。此处，我选择“其他选项”。\n![](http://o6hbo6ufa.bkt.clouddn.com/5.png)\n\n我们要将Ubuntu安装在“空闲”分区内。选择“空闲”分区，再点击左下方红线处的加号，进行分区。\n\n下面说一下我的分区状况：\n\n总共50GB空闲分区，（分区时需要选择文件系统类型，选择“Ext4”即可）\n\n* 根目录“/”我分了8 GB；\n* 交换分区swap我分了2 GB；（类似于虚拟内存）\n* /boot我分了200 MB；（引导分区）\n* /home 10 GB;（存放用户文件）\n* /usr 30GB;（存放应用程序）\n\n## 第七步\n\n分区完成后，开始安装。\n如果你没有分配交换空间，系统会给出提示，跳过即可。\n\n## 安装成功\n\n安装完成后，选择重启。如果一切正常，可以看到如下图所示的Ubuntu样式的启动项选择界面：\n\n![](http://o6hbo6ufa.bkt.clouddn.com/6.png)\n\n## 可选操作\n\n在系统启动界面，Win8.1系统处于最后一项，如果需要让Win8.1处于第一项，可以这样设置：\n1. 进入Ubuntu系统。\n2. Ctrl+Alt+T打开终端，输入“sudo nautilus”，以root权限打开资源管理器。\n3. 找到“30_os-prober”文件，将其名称修改为“06_os-prober”即可：\n\n进入Windows系统，清除C盘下之前复制的文件。\n打开EasyBCD，在之前的“添加新条目”功能中，点击“删除”按钮，清除“NeoGrub”引导。\n\n\n\n\n\n\n\n\n\n\n","slug":"win8.1与ubuntu双系统安装（硬盘安装）","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59k000ujcm1i8e5rmcv","content":"<blockquote>\n<p>部分内容引用自<a href=\"http://blog.csdn.net/risingwonderland/article/details/37902777\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/risingwonderland/article/details/37902777</a><br>作者：RisingWonderland</p>\n</blockquote>\n<h2 id=\"安装特点\"><a href=\"#安装特点\" class=\"headerlink\" title=\"安装特点\"></a>安装特点</h2><p>此方法可使用Win8.1,Ubuntu双系统，直接硬盘安装，无需制作U盘启动，很方便。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>下载Ubuntu镜像文件</li>\n<li>下载EasyBCD<a id=\"more\"></a>\n<h2 id=\"第一步，磁盘分区\"><a href=\"#第一步，磁盘分区\" class=\"headerlink\" title=\"第一步，磁盘分区\"></a>第一步，磁盘分区</h2></li>\n</ul>\n<p>在Windows下，分割出一块分区，我分出来的是50G，建议在磁盘最后分。注意该分区不要增添盘符，而是让其保持“空闲”状态。</p>\n<h2 id=\"第二步，NeoGrub\"><a href=\"#第二步，NeoGrub\" class=\"headerlink\" title=\"第二步，NeoGrub\"></a>第二步，NeoGrub</h2><p>Windows安装好EasyBCD软件，安好后，点击左侧“添加新条目”，再点击右侧“NeoGrub”选项卡，点击“安装”按钮。如下图：</p>\n<p><img src=\"http://i.imgur.com/ygVfVWC.png\" alt=\"\"></p>\n<p>安装后，点击“配置”按钮，会打开一个名为“menu.lst”的记事本文件。清空文件内容，写入下面的文字：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title Install Ububtu</span><br><span class=\"line\">root (hd0,0)</span><br><span class=\"line\">kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8</span><br><span class=\"line\">initrd (hd0,0)/initrd.lz</span><br></pre></td></tr></table></figure></p>\n<p>如下图所示，注意空格：</p>\n<p><img src=\"http://i.imgur.com/6tqyUBh.png\" alt=\"\"></p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意1</strong></p>文件第2、3、4行出现的“(hd0,0)”指向的是当前系统盘的位置，我这里是C盘。但假如C盘并非首个分区，而是第二个，需要修改为“(hd0,1)”，依此类推。<p></p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意2</strong></p>文件第三行，“ubuntu-14.04-desktop-amd64.iso”是我的Ubuntu系统镜像的文件名，将其修改为你的。<p></p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意3</strong></p>文件第三行出现了“vmlinuz.efi”，由于我安装的Ubuntu是64位操作系统，此处必须是“vmlinuz.efi”，不能缺少扩展名。<p></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>使用压缩工具打开Ubuntu镜像文件，将“.disk”文件夹和casper文件夹内的“initrd.lz”和“vmlinuz.efi”文件复制到C盘根目录，再将Ubuntu系统镜像文件复制到C盘根目录：</p>\n<p><img src=\"http://i.imgur.com/XVxEkBK.png\" alt=\"\"></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><ul>\n<li>重启计算机，在启动界面看到操作系统选择项，选择“NeoGrub引导加载器”：<br><img src=\"http://o6hbo6ufa.bkt.clouddn.com/4.png\" alt=\"\"></li>\n<li>之后出现Ubuntu选择界面，选择“Install Ubuntu”。</li>\n<li>注意：此处有可能出现“File not found”错误，若出现，请转至原文博客查看：<a href=\"http://blog.csdn.net/risingwonderland/article/details/37902777\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/risingwonderland/article/details/37902777</a></li>\n</ul>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>成功进入Ubuntu试用界面后，桌面上有两个文件。<br>按Ctrl+Alt+T打开终端，输入<code>sudo umount –l /isodevice</code>，取消光盘驱动器挂载，否则在后面安装过程中可能会无限卡进度：</p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意</strong></p>注意空格，而且“-l”中的“l”是大写字母“L”的小写形态。不是数字1，也不是字母“i”。<p></p>\n<h2 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h2><p>双击桌面图标“安装Ubuntu14.04 LTS”，开始安装Ubuntu。<br>如果你连接了网络，可以选择“安装中下载更新”，会延长安装时间，也可以在安装完Ubuntu系统后再下载安装更新。<br>在“安装类型”界面会有多个安装选项：<br>如果选择第一项，Ubuntu会自动进行分区安装，之后与Windows操作系统共存为双系统。对分区没有细致要求的用户选择此项即可，本教程即可直接跳过步骤Step7、Step8。如果要自定义分区，选择“其它选项”。此处，我选择“其他选项”。<br><img src=\"http://o6hbo6ufa.bkt.clouddn.com/5.png\" alt=\"\"></p>\n<p>我们要将Ubuntu安装在“空闲”分区内。选择“空闲”分区，再点击左下方红线处的加号，进行分区。</p>\n<p>下面说一下我的分区状况：</p>\n<p>总共50GB空闲分区，（分区时需要选择文件系统类型，选择“Ext4”即可）</p>\n<ul>\n<li>根目录“/”我分了8 GB；</li>\n<li>交换分区swap我分了2 GB；（类似于虚拟内存）</li>\n<li>/boot我分了200 MB；（引导分区）</li>\n<li>/home 10 GB;（存放用户文件）</li>\n<li>/usr 30GB;（存放应用程序）</li>\n</ul>\n<h2 id=\"第七步\"><a href=\"#第七步\" class=\"headerlink\" title=\"第七步\"></a>第七步</h2><p>分区完成后，开始安装。<br>如果你没有分配交换空间，系统会给出提示，跳过即可。</p>\n<h2 id=\"安装成功\"><a href=\"#安装成功\" class=\"headerlink\" title=\"安装成功\"></a>安装成功</h2><p>安装完成后，选择重启。如果一切正常，可以看到如下图所示的Ubuntu样式的启动项选择界面：</p>\n<p><img src=\"http://o6hbo6ufa.bkt.clouddn.com/6.png\" alt=\"\"></p>\n<h2 id=\"可选操作\"><a href=\"#可选操作\" class=\"headerlink\" title=\"可选操作\"></a>可选操作</h2><p>在系统启动界面，Win8.1系统处于最后一项，如果需要让Win8.1处于第一项，可以这样设置：</p>\n<ol>\n<li>进入Ubuntu系统。</li>\n<li>Ctrl+Alt+T打开终端，输入“sudo nautilus”，以root权限打开资源管理器。</li>\n<li>找到“30_os-prober”文件，将其名称修改为“06_os-prober”即可：</li>\n</ol>\n<p>进入Windows系统，清除C盘下之前复制的文件。<br>打开EasyBCD，在之前的“添加新条目”功能中，点击“删除”按钮，清除“NeoGrub”引导。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<blockquote>\n<p>部分内容引用自<a href=\"http://blog.csdn.net/risingwonderland/article/details/37902777\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/risingwonderland/article/details/37902777</a><br>作者：RisingWonderland</p>\n</blockquote>\n<h2 id=\"安装特点\"><a href=\"#安装特点\" class=\"headerlink\" title=\"安装特点\"></a>安装特点</h2><p>此方法可使用Win8.1,Ubuntu双系统，直接硬盘安装，无需制作U盘启动，很方便。</p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>下载Ubuntu镜像文件</li>\n<li>下载EasyBCD","more":"<h2 id=\"第一步，磁盘分区\"><a href=\"#第一步，磁盘分区\" class=\"headerlink\" title=\"第一步，磁盘分区\"></a>第一步，磁盘分区</h2></li>\n</ul>\n<p>在Windows下，分割出一块分区，我分出来的是50G，建议在磁盘最后分。注意该分区不要增添盘符，而是让其保持“空闲”状态。</p>\n<h2 id=\"第二步，NeoGrub\"><a href=\"#第二步，NeoGrub\" class=\"headerlink\" title=\"第二步，NeoGrub\"></a>第二步，NeoGrub</h2><p>Windows安装好EasyBCD软件，安好后，点击左侧“添加新条目”，再点击右侧“NeoGrub”选项卡，点击“安装”按钮。如下图：</p>\n<p><img src=\"http://i.imgur.com/ygVfVWC.png\" alt=\"\"></p>\n<p>安装后，点击“配置”按钮，会打开一个名为“menu.lst”的记事本文件。清空文件内容，写入下面的文字：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title Install Ububtu</span><br><span class=\"line\">root (hd0,0)</span><br><span class=\"line\">kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-14.04-desktop-amd64.iso ro quiet splash locale=zh_CN.UTF-8</span><br><span class=\"line\">initrd (hd0,0)/initrd.lz</span><br></pre></td></tr></table></figure></p>\n<p>如下图所示，注意空格：</p>\n<p><img src=\"http://i.imgur.com/6tqyUBh.png\" alt=\"\"></p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意1</strong></p>文件第2、3、4行出现的“(hd0,0)”指向的是当前系统盘的位置，我这里是C盘。但假如C盘并非首个分区，而是第二个，需要修改为“(hd0,1)”，依此类推。<p></p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意2</strong></p>文件第三行，“ubuntu-14.04-desktop-amd64.iso”是我的Ubuntu系统镜像的文件名，将其修改为你的。<p></p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意3</strong></p>文件第三行出现了“vmlinuz.efi”，由于我安装的Ubuntu是64位操作系统，此处必须是“vmlinuz.efi”，不能缺少扩展名。<p></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>使用压缩工具打开Ubuntu镜像文件，将“.disk”文件夹和casper文件夹内的“initrd.lz”和“vmlinuz.efi”文件复制到C盘根目录，再将Ubuntu系统镜像文件复制到C盘根目录：</p>\n<p><img src=\"http://i.imgur.com/XVxEkBK.png\" alt=\"\"></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><ul>\n<li>重启计算机，在启动界面看到操作系统选择项，选择“NeoGrub引导加载器”：<br><img src=\"http://o6hbo6ufa.bkt.clouddn.com/4.png\" alt=\"\"></li>\n<li>之后出现Ubuntu选择界面，选择“Install Ubuntu”。</li>\n<li>注意：此处有可能出现“File not found”错误，若出现，请转至原文博客查看：<a href=\"http://blog.csdn.net/risingwonderland/article/details/37902777\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/risingwonderland/article/details/37902777</a></li>\n</ul>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>成功进入Ubuntu试用界面后，桌面上有两个文件。<br>按Ctrl+Alt+T打开终端，输入<code>sudo umount –l /isodevice</code>，取消光盘驱动器挂载，否则在后面安装过程中可能会无限卡进度：</p>\n<p></p><p style=\"color:#DD2D2D\"><strong>注意</strong></p>注意空格，而且“-l”中的“l”是大写字母“L”的小写形态。不是数字1，也不是字母“i”。<p></p>\n<h2 id=\"第六步\"><a href=\"#第六步\" class=\"headerlink\" title=\"第六步\"></a>第六步</h2><p>双击桌面图标“安装Ubuntu14.04 LTS”，开始安装Ubuntu。<br>如果你连接了网络，可以选择“安装中下载更新”，会延长安装时间，也可以在安装完Ubuntu系统后再下载安装更新。<br>在“安装类型”界面会有多个安装选项：<br>如果选择第一项，Ubuntu会自动进行分区安装，之后与Windows操作系统共存为双系统。对分区没有细致要求的用户选择此项即可，本教程即可直接跳过步骤Step7、Step8。如果要自定义分区，选择“其它选项”。此处，我选择“其他选项”。<br><img src=\"http://o6hbo6ufa.bkt.clouddn.com/5.png\" alt=\"\"></p>\n<p>我们要将Ubuntu安装在“空闲”分区内。选择“空闲”分区，再点击左下方红线处的加号，进行分区。</p>\n<p>下面说一下我的分区状况：</p>\n<p>总共50GB空闲分区，（分区时需要选择文件系统类型，选择“Ext4”即可）</p>\n<ul>\n<li>根目录“/”我分了8 GB；</li>\n<li>交换分区swap我分了2 GB；（类似于虚拟内存）</li>\n<li>/boot我分了200 MB；（引导分区）</li>\n<li>/home 10 GB;（存放用户文件）</li>\n<li>/usr 30GB;（存放应用程序）</li>\n</ul>\n<h2 id=\"第七步\"><a href=\"#第七步\" class=\"headerlink\" title=\"第七步\"></a>第七步</h2><p>分区完成后，开始安装。<br>如果你没有分配交换空间，系统会给出提示，跳过即可。</p>\n<h2 id=\"安装成功\"><a href=\"#安装成功\" class=\"headerlink\" title=\"安装成功\"></a>安装成功</h2><p>安装完成后，选择重启。如果一切正常，可以看到如下图所示的Ubuntu样式的启动项选择界面：</p>\n<p><img src=\"http://o6hbo6ufa.bkt.clouddn.com/6.png\" alt=\"\"></p>\n<h2 id=\"可选操作\"><a href=\"#可选操作\" class=\"headerlink\" title=\"可选操作\"></a>可选操作</h2><p>在系统启动界面，Win8.1系统处于最后一项，如果需要让Win8.1处于第一项，可以这样设置：</p>\n<ol>\n<li>进入Ubuntu系统。</li>\n<li>Ctrl+Alt+T打开终端，输入“sudo nautilus”，以root权限打开资源管理器。</li>\n<li>找到“30_os-prober”文件，将其名称修改为“06_os-prober”即可：</li>\n</ol>\n<p>进入Windows系统，清除C盘下之前复制的文件。<br>打开EasyBCD，在之前的“添加新条目”功能中，点击“删除”按钮，清除“NeoGrub”引导。</p>"},{"title":"分享一些极好用的Chrome插件","date":"2017-05-10T10:06:12.000Z","_content":"\n## Bookmark Search\n### 引言\n你的Chrome书签是不是存了好多呢？当用到的时候却不知道放在那个目录了？哈哈哈，\n现在有福了，我们可以借助Chrome插件\"Bookmark Search\"来解决这个棘手的问题，\n有了它，我们就可以很方便的搜索以前存过的书签啦~~~！！！是不是很爽呢？\n\n### 插件效果\n![Bookmark Search 插件效果](/uploads/1705101.jpg)\n\n### 使用方法\n只要在地址栏输入`bm`然后敲空格或`Tab`键就可以进入书签索引了，然后在地址栏里敲进你想\n搜索的书签名就可以啦！\n\n## start.me\n### 引言\n其实严格说来这个也不算是插件吧，就是个网页。但是也会有个辅助的插件。\n\n### 插件效果\n效果呢，就是在你打开一个新Chrome标签页后，显示的不是8个格子和一个大大的搜索框，而是一个网页，这个网页上显示了你所有的书签。\n![start.me](/uploads/1705121.png)\n### 使用方法\n打开一个新的标签页就可以使用啦！","source":"_posts/分享一款极好用的Chrome插件.md","raw":"---\ntitle: 分享一些极好用的Chrome插件\ndate: 2017-05-10 18:06:12\ntags:\n  - Chrome\n  - 插件\ncategories: 软件\n---\n\n## Bookmark Search\n### 引言\n你的Chrome书签是不是存了好多呢？当用到的时候却不知道放在那个目录了？哈哈哈，\n现在有福了，我们可以借助Chrome插件\"Bookmark Search\"来解决这个棘手的问题，\n有了它，我们就可以很方便的搜索以前存过的书签啦~~~！！！是不是很爽呢？\n\n### 插件效果\n![Bookmark Search 插件效果](/uploads/1705101.jpg)\n\n### 使用方法\n只要在地址栏输入`bm`然后敲空格或`Tab`键就可以进入书签索引了，然后在地址栏里敲进你想\n搜索的书签名就可以啦！\n\n## start.me\n### 引言\n其实严格说来这个也不算是插件吧，就是个网页。但是也会有个辅助的插件。\n\n### 插件效果\n效果呢，就是在你打开一个新Chrome标签页后，显示的不是8个格子和一个大大的搜索框，而是一个网页，这个网页上显示了你所有的书签。\n![start.me](/uploads/1705121.png)\n### 使用方法\n打开一个新的标签页就可以使用啦！","slug":"分享一款极好用的Chrome插件","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59n000wjcm1f9xxh6sh","content":"<h2 id=\"Bookmark-Search\"><a href=\"#Bookmark-Search\" class=\"headerlink\" title=\"Bookmark Search\"></a>Bookmark Search</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>你的Chrome书签是不是存了好多呢？当用到的时候却不知道放在那个目录了？哈哈哈，<br>现在有福了，我们可以借助Chrome插件”Bookmark Search”来解决这个棘手的问题，<br>有了它，我们就可以很方便的搜索以前存过的书签啦~~~！！！是不是很爽呢？</p>\n<h3 id=\"插件效果\"><a href=\"#插件效果\" class=\"headerlink\" title=\"插件效果\"></a>插件效果</h3><p><img src=\"/uploads/1705101.jpg\" alt=\"Bookmark Search 插件效果\"></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>只要在地址栏输入<code>bm</code>然后敲空格或<code>Tab</code>键就可以进入书签索引了，然后在地址栏里敲进你想<br>搜索的书签名就可以啦！</p>\n<h2 id=\"start-me\"><a href=\"#start-me\" class=\"headerlink\" title=\"start.me\"></a>start.me</h2><h3 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>其实严格说来这个也不算是插件吧，就是个网页。但是也会有个辅助的插件。</p>\n<h3 id=\"插件效果-1\"><a href=\"#插件效果-1\" class=\"headerlink\" title=\"插件效果\"></a>插件效果</h3><p>效果呢，就是在你打开一个新Chrome标签页后，显示的不是8个格子和一个大大的搜索框，而是一个网页，这个网页上显示了你所有的书签。<br><img src=\"/uploads/1705121.png\" alt=\"start.me\"></p>\n<h3 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>打开一个新的标签页就可以使用啦！</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"Bookmark-Search\"><a href=\"#Bookmark-Search\" class=\"headerlink\" title=\"Bookmark Search\"></a>Bookmark Search</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>你的Chrome书签是不是存了好多呢？当用到的时候却不知道放在那个目录了？哈哈哈，<br>现在有福了，我们可以借助Chrome插件”Bookmark Search”来解决这个棘手的问题，<br>有了它，我们就可以很方便的搜索以前存过的书签啦~~~！！！是不是很爽呢？</p>\n<h3 id=\"插件效果\"><a href=\"#插件效果\" class=\"headerlink\" title=\"插件效果\"></a>插件效果</h3><p><img src=\"/uploads/1705101.jpg\" alt=\"Bookmark Search 插件效果\"></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>只要在地址栏输入<code>bm</code>然后敲空格或<code>Tab</code>键就可以进入书签索引了，然后在地址栏里敲进你想<br>搜索的书签名就可以啦！</p>\n<h2 id=\"start-me\"><a href=\"#start-me\" class=\"headerlink\" title=\"start.me\"></a>start.me</h2><h3 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>其实严格说来这个也不算是插件吧，就是个网页。但是也会有个辅助的插件。</p>\n<h3 id=\"插件效果-1\"><a href=\"#插件效果-1\" class=\"headerlink\" title=\"插件效果\"></a>插件效果</h3><p>效果呢，就是在你打开一个新Chrome标签页后，显示的不是8个格子和一个大大的搜索框，而是一个网页，这个网页上显示了你所有的书签。<br><img src=\"/uploads/1705121.png\" alt=\"start.me\"></p>\n<h3 id=\"使用方法-1\"><a href=\"#使用方法-1\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><p>打开一个新的标签页就可以使用啦！</p>\n"},{"title":"利用Dropbox备份vps中的文件","date":"2017-05-07T14:53:30.000Z","_content":">部分内容参考自[http://www.pythoner.com/324.html](http://www.pythoner.com/324.html)\n\n\n## 1.Linux 中安装Dropbox Uploader\n\n```\nwget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh\nchmod+x dropbox_uploader.sh\n./dropbox_uploader.sh\n```\n<!--more-->\n## 2.新建Dropbox App\n\n1. 需要通过浏览器访问 [https://www.dropbox.com/developers/apps](https://www.dropbox.com/developers/apps) 页面，并创建一个新的 Dropbox app。（具体根据上一步中脚本的提示），\"the type of access\"根据自己的要求选择。\n\n2. 创建好后，将会进入一个新的页面，复制里面的`app key` 和 `app secret`到终端窗口。完成后，dropboxploader.sh 将产生一个oAUTH网址，进去授权就OK了。\n3. 现在就可以上传文件了。我此处是做的leanote备份，命令如下。\n\n``` bash\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf\n```\n\n也可以做个脚本，定时运行\n\n脚本如下：\n\n```\n#!/bin/bash\n\ncd /root/bin\n#开始上传\n\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf\n\necho -e \"Backup Done!\"\n```\n\n定时运行方法：（添加crontab）\n\n```\ncrontab –e\n添加：\n30 3 * * * /root/bin/backup.sh\n这样，就可以每天凌晨3：30自动备份到Dropbox了。\n```\n\n\n","source":"_posts/利用Dropbox备份vps中的文件.md","raw":"---\ntitle: 利用Dropbox备份vps中的文件\ndate: 2017-05-07 22:53:30\ntags:\n  - VPS\n  - Dropbox\ncategories: Linux\n---\n>部分内容参考自[http://www.pythoner.com/324.html](http://www.pythoner.com/324.html)\n\n\n## 1.Linux 中安装Dropbox Uploader\n\n```\nwget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh\nchmod+x dropbox_uploader.sh\n./dropbox_uploader.sh\n```\n<!--more-->\n## 2.新建Dropbox App\n\n1. 需要通过浏览器访问 [https://www.dropbox.com/developers/apps](https://www.dropbox.com/developers/apps) 页面，并创建一个新的 Dropbox app。（具体根据上一步中脚本的提示），\"the type of access\"根据自己的要求选择。\n\n2. 创建好后，将会进入一个新的页面，复制里面的`app key` 和 `app secret`到终端窗口。完成后，dropboxploader.sh 将产生一个oAUTH网址，进去授权就OK了。\n3. 现在就可以上传文件了。我此处是做的leanote备份，命令如下。\n\n``` bash\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf\n```\n\n也可以做个脚本，定时运行\n\n脚本如下：\n\n```\n#!/bin/bash\n\ncd /root/bin\n#开始上传\n\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/\n./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf\n\necho -e \"Backup Done!\"\n```\n\n定时运行方法：（添加crontab）\n\n```\ncrontab –e\n添加：\n30 3 * * * /root/bin/backup.sh\n这样，就可以每天凌晨3：30自动备份到Dropbox了。\n```\n\n\n","slug":"利用Dropbox备份vps中的文件","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59q0011jcm1du1rq5wb","content":"<blockquote>\n<p>部分内容参考自<a href=\"http://www.pythoner.com/324.html\" target=\"_blank\" rel=\"noopener\">http://www.pythoner.com/324.html</a></p>\n</blockquote>\n<h2 id=\"1-Linux-中安装Dropbox-Uploader\"><a href=\"#1-Linux-中安装Dropbox-Uploader\" class=\"headerlink\" title=\"1.Linux 中安装Dropbox Uploader\"></a>1.Linux 中安装Dropbox Uploader</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh</span><br><span class=\"line\">chmod+x dropbox_uploader.sh</span><br><span class=\"line\">./dropbox_uploader.sh</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"2-新建Dropbox-App\"><a href=\"#2-新建Dropbox-App\" class=\"headerlink\" title=\"2.新建Dropbox App\"></a>2.新建Dropbox App</h2><ol>\n<li><p>需要通过浏览器访问 <a href=\"https://www.dropbox.com/developers/apps\" target=\"_blank\" rel=\"noopener\">https://www.dropbox.com/developers/apps</a> 页面，并创建一个新的 Dropbox app。（具体根据上一步中脚本的提示），”the type of access”根据自己的要求选择。</p>\n</li>\n<li><p>创建好后，将会进入一个新的页面，复制里面的<code>app key</code> 和 <code>app secret</code>到终端窗口。完成后，dropboxploader.sh 将产生一个oAUTH网址，进去授权就OK了。</p>\n</li>\n<li>现在就可以上传文件了。我此处是做的leanote备份，命令如下。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf</span><br></pre></td></tr></table></figure>\n<p>也可以做个脚本，定时运行</p>\n<p>脚本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">cd /root/bin</span><br><span class=\"line\">#开始上传</span><br><span class=\"line\"></span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;Backup Done!&quot;</span><br></pre></td></tr></table></figure>\n<p>定时运行方法：（添加crontab）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab –e</span><br><span class=\"line\">添加：</span><br><span class=\"line\">30 3 * * * /root/bin/backup.sh</span><br><span class=\"line\">这样，就可以每天凌晨3：30自动备份到Dropbox了。</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<blockquote>\n<p>部分内容参考自<a href=\"http://www.pythoner.com/324.html\" target=\"_blank\" rel=\"noopener\">http://www.pythoner.com/324.html</a></p>\n</blockquote>\n<h2 id=\"1-Linux-中安装Dropbox-Uploader\"><a href=\"#1-Linux-中安装Dropbox-Uploader\" class=\"headerlink\" title=\"1.Linux 中安装Dropbox Uploader\"></a>1.Linux 中安装Dropbox Uploader</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh</span><br><span class=\"line\">chmod+x dropbox_uploader.sh</span><br><span class=\"line\">./dropbox_uploader.sh</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"2-新建Dropbox-App\"><a href=\"#2-新建Dropbox-App\" class=\"headerlink\" title=\"2.新建Dropbox App\"></a>2.新建Dropbox App</h2><ol>\n<li><p>需要通过浏览器访问 <a href=\"https://www.dropbox.com/developers/apps\" target=\"_blank\" rel=\"noopener\">https://www.dropbox.com/developers/apps</a> 页面，并创建一个新的 Dropbox app。（具体根据上一步中脚本的提示），”the type of access”根据自己的要求选择。</p>\n</li>\n<li><p>创建好后，将会进入一个新的页面，复制里面的<code>app key</code> 和 <code>app secret</code>到终端窗口。完成后，dropboxploader.sh 将产生一个oAUTH网址，进去授权就OK了。</p>\n</li>\n<li>现在就可以上传文件了。我此处是做的leanote备份，命令如下。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf</span><br></pre></td></tr></table></figure>\n<p>也可以做个脚本，定时运行</p>\n<p>脚本如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">cd /root/bin</span><br><span class=\"line\">#开始上传</span><br><span class=\"line\"></span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/public/upload/ /leanote/public/upload/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/files/ /leanote/files/</span><br><span class=\"line\">./dropbox_uploader.sh upload /home/wwwroot/blog.heleou.com/web/leanote/conf/app.conf /leanote/conf/app.conf</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;Backup Done!&quot;</span><br></pre></td></tr></table></figure>\n<p>定时运行方法：（添加crontab）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab –e</span><br><span class=\"line\">添加：</span><br><span class=\"line\">30 3 * * * /root/bin/backup.sh</span><br><span class=\"line\">这样，就可以每天凌晨3：30自动备份到Dropbox了。</span><br></pre></td></tr></table></figure>"},{"title":"双系统win10访问ubuntu系统文件","date":"2018-12-06T08:06:15.000Z","keywords":"Linux, Ubuntu, win10, windows10, files, LinuxReader, 文件","_content":"## 前言\n有时候，我们会在电脑上装win10和ubuntu双系统，但是一般情况下在win10下是看不到ubuntu文件的，那么当我们需要查看ubuntu上文件的时候就只能重启系统了吗？不是的，这里可以给大家推荐一款软件。\n\n## 正题\n这款软件就是LinuxReader，它可以在windows系统中访问Ext 2/3/4, UFS2, HFS and ReiserFS/4格式的文件系统，很是方便。网址在这里：\n\n[https://www.diskinternals.com/linux-reader/](https://www.diskinternals.com/linux-reader/)\n\n## 使用介绍\n\n打开软件后全貌是这个样子：\n\n<img src=\"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/LinuxReader.png\" alt=\"LinuxReader\" width=\"100%\" align=\"middle\" />\n\n","source":"_posts/双系统win10访问ubuntu系统文件.md","raw":"---\ntitle: 双系统win10访问ubuntu系统文件\ndate: 2018-12-06 16:06:15\ncategories: Linux\ntags:\n  - Linux\n  - 双系统\nkeywords: Linux, Ubuntu, win10, windows10, files, LinuxReader, 文件\n\n---\n## 前言\n有时候，我们会在电脑上装win10和ubuntu双系统，但是一般情况下在win10下是看不到ubuntu文件的，那么当我们需要查看ubuntu上文件的时候就只能重启系统了吗？不是的，这里可以给大家推荐一款软件。\n\n## 正题\n这款软件就是LinuxReader，它可以在windows系统中访问Ext 2/3/4, UFS2, HFS and ReiserFS/4格式的文件系统，很是方便。网址在这里：\n\n[https://www.diskinternals.com/linux-reader/](https://www.diskinternals.com/linux-reader/)\n\n## 使用介绍\n\n打开软件后全貌是这个样子：\n\n<img src=\"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/LinuxReader.png\" alt=\"LinuxReader\" width=\"100%\" align=\"middle\" />\n\n","slug":"双系统win10访问ubuntu系统文件","published":1,"updated":"2018-12-06T08:43:39.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59t0014jcm1stimmsot","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候，我们会在电脑上装win10和ubuntu双系统，但是一般情况下在win10下是看不到ubuntu文件的，那么当我们需要查看ubuntu上文件的时候就只能重启系统了吗？不是的，这里可以给大家推荐一款软件。</p>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>这款软件就是LinuxReader，它可以在windows系统中访问Ext 2/3/4, UFS2, HFS and ReiserFS/4格式的文件系统，很是方便。网址在这里：</p>\n<p><a href=\"https://www.diskinternals.com/linux-reader/\" target=\"_blank\" rel=\"noopener\">https://www.diskinternals.com/linux-reader/</a></p>\n<h2 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h2><p>打开软件后全貌是这个样子：</p>\n<p><img src=\"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/LinuxReader.png\" alt=\"LinuxReader\" width=\"100%\" align=\"middle\"></p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有时候，我们会在电脑上装win10和ubuntu双系统，但是一般情况下在win10下是看不到ubuntu文件的，那么当我们需要查看ubuntu上文件的时候就只能重启系统了吗？不是的，这里可以给大家推荐一款软件。</p>\n<h2 id=\"正题\"><a href=\"#正题\" class=\"headerlink\" title=\"正题\"></a>正题</h2><p>这款软件就是LinuxReader，它可以在windows系统中访问Ext 2/3/4, UFS2, HFS and ReiserFS/4格式的文件系统，很是方便。网址在这里：</p>\n<p><a href=\"https://www.diskinternals.com/linux-reader/\" target=\"_blank\" rel=\"noopener\">https://www.diskinternals.com/linux-reader/</a></p>\n<h2 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h2><p>打开软件后全貌是这个样子：</p>\n<p><img src=\"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/LinuxReader.png\" alt=\"LinuxReader\" width=\"100%\" align=\"middle\"></p>\n"},{"title":"四步安装好支持tensorflow和C++的Jupyter-notebook","date":"2018-07-26T13:28:33.000Z","keywords":"tensorflow,c++,jupyter,notebook,jupyter-notebook,python","_content":"## 安装docker\n```bash\nsudo apt-get update # Ubuntu\nsudo apt-get install docker\n```\n## 使用docker安装tensorflow-jupyter\n> 参考网址        https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\n\n```bash\ndocker run -d --name jupyter \\\n-p 9001:8888 \\\n--user root \\\n-e GRANT_SUDO=yes \\\n-e NB_UID=1000 \\\n-e NB_GID=100 \\\n-v /home/jupyter:/home/jovyan/work \\\njupyter/tensorflow-notebook start-notebook.sh \\\n--NotebookApp.password='sha1:********'\n```\n\n参数解释：\n\n\\ 表示换行，把一条命令拆成多行以方便阅读\n-d 表示启动的容器进入到后台运行；\n-p 表示指定端口，这里把宿主机的 8888 端口映射到容器的 8888 端口；\n–user=root，允许运行 sudo；\n-e 指定 jovyan 用户相关权限 ID；\n–name 表示给启动的容器设定名字;\n-v 表示把宿主机的目录挂载到容器中。Jupyter Docker 的文档目录是 /home/jovyan/work，为了使得容器被销毁时，文档不受影响，将本地目录 /home/local/jupyter 挂载到 /home/jovyan/work;\n-NotebookApp.password 是登录的密码，可以在 Ipython 中使用如下命令生成：\n```python\nIn [1]: from notebook.auth import passwd\nIn [2]: passwd()\nEnter password: ****\nVerify password: ****\nOut[2]: 'sha1:********'\n```\n## 配置 Nginx\n按照以上网址安装好后可以通过http://ip:9001访问自己的jupyter notebook 。 但是带个端口号总是很别扭，所以这里通过Nginx来反向代理。\n步骤如下：\n通过 nginx -t 命令找到 Nginx 的配置文件地址。在 nginx.conf 文件中，新增如下内容：\n```bash\n    upstream notebook {\n        server localhost:8888;\n    }\n    server{\n        listen 80;\n        server_name yourdomain.com;\n    location / {\n        proxy_pass            http://notebook;\n        proxy_set_header      Host $host;\n        }\n\n    location ~ /api/kernels/ {\n        proxy_pass            http://notebook;\n        proxy_set_header      Host $host;\n        # websocket support\n        proxy_http_version    1.1;\n        proxy_set_header      Upgrade \"websocket\";\n        proxy_set_header      Connection \"Upgrade\";\n        proxy_read_timeout    86400;\n        }\n    location ~ /terminals/ {\n        proxy_pass            http://notebook;\n        proxy_set_header      Host $host;\n        # websocket support\n        proxy_http_version    1.1;\n        proxy_set_header      Upgrade \"websocket\";\n        proxy_set_header      Connection \"Upgrade\";\n        proxy_read_timeout    86400;\n        }\n    }\n```\n使用 `nginx -s reload` ，重启 Nginx 服务后生效。\n\n## 使用\nJupyter 的基本单元是编程 cell 组成，也就是一个 `In[ ]`:\n\nJupyter 有三种类型的 cells：`code`，`markdown cells`，`raw cells`，常用的是 code cells 和 markdown cells 类型。\n\nCells 状态分为命令模式和编辑模式，Enter 进入编辑模式，ESC 进入命令模式，命令模式和编辑模式下支持很多操作快捷键。\n\n常用命令模式快捷键：\n\n- y: 单元进入代码状态\n- m: 转入markdown状态\n- r：转入raw状态\n- a: 上方插入新单元\n- b：下方插入新单元\n- x：剪切选中单元\n- c: 复制选中单元\n- shift-v：粘贴到上方单元\n\n\n### 插入 Markdown\n直接输入 Markdown ，然后 Run 即可渲染结果。支持标题，文本，视频，图片等。\n\n### 插入 LaTeX 公式\n* 创建行内公式\n```\n$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n```\n* 块级公式\n```\n$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n```\n### 代码块\n可以直接在页面输出代码块，只需要在前后加上`代码块 `即可。\n\n### 嵌入图片\n```\nfrom IPython.display import Image\nImage(filename=\"yourpath.jpg\")\n```\n### 嵌入音乐\n可以嵌入本地音乐和网络音乐\n```\nfrom IPython.display import Audio\nAudio(filename=\"yourpath.wma\")\nfrom IPython.display import Audio\nAudio(url=\"http://yourpath.wma\")\n```\n### 嵌入本地视频\n```\nimport io\nimport base64\nfrom IPython.display import HTML\nvideo = io.open('/home/test.mp4', 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<video alt=\"test\" controls>\n     <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n     </video>'''.format(encoded.decode('ascii')))\n```\n### 嵌入网页\n```\nfrom IPython.display import IFrame\nIFrame('http://yourpath.com', width='100%', height=350)\n```\n### 嵌入链接\n```\nfrom IPython.display import FileLink\nFileLink('./test/a.ipynb')\n```\n### 魔法命令\n所有以 `%` 开头的方法，都是所谓的魔术方法 (Magic function)，也就是 IPython 内置的一些方法。需要注意的是，魔术方法有%和 %% 之分，比如 `%timeit` 和 `%% timeit`。在 IPython 中有专门的叫法，前者叫 `line magic` 后者叫`cell magic`。顾名思义，前者是专门针对一行的命令，后者针对多行的命令。\n通过 `%lsmagic`可以查看所有的 magic 命令，使用 `?` 或者 `??` 可以查看该命令的信息，后者可以查看源码。如： `%alias?`，会出现该方法的描述。\n\n## 参考\nhttps://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\nhttps://github.com/jupyter/docker-stacks\nhttp://www.cnblogs.com/giserliu/p/4997144.html\n\n\n-------\n## 安装C++环境\n> https://github.com/QuantStack/xeus-cling\n\n- 安装\nxeus-cling已经在linux和OS X平台上为conda包管理器打包。\n为确保安装正常，最好安装xeus-cling在新的conda环境中。还需要使用miniconda安装，因为使用完整的anaconda，您可能会与zeromq已安装在anaconda发行版中的库发生冲突。\n最安全的用法是创建一个以clingminiconda安装命名的环境\n\n```bash\nconda create -n cling\nsource activate cling\n```\n\n然后，您可以在此环境xeus-cling及其依赖项中安装\n```bash\nconda install xeus-cling notebook -c QuantStack -c conda-forge\n```\n或者，如果已经安装了所有依赖项，则可以直接从源安装它。\n```bash\ncmake -DCMAKE_INSTALL_PREFIX = your_conda_path -DCMAKE_INSTALL_LIBDIR = your_conda_path / lib\nmake && make install\n```\n\n-------\n## 附：Jupyter-kernels\n\nhttps://github.com/jupyter/jupyter/wiki/Jupyter-kernels","source":"_posts/四步安装好支持tensorflow和C++的Jupyter-notebook.md","raw":"---\ntitle: 四步安装好支持tensorflow和C++的Jupyter-notebook\ndate: 2018-07-26 21:28:33\ncategories: Docker\ntags:\n  - Linux\n  - VPS\n  - python\n  - c++\n  - jupyter-notebook\nkeywords: tensorflow,c++,jupyter,notebook,jupyter-notebook,python\n\n---\n## 安装docker\n```bash\nsudo apt-get update # Ubuntu\nsudo apt-get install docker\n```\n## 使用docker安装tensorflow-jupyter\n> 参考网址        https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\n\n```bash\ndocker run -d --name jupyter \\\n-p 9001:8888 \\\n--user root \\\n-e GRANT_SUDO=yes \\\n-e NB_UID=1000 \\\n-e NB_GID=100 \\\n-v /home/jupyter:/home/jovyan/work \\\njupyter/tensorflow-notebook start-notebook.sh \\\n--NotebookApp.password='sha1:********'\n```\n\n参数解释：\n\n\\ 表示换行，把一条命令拆成多行以方便阅读\n-d 表示启动的容器进入到后台运行；\n-p 表示指定端口，这里把宿主机的 8888 端口映射到容器的 8888 端口；\n–user=root，允许运行 sudo；\n-e 指定 jovyan 用户相关权限 ID；\n–name 表示给启动的容器设定名字;\n-v 表示把宿主机的目录挂载到容器中。Jupyter Docker 的文档目录是 /home/jovyan/work，为了使得容器被销毁时，文档不受影响，将本地目录 /home/local/jupyter 挂载到 /home/jovyan/work;\n-NotebookApp.password 是登录的密码，可以在 Ipython 中使用如下命令生成：\n```python\nIn [1]: from notebook.auth import passwd\nIn [2]: passwd()\nEnter password: ****\nVerify password: ****\nOut[2]: 'sha1:********'\n```\n## 配置 Nginx\n按照以上网址安装好后可以通过http://ip:9001访问自己的jupyter notebook 。 但是带个端口号总是很别扭，所以这里通过Nginx来反向代理。\n步骤如下：\n通过 nginx -t 命令找到 Nginx 的配置文件地址。在 nginx.conf 文件中，新增如下内容：\n```bash\n    upstream notebook {\n        server localhost:8888;\n    }\n    server{\n        listen 80;\n        server_name yourdomain.com;\n    location / {\n        proxy_pass            http://notebook;\n        proxy_set_header      Host $host;\n        }\n\n    location ~ /api/kernels/ {\n        proxy_pass            http://notebook;\n        proxy_set_header      Host $host;\n        # websocket support\n        proxy_http_version    1.1;\n        proxy_set_header      Upgrade \"websocket\";\n        proxy_set_header      Connection \"Upgrade\";\n        proxy_read_timeout    86400;\n        }\n    location ~ /terminals/ {\n        proxy_pass            http://notebook;\n        proxy_set_header      Host $host;\n        # websocket support\n        proxy_http_version    1.1;\n        proxy_set_header      Upgrade \"websocket\";\n        proxy_set_header      Connection \"Upgrade\";\n        proxy_read_timeout    86400;\n        }\n    }\n```\n使用 `nginx -s reload` ，重启 Nginx 服务后生效。\n\n## 使用\nJupyter 的基本单元是编程 cell 组成，也就是一个 `In[ ]`:\n\nJupyter 有三种类型的 cells：`code`，`markdown cells`，`raw cells`，常用的是 code cells 和 markdown cells 类型。\n\nCells 状态分为命令模式和编辑模式，Enter 进入编辑模式，ESC 进入命令模式，命令模式和编辑模式下支持很多操作快捷键。\n\n常用命令模式快捷键：\n\n- y: 单元进入代码状态\n- m: 转入markdown状态\n- r：转入raw状态\n- a: 上方插入新单元\n- b：下方插入新单元\n- x：剪切选中单元\n- c: 复制选中单元\n- shift-v：粘贴到上方单元\n\n\n### 插入 Markdown\n直接输入 Markdown ，然后 Run 即可渲染结果。支持标题，文本，视频，图片等。\n\n### 插入 LaTeX 公式\n* 创建行内公式\n```\n$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$\n```\n* 块级公式\n```\n$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\n```\n### 代码块\n可以直接在页面输出代码块，只需要在前后加上`代码块 `即可。\n\n### 嵌入图片\n```\nfrom IPython.display import Image\nImage(filename=\"yourpath.jpg\")\n```\n### 嵌入音乐\n可以嵌入本地音乐和网络音乐\n```\nfrom IPython.display import Audio\nAudio(filename=\"yourpath.wma\")\nfrom IPython.display import Audio\nAudio(url=\"http://yourpath.wma\")\n```\n### 嵌入本地视频\n```\nimport io\nimport base64\nfrom IPython.display import HTML\nvideo = io.open('/home/test.mp4', 'r+b').read()\nencoded = base64.b64encode(video)\nHTML(data='''<video alt=\"test\" controls>\n     <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n     </video>'''.format(encoded.decode('ascii')))\n```\n### 嵌入网页\n```\nfrom IPython.display import IFrame\nIFrame('http://yourpath.com', width='100%', height=350)\n```\n### 嵌入链接\n```\nfrom IPython.display import FileLink\nFileLink('./test/a.ipynb')\n```\n### 魔法命令\n所有以 `%` 开头的方法，都是所谓的魔术方法 (Magic function)，也就是 IPython 内置的一些方法。需要注意的是，魔术方法有%和 %% 之分，比如 `%timeit` 和 `%% timeit`。在 IPython 中有专门的叫法，前者叫 `line magic` 后者叫`cell magic`。顾名思义，前者是专门针对一行的命令，后者针对多行的命令。\n通过 `%lsmagic`可以查看所有的 magic 命令，使用 `?` 或者 `??` 可以查看该命令的信息，后者可以查看源码。如： `%alias?`，会出现该方法的描述。\n\n## 参考\nhttps://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\nhttps://github.com/jupyter/docker-stacks\nhttp://www.cnblogs.com/giserliu/p/4997144.html\n\n\n-------\n## 安装C++环境\n> https://github.com/QuantStack/xeus-cling\n\n- 安装\nxeus-cling已经在linux和OS X平台上为conda包管理器打包。\n为确保安装正常，最好安装xeus-cling在新的conda环境中。还需要使用miniconda安装，因为使用完整的anaconda，您可能会与zeromq已安装在anaconda发行版中的库发生冲突。\n最安全的用法是创建一个以clingminiconda安装命名的环境\n\n```bash\nconda create -n cling\nsource activate cling\n```\n\n然后，您可以在此环境xeus-cling及其依赖项中安装\n```bash\nconda install xeus-cling notebook -c QuantStack -c conda-forge\n```\n或者，如果已经安装了所有依赖项，则可以直接从源安装它。\n```bash\ncmake -DCMAKE_INSTALL_PREFIX = your_conda_path -DCMAKE_INSTALL_LIBDIR = your_conda_path / lib\nmake && make install\n```\n\n-------\n## 附：Jupyter-kernels\n\nhttps://github.com/jupyter/jupyter/wiki/Jupyter-kernels","slug":"四步安装好支持tensorflow和C++的Jupyter-notebook","published":1,"updated":"2018-07-26T14:24:11.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59v0017jcm10den83v5","content":"<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update <span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">sudo apt-get install docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用docker安装tensorflow-jupyter\"><a href=\"#使用docker安装tensorflow-jupyter\" class=\"headerlink\" title=\"使用docker安装tensorflow-jupyter\"></a>使用docker安装tensorflow-jupyter</h2><blockquote>\n<p>参考网址        <a href=\"https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\" target=\"_blank\" rel=\"noopener\">https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jupyter \\</span><br><span class=\"line\">-p 9001:8888 \\</span><br><span class=\"line\">--user root \\</span><br><span class=\"line\">-e GRANT_SUDO=yes \\</span><br><span class=\"line\">-e NB_UID=1000 \\</span><br><span class=\"line\">-e NB_GID=100 \\</span><br><span class=\"line\">-v /home/jupyter:/home/jovyan/work \\</span><br><span class=\"line\">jupyter/tensorflow-notebook start-notebook.sh \\</span><br><span class=\"line\">--NotebookApp.password=<span class=\"string\">'sha1:********'</span></span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<p>\\ 表示换行，把一条命令拆成多行以方便阅读<br>-d 表示启动的容器进入到后台运行；<br>-p 表示指定端口，这里把宿主机的 8888 端口映射到容器的 8888 端口；<br>–user=root，允许运行 sudo；<br>-e 指定 jovyan 用户相关权限 ID；<br>–name 表示给启动的容器设定名字;<br>-v 表示把宿主机的目录挂载到容器中。Jupyter Docker 的文档目录是 /home/jovyan/work，为了使得容器被销毁时，文档不受影响，将本地目录 /home/local/jupyter 挂载到 /home/jovyan/work;<br>-NotebookApp.password 是登录的密码，可以在 Ipython 中使用如下命令生成：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\">In [<span class=\"number\">2</span>]: passwd()</span><br><span class=\"line\">Enter password: ****</span><br><span class=\"line\">Verify password: ****</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"string\">'sha1:********'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置-Nginx\"><a href=\"#配置-Nginx\" class=\"headerlink\" title=\"配置 Nginx\"></a>配置 Nginx</h2><p>按照以上网址安装好后可以通过<a href=\"http://ip:9001访问自己的jupyter\" target=\"_blank\" rel=\"noopener\">http://ip:9001访问自己的jupyter</a> notebook 。 但是带个端口号总是很别扭，所以这里通过Nginx来反向代理。<br>步骤如下：<br>通过 nginx -t 命令找到 Nginx 的配置文件地址。在 nginx.conf 文件中，新增如下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream notebook &#123;</span><br><span class=\"line\">    server localhost:8888;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name yourdomain.com;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass            http://notebook;</span><br><span class=\"line\">    proxy_set_header      Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ /api/kernels/ &#123;</span><br><span class=\"line\">    proxy_pass            http://notebook;</span><br><span class=\"line\">    proxy_set_header      Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    <span class=\"comment\"># websocket support</span></span><br><span class=\"line\">    proxy_http_version    1.1;</span><br><span class=\"line\">    proxy_set_header      Upgrade <span class=\"string\">\"websocket\"</span>;</span><br><span class=\"line\">    proxy_set_header      Connection <span class=\"string\">\"Upgrade\"</span>;</span><br><span class=\"line\">    proxy_read_timeout    86400;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">location ~ /terminals/ &#123;</span><br><span class=\"line\">    proxy_pass            http://notebook;</span><br><span class=\"line\">    proxy_set_header      Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    <span class=\"comment\"># websocket support</span></span><br><span class=\"line\">    proxy_http_version    1.1;</span><br><span class=\"line\">    proxy_set_header      Upgrade <span class=\"string\">\"websocket\"</span>;</span><br><span class=\"line\">    proxy_set_header      Connection <span class=\"string\">\"Upgrade\"</span>;</span><br><span class=\"line\">    proxy_read_timeout    86400;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>nginx -s reload</code> ，重启 Nginx 服务后生效。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Jupyter 的基本单元是编程 cell 组成，也就是一个 <code>In[ ]</code>:</p>\n<p>Jupyter 有三种类型的 cells：<code>code</code>，<code>markdown cells</code>，<code>raw cells</code>，常用的是 code cells 和 markdown cells 类型。</p>\n<p>Cells 状态分为命令模式和编辑模式，Enter 进入编辑模式，ESC 进入命令模式，命令模式和编辑模式下支持很多操作快捷键。</p>\n<p>常用命令模式快捷键：</p>\n<ul>\n<li>y: 单元进入代码状态</li>\n<li>m: 转入markdown状态</li>\n<li>r：转入raw状态</li>\n<li>a: 上方插入新单元</li>\n<li>b：下方插入新单元</li>\n<li>x：剪切选中单元</li>\n<li>c: 复制选中单元</li>\n<li>shift-v：粘贴到上方单元</li>\n</ul>\n<h3 id=\"插入-Markdown\"><a href=\"#插入-Markdown\" class=\"headerlink\" title=\"插入 Markdown\"></a>插入 Markdown</h3><p>直接输入 Markdown ，然后 Run 即可渲染结果。支持标题，文本，视频，图片等。</p>\n<h3 id=\"插入-LaTeX-公式\"><a href=\"#插入-LaTeX-公式\" class=\"headerlink\" title=\"插入 LaTeX 公式\"></a>插入 LaTeX 公式</h3><ul>\n<li><p>创建行内公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>块级公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>可以直接在页面输出代码块，只需要在前后加上<code>代码块</code>即可。</p>\n<h3 id=\"嵌入图片\"><a href=\"#嵌入图片\" class=\"headerlink\" title=\"嵌入图片\"></a>嵌入图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import Image</span><br><span class=\"line\">Image(filename=&quot;yourpath.jpg&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入音乐\"><a href=\"#嵌入音乐\" class=\"headerlink\" title=\"嵌入音乐\"></a>嵌入音乐</h3><p>可以嵌入本地音乐和网络音乐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import Audio</span><br><span class=\"line\">Audio(filename=&quot;yourpath.wma&quot;)</span><br><span class=\"line\">from IPython.display import Audio</span><br><span class=\"line\">Audio(url=&quot;http://yourpath.wma&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"嵌入本地视频\"><a href=\"#嵌入本地视频\" class=\"headerlink\" title=\"嵌入本地视频\"></a>嵌入本地视频</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io</span><br><span class=\"line\">import base64</span><br><span class=\"line\">from IPython.display import HTML</span><br><span class=\"line\">video = io.open(&apos;/home/test.mp4&apos;, &apos;r+b&apos;).read()</span><br><span class=\"line\">encoded = base64.b64encode(video)</span><br><span class=\"line\">HTML(data=&apos;&apos;&apos;&lt;video alt=&quot;test&quot; controls&gt;</span><br><span class=\"line\">     &lt;source src=&quot;data:video/mp4;base64,&#123;0&#125;&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class=\"line\">     &lt;/video&gt;&apos;&apos;&apos;.format(encoded.decode(&apos;ascii&apos;)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入网页\"><a href=\"#嵌入网页\" class=\"headerlink\" title=\"嵌入网页\"></a>嵌入网页</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import IFrame</span><br><span class=\"line\">IFrame(&apos;http://yourpath.com&apos;, width=&apos;100%&apos;, height=350)</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入链接\"><a href=\"#嵌入链接\" class=\"headerlink\" title=\"嵌入链接\"></a>嵌入链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import FileLink</span><br><span class=\"line\">FileLink(&apos;./test/a.ipynb&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"魔法命令\"><a href=\"#魔法命令\" class=\"headerlink\" title=\"魔法命令\"></a>魔法命令</h3><p>所有以 <code>%</code> 开头的方法，都是所谓的魔术方法 (Magic function)，也就是 IPython 内置的一些方法。需要注意的是，魔术方法有%和 %% 之分，比如 <code>%timeit</code> 和 <code>%% timeit</code>。在 IPython 中有专门的叫法，前者叫 <code>line magic</code> 后者叫<code>cell magic</code>。顾名思义，前者是专门针对一行的命令，后者针对多行的命令。<br>通过 <code>%lsmagic</code>可以查看所有的 magic 命令，使用 <code>?</code> 或者 <code>??</code> 可以查看该命令的信息，后者可以查看源码。如： <code>%alias?</code>，会出现该方法的描述。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\" target=\"_blank\" rel=\"noopener\">https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</a><br><a href=\"https://github.com/jupyter/docker-stacks\" target=\"_blank\" rel=\"noopener\">https://github.com/jupyter/docker-stacks</a><br><a href=\"http://www.cnblogs.com/giserliu/p/4997144.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/giserliu/p/4997144.html</a></p>\n<hr>\n<h2 id=\"安装C-环境\"><a href=\"#安装C-环境\" class=\"headerlink\" title=\"安装C++环境\"></a>安装C++环境</h2><blockquote>\n<p><a href=\"https://github.com/QuantStack/xeus-cling\" target=\"_blank\" rel=\"noopener\">https://github.com/QuantStack/xeus-cling</a></p>\n</blockquote>\n<ul>\n<li>安装<br>xeus-cling已经在linux和OS X平台上为conda包管理器打包。<br>为确保安装正常，最好安装xeus-cling在新的conda环境中。还需要使用miniconda安装，因为使用完整的anaconda，您可能会与zeromq已安装在anaconda发行版中的库发生冲突。<br>最安全的用法是创建一个以clingminiconda安装命名的环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n cling</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate cling</span><br></pre></td></tr></table></figure>\n<p>然后，您可以在此环境xeus-cling及其依赖项中安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install xeus-cling notebook -c QuantStack -c conda-forge</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果已经安装了所有依赖项，则可以直接从源安装它。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX = your_conda_path -DCMAKE_INSTALL_LIBDIR = your_conda_path / lib</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"附：Jupyter-kernels\"><a href=\"#附：Jupyter-kernels\" class=\"headerlink\" title=\"附：Jupyter-kernels\"></a>附：Jupyter-kernels</h2><p><a href=\"https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\" target=\"_blank\" rel=\"noopener\">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a></p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update <span class=\"comment\"># Ubuntu</span></span><br><span class=\"line\">sudo apt-get install docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用docker安装tensorflow-jupyter\"><a href=\"#使用docker安装tensorflow-jupyter\" class=\"headerlink\" title=\"使用docker安装tensorflow-jupyter\"></a>使用docker安装tensorflow-jupyter</h2><blockquote>\n<p>参考网址        <a href=\"https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\" target=\"_blank\" rel=\"noopener\">https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jupyter \\</span><br><span class=\"line\">-p 9001:8888 \\</span><br><span class=\"line\">--user root \\</span><br><span class=\"line\">-e GRANT_SUDO=yes \\</span><br><span class=\"line\">-e NB_UID=1000 \\</span><br><span class=\"line\">-e NB_GID=100 \\</span><br><span class=\"line\">-v /home/jupyter:/home/jovyan/work \\</span><br><span class=\"line\">jupyter/tensorflow-notebook start-notebook.sh \\</span><br><span class=\"line\">--NotebookApp.password=<span class=\"string\">'sha1:********'</span></span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<p>\\ 表示换行，把一条命令拆成多行以方便阅读<br>-d 表示启动的容器进入到后台运行；<br>-p 表示指定端口，这里把宿主机的 8888 端口映射到容器的 8888 端口；<br>–user=root，允许运行 sudo；<br>-e 指定 jovyan 用户相关权限 ID；<br>–name 表示给启动的容器设定名字;<br>-v 表示把宿主机的目录挂载到容器中。Jupyter Docker 的文档目录是 /home/jovyan/work，为了使得容器被销毁时，文档不受影响，将本地目录 /home/local/jupyter 挂载到 /home/jovyan/work;<br>-NotebookApp.password 是登录的密码，可以在 Ipython 中使用如下命令生成：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">from</span> notebook.auth <span class=\"keyword\">import</span> passwd</span><br><span class=\"line\">In [<span class=\"number\">2</span>]: passwd()</span><br><span class=\"line\">Enter password: ****</span><br><span class=\"line\">Verify password: ****</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]: <span class=\"string\">'sha1:********'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置-Nginx\"><a href=\"#配置-Nginx\" class=\"headerlink\" title=\"配置 Nginx\"></a>配置 Nginx</h2><p>按照以上网址安装好后可以通过<a href=\"http://ip:9001访问自己的jupyter\" target=\"_blank\" rel=\"noopener\">http://ip:9001访问自己的jupyter</a> notebook 。 但是带个端口号总是很别扭，所以这里通过Nginx来反向代理。<br>步骤如下：<br>通过 nginx -t 命令找到 Nginx 的配置文件地址。在 nginx.conf 文件中，新增如下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream notebook &#123;</span><br><span class=\"line\">    server localhost:8888;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name yourdomain.com;</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass            http://notebook;</span><br><span class=\"line\">    proxy_set_header      Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location ~ /api/kernels/ &#123;</span><br><span class=\"line\">    proxy_pass            http://notebook;</span><br><span class=\"line\">    proxy_set_header      Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    <span class=\"comment\"># websocket support</span></span><br><span class=\"line\">    proxy_http_version    1.1;</span><br><span class=\"line\">    proxy_set_header      Upgrade <span class=\"string\">\"websocket\"</span>;</span><br><span class=\"line\">    proxy_set_header      Connection <span class=\"string\">\"Upgrade\"</span>;</span><br><span class=\"line\">    proxy_read_timeout    86400;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">location ~ /terminals/ &#123;</span><br><span class=\"line\">    proxy_pass            http://notebook;</span><br><span class=\"line\">    proxy_set_header      Host <span class=\"variable\">$host</span>;</span><br><span class=\"line\">    <span class=\"comment\"># websocket support</span></span><br><span class=\"line\">    proxy_http_version    1.1;</span><br><span class=\"line\">    proxy_set_header      Upgrade <span class=\"string\">\"websocket\"</span>;</span><br><span class=\"line\">    proxy_set_header      Connection <span class=\"string\">\"Upgrade\"</span>;</span><br><span class=\"line\">    proxy_read_timeout    86400;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用 <code>nginx -s reload</code> ，重启 Nginx 服务后生效。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>Jupyter 的基本单元是编程 cell 组成，也就是一个 <code>In[ ]</code>:</p>\n<p>Jupyter 有三种类型的 cells：<code>code</code>，<code>markdown cells</code>，<code>raw cells</code>，常用的是 code cells 和 markdown cells 类型。</p>\n<p>Cells 状态分为命令模式和编辑模式，Enter 进入编辑模式，ESC 进入命令模式，命令模式和编辑模式下支持很多操作快捷键。</p>\n<p>常用命令模式快捷键：</p>\n<ul>\n<li>y: 单元进入代码状态</li>\n<li>m: 转入markdown状态</li>\n<li>r：转入raw状态</li>\n<li>a: 上方插入新单元</li>\n<li>b：下方插入新单元</li>\n<li>x：剪切选中单元</li>\n<li>c: 复制选中单元</li>\n<li>shift-v：粘贴到上方单元</li>\n</ul>\n<h3 id=\"插入-Markdown\"><a href=\"#插入-Markdown\" class=\"headerlink\" title=\"插入 Markdown\"></a>插入 Markdown</h3><p>直接输入 Markdown ，然后 Run 即可渲染结果。支持标题，文本，视频，图片等。</p>\n<h3 id=\"插入-LaTeX-公式\"><a href=\"#插入-LaTeX-公式\" class=\"headerlink\" title=\"插入 LaTeX 公式\"></a>插入 LaTeX 公式</h3><ul>\n<li><p>创建行内公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>块级公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>可以直接在页面输出代码块，只需要在前后加上<code>代码块</code>即可。</p>\n<h3 id=\"嵌入图片\"><a href=\"#嵌入图片\" class=\"headerlink\" title=\"嵌入图片\"></a>嵌入图片</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import Image</span><br><span class=\"line\">Image(filename=&quot;yourpath.jpg&quot;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入音乐\"><a href=\"#嵌入音乐\" class=\"headerlink\" title=\"嵌入音乐\"></a>嵌入音乐</h3><p>可以嵌入本地音乐和网络音乐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import Audio</span><br><span class=\"line\">Audio(filename=&quot;yourpath.wma&quot;)</span><br><span class=\"line\">from IPython.display import Audio</span><br><span class=\"line\">Audio(url=&quot;http://yourpath.wma&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"嵌入本地视频\"><a href=\"#嵌入本地视频\" class=\"headerlink\" title=\"嵌入本地视频\"></a>嵌入本地视频</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import io</span><br><span class=\"line\">import base64</span><br><span class=\"line\">from IPython.display import HTML</span><br><span class=\"line\">video = io.open(&apos;/home/test.mp4&apos;, &apos;r+b&apos;).read()</span><br><span class=\"line\">encoded = base64.b64encode(video)</span><br><span class=\"line\">HTML(data=&apos;&apos;&apos;&lt;video alt=&quot;test&quot; controls&gt;</span><br><span class=\"line\">     &lt;source src=&quot;data:video/mp4;base64,&#123;0&#125;&quot; type=&quot;video/mp4&quot; /&gt;</span><br><span class=\"line\">     &lt;/video&gt;&apos;&apos;&apos;.format(encoded.decode(&apos;ascii&apos;)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入网页\"><a href=\"#嵌入网页\" class=\"headerlink\" title=\"嵌入网页\"></a>嵌入网页</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import IFrame</span><br><span class=\"line\">IFrame(&apos;http://yourpath.com&apos;, width=&apos;100%&apos;, height=350)</span><br></pre></td></tr></table></figure>\n<h3 id=\"嵌入链接\"><a href=\"#嵌入链接\" class=\"headerlink\" title=\"嵌入链接\"></a>嵌入链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from IPython.display import FileLink</span><br><span class=\"line\">FileLink(&apos;./test/a.ipynb&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"魔法命令\"><a href=\"#魔法命令\" class=\"headerlink\" title=\"魔法命令\"></a>魔法命令</h3><p>所有以 <code>%</code> 开头的方法，都是所谓的魔术方法 (Magic function)，也就是 IPython 内置的一些方法。需要注意的是，魔术方法有%和 %% 之分，比如 <code>%timeit</code> 和 <code>%% timeit</code>。在 IPython 中有专门的叫法，前者叫 <code>line magic</code> 后者叫<code>cell magic</code>。顾名思义，前者是专门针对一行的命令，后者针对多行的命令。<br>通过 <code>%lsmagic</code>可以查看所有的 magic 命令，使用 <code>?</code> 或者 <code>??</code> 可以查看该命令的信息，后者可以查看源码。如： <code>%alias?</code>，会出现该方法的描述。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html\" target=\"_blank\" rel=\"noopener\">https://www.chenshaowen.com/blog/interactive-notebook-jupyter.html</a><br><a href=\"https://github.com/jupyter/docker-stacks\" target=\"_blank\" rel=\"noopener\">https://github.com/jupyter/docker-stacks</a><br><a href=\"http://www.cnblogs.com/giserliu/p/4997144.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/giserliu/p/4997144.html</a></p>\n<hr>\n<h2 id=\"安装C-环境\"><a href=\"#安装C-环境\" class=\"headerlink\" title=\"安装C++环境\"></a>安装C++环境</h2><blockquote>\n<p><a href=\"https://github.com/QuantStack/xeus-cling\" target=\"_blank\" rel=\"noopener\">https://github.com/QuantStack/xeus-cling</a></p>\n</blockquote>\n<ul>\n<li>安装<br>xeus-cling已经在linux和OS X平台上为conda包管理器打包。<br>为确保安装正常，最好安装xeus-cling在新的conda环境中。还需要使用miniconda安装，因为使用完整的anaconda，您可能会与zeromq已安装在anaconda发行版中的库发生冲突。<br>最安全的用法是创建一个以clingminiconda安装命名的环境</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n cling</span><br><span class=\"line\"><span class=\"built_in\">source</span> activate cling</span><br></pre></td></tr></table></figure>\n<p>然后，您可以在此环境xeus-cling及其依赖项中安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install xeus-cling notebook -c QuantStack -c conda-forge</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果已经安装了所有依赖项，则可以直接从源安装它。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX = your_conda_path -DCMAKE_INSTALL_LIBDIR = your_conda_path / lib</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"附：Jupyter-kernels\"><a href=\"#附：Jupyter-kernels\" class=\"headerlink\" title=\"附：Jupyter-kernels\"></a>附：Jupyter-kernels</h2><p><a href=\"https://github.com/jupyter/jupyter/wiki/Jupyter-kernels\" target=\"_blank\" rel=\"noopener\">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a></p>\n"},{"title":"搭建hexo博客小记——hexo系列文章（一）","date":"2016-05-01T10:06:12.000Z","keywords":"Hexo,网站,Github","_content":"\n## 引言\n\n本文主要介绍在Github下搭建Hexo博客。总体说来，搭建Hexo总共需要两步：\n\n* 第一部分，部署本地博客，也就是在你的电脑上搭建起来Web环境；\n* 第二部分，生成静态页面，并上传到Github上去。<!--more-->\n\n## 搭建本地博客系统\n\n搭建本地博客系统首先要部署环境，即Node.js和Git。\n\n### Node.js的安装\n\n可以[点此](https://nodejs.org/)下载nodejs，并按照步骤一步步安装；一切默认即可；\n\n### Git的安装\n\ngit bash，[点此](https://git-scm.com/downloads)下载即可。\n部署好本地环境，便可以开始安装博客系统Hexo了\n\n### Hexo的安装\n\nHexo可直接用`npm`安装，可在电脑任意文件夹下右键Git Bash Here，进去后，在命令行中输入\n\n\tnpm install -g hexo\n\n### 安装依赖包\n\n\tnpm install\n\n### 发布本地博客\n\n到上一步为止，本地博客已搭建完成，下面我们可以发布本地博客看看效果：（即生成静态页面）\n\n\thexo generate\n\thexo server\n\n当然，也可以用简写：\n\n\thexo g\n\thexo s\n\n本地服务器开启后，我们就可以进入[http://localhost:4000](http://localhost:4000)浏览本地博客了。\n\n## 上传本地文件到Github\n\n### 申请账号并建立仓库。\n\n账号自行申请，建立仓库即在页面右上角的+除新建一个`repository`。但是命名有要求，必须用你的用户名加上github.io来命名仓库名。比如你的用户名为user123，那么就命名为user123.github.io。\n\n### 获取SSH公钥，并与Github账号绑定。\n\n#### 设置邮箱和用户名\n\t\n\tgit config --global user.email \"user123@gmail.com\" \ngit config --global user.name \"user123\"\n\n#### 生成密钥\n\n\tssh-keygen -t rsa -C \"user@gmail.com\"\n\n命令运行后，会在`C:\\Users\\你的计算机名\\.ssh`中找到`id_rsa.pub`这个文件，貌似是pubication的文件，但是我用office打不开，所以不管它了，如果有老兄知道这个究竟是用什么打开比较好，可以在评论区告诉我。不过它也是可以用txt打开的，将其中的内容复制到以下位置：\n\t\t\t\n先登录github，点击右上角你的账户头像，进入settings，进入SSH key选项卡，将`id_rsa.pub`中的所有内容添加进去即可。\n\n#### 更改博客配置，为上传做准备。\n\n\n打开`D:\\hexo`目录下的配置文件`_config.yml`（推荐用软件Sublime Text打开，不要用txt打开，因为这要UTF-8编码，而txt不会编码），翻到最下面，并改成以下内容，把`user123g`替换成你的用户名即可\n\n\tdeploy:\n\ttype: git\n\trepository: https://github.com/user123/user123.github.io.git\n\tbranch: master\n\n注意：`type`后面一定要是`git`，不要填`Github`。这是最新版hexo的要求。还有就是上面配置文件的语法较为严格`type: `后面一定要留一个空格，`repository`，`branch`也一样。\n\n## 上传博客内容\n\n### 先生成静态文件\n\n\thexo g\n\n### 部署前先输入以下命令，不然会出现`error deployer not found:github`的报错。\n\n\tnpm install hexo-deployer-git --save\n\n\n### 上传文档（部署）\n\n\thexo d\n\n待出现`INFO Deploy done: git`即成功。成功后，进入网址`http://user123..github.io`浏览查看。\n\n至此，所有工作都已完成，如果想更改主题什么的，可以看我后续的博客。有问题欢迎大家留言。","source":"_posts/搭建hexo博客小记.md","raw":"---\ntitle: 搭建hexo博客小记——hexo系列文章（一）\ndate: 2016-05-01 18:06:12\ncategories: 博客\ntags: [Hexo]\nkeywords: Hexo,网站,Github\n---\n\n## 引言\n\n本文主要介绍在Github下搭建Hexo博客。总体说来，搭建Hexo总共需要两步：\n\n* 第一部分，部署本地博客，也就是在你的电脑上搭建起来Web环境；\n* 第二部分，生成静态页面，并上传到Github上去。<!--more-->\n\n## 搭建本地博客系统\n\n搭建本地博客系统首先要部署环境，即Node.js和Git。\n\n### Node.js的安装\n\n可以[点此](https://nodejs.org/)下载nodejs，并按照步骤一步步安装；一切默认即可；\n\n### Git的安装\n\ngit bash，[点此](https://git-scm.com/downloads)下载即可。\n部署好本地环境，便可以开始安装博客系统Hexo了\n\n### Hexo的安装\n\nHexo可直接用`npm`安装，可在电脑任意文件夹下右键Git Bash Here，进去后，在命令行中输入\n\n\tnpm install -g hexo\n\n### 安装依赖包\n\n\tnpm install\n\n### 发布本地博客\n\n到上一步为止，本地博客已搭建完成，下面我们可以发布本地博客看看效果：（即生成静态页面）\n\n\thexo generate\n\thexo server\n\n当然，也可以用简写：\n\n\thexo g\n\thexo s\n\n本地服务器开启后，我们就可以进入[http://localhost:4000](http://localhost:4000)浏览本地博客了。\n\n## 上传本地文件到Github\n\n### 申请账号并建立仓库。\n\n账号自行申请，建立仓库即在页面右上角的+除新建一个`repository`。但是命名有要求，必须用你的用户名加上github.io来命名仓库名。比如你的用户名为user123，那么就命名为user123.github.io。\n\n### 获取SSH公钥，并与Github账号绑定。\n\n#### 设置邮箱和用户名\n\t\n\tgit config --global user.email \"user123@gmail.com\" \ngit config --global user.name \"user123\"\n\n#### 生成密钥\n\n\tssh-keygen -t rsa -C \"user@gmail.com\"\n\n命令运行后，会在`C:\\Users\\你的计算机名\\.ssh`中找到`id_rsa.pub`这个文件，貌似是pubication的文件，但是我用office打不开，所以不管它了，如果有老兄知道这个究竟是用什么打开比较好，可以在评论区告诉我。不过它也是可以用txt打开的，将其中的内容复制到以下位置：\n\t\t\t\n先登录github，点击右上角你的账户头像，进入settings，进入SSH key选项卡，将`id_rsa.pub`中的所有内容添加进去即可。\n\n#### 更改博客配置，为上传做准备。\n\n\n打开`D:\\hexo`目录下的配置文件`_config.yml`（推荐用软件Sublime Text打开，不要用txt打开，因为这要UTF-8编码，而txt不会编码），翻到最下面，并改成以下内容，把`user123g`替换成你的用户名即可\n\n\tdeploy:\n\ttype: git\n\trepository: https://github.com/user123/user123.github.io.git\n\tbranch: master\n\n注意：`type`后面一定要是`git`，不要填`Github`。这是最新版hexo的要求。还有就是上面配置文件的语法较为严格`type: `后面一定要留一个空格，`repository`，`branch`也一样。\n\n## 上传博客内容\n\n### 先生成静态文件\n\n\thexo g\n\n### 部署前先输入以下命令，不然会出现`error deployer not found:github`的报错。\n\n\tnpm install hexo-deployer-git --save\n\n\n### 上传文档（部署）\n\n\thexo d\n\n待出现`INFO Deploy done: git`即成功。成功后，进入网址`http://user123..github.io`浏览查看。\n\n至此，所有工作都已完成，如果想更改主题什么的，可以看我后续的博客。有问题欢迎大家留言。","slug":"搭建hexo博客小记","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu59y001cjcm1nrsmf1ip","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本文主要介绍在Github下搭建Hexo博客。总体说来，搭建Hexo总共需要两步：</p>\n<ul>\n<li>第一部分，部署本地博客，也就是在你的电脑上搭建起来Web环境；</li>\n<li>第二部分，生成静态页面，并上传到Github上去。<a id=\"more\"></a></li>\n</ul>\n<h2 id=\"搭建本地博客系统\"><a href=\"#搭建本地博客系统\" class=\"headerlink\" title=\"搭建本地博客系统\"></a>搭建本地博客系统</h2><p>搭建本地博客系统首先要部署环境，即Node.js和Git。</p>\n<h3 id=\"Node-js的安装\"><a href=\"#Node-js的安装\" class=\"headerlink\" title=\"Node.js的安装\"></a>Node.js的安装</h3><p>可以<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">点此</a>下载nodejs，并按照步骤一步步安装；一切默认即可；</p>\n<h3 id=\"Git的安装\"><a href=\"#Git的安装\" class=\"headerlink\" title=\"Git的安装\"></a>Git的安装</h3><p>git bash，<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">点此</a>下载即可。<br>部署好本地环境，便可以开始安装博客系统Hexo了</p>\n<h3 id=\"Hexo的安装\"><a href=\"#Hexo的安装\" class=\"headerlink\" title=\"Hexo的安装\"></a>Hexo的安装</h3><p>Hexo可直接用<code>npm</code>安装，可在电脑任意文件夹下右键Git Bash Here，进去后，在命令行中输入</p>\n<pre><code>npm install -g hexo\n</code></pre><h3 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h3><pre><code>npm install\n</code></pre><h3 id=\"发布本地博客\"><a href=\"#发布本地博客\" class=\"headerlink\" title=\"发布本地博客\"></a>发布本地博客</h3><p>到上一步为止，本地博客已搭建完成，下面我们可以发布本地博客看看效果：（即生成静态页面）</p>\n<pre><code>hexo generate\nhexo server\n</code></pre><p>当然，也可以用简写：</p>\n<pre><code>hexo g\nhexo s\n</code></pre><p>本地服务器开启后，我们就可以进入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>浏览本地博客了。</p>\n<h2 id=\"上传本地文件到Github\"><a href=\"#上传本地文件到Github\" class=\"headerlink\" title=\"上传本地文件到Github\"></a>上传本地文件到Github</h2><h3 id=\"申请账号并建立仓库。\"><a href=\"#申请账号并建立仓库。\" class=\"headerlink\" title=\"申请账号并建立仓库。\"></a>申请账号并建立仓库。</h3><p>账号自行申请，建立仓库即在页面右上角的+除新建一个<code>repository</code>。但是命名有要求，必须用你的用户名加上github.io来命名仓库名。比如你的用户名为user123，那么就命名为user123.github.io。</p>\n<h3 id=\"获取SSH公钥，并与Github账号绑定。\"><a href=\"#获取SSH公钥，并与Github账号绑定。\" class=\"headerlink\" title=\"获取SSH公钥，并与Github账号绑定。\"></a>获取SSH公钥，并与Github账号绑定。</h3><h4 id=\"设置邮箱和用户名\"><a href=\"#设置邮箱和用户名\" class=\"headerlink\" title=\"设置邮箱和用户名\"></a>设置邮箱和用户名</h4><pre><code>git config --global user.email &quot;user123@gmail.com&quot; \n</code></pre><p>git config –global user.name “user123”</p>\n<h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><pre><code>ssh-keygen -t rsa -C &quot;user@gmail.com&quot;\n</code></pre><p>命令运行后，会在<code>C:\\Users\\你的计算机名\\.ssh</code>中找到<code>id_rsa.pub</code>这个文件，貌似是pubication的文件，但是我用office打不开，所以不管它了，如果有老兄知道这个究竟是用什么打开比较好，可以在评论区告诉我。不过它也是可以用txt打开的，将其中的内容复制到以下位置：</p>\n<p>先登录github，点击右上角你的账户头像，进入settings，进入SSH key选项卡，将<code>id_rsa.pub</code>中的所有内容添加进去即可。</p>\n<h4 id=\"更改博客配置，为上传做准备。\"><a href=\"#更改博客配置，为上传做准备。\" class=\"headerlink\" title=\"更改博客配置，为上传做准备。\"></a>更改博客配置，为上传做准备。</h4><p>打开<code>D:\\hexo</code>目录下的配置文件<code>_config.yml</code>（推荐用软件Sublime Text打开，不要用txt打开，因为这要UTF-8编码，而txt不会编码），翻到最下面，并改成以下内容，把<code>user123g</code>替换成你的用户名即可</p>\n<pre><code>deploy:\ntype: git\nrepository: https://github.com/user123/user123.github.io.git\nbranch: master\n</code></pre><p>注意：<code>type</code>后面一定要是<code>git</code>，不要填<code>Github</code>。这是最新版hexo的要求。还有就是上面配置文件的语法较为严格<code>type:</code>后面一定要留一个空格，<code>repository</code>，<code>branch</code>也一样。</p>\n<h2 id=\"上传博客内容\"><a href=\"#上传博客内容\" class=\"headerlink\" title=\"上传博客内容\"></a>上传博客内容</h2><h3 id=\"先生成静态文件\"><a href=\"#先生成静态文件\" class=\"headerlink\" title=\"先生成静态文件\"></a>先生成静态文件</h3><pre><code>hexo g\n</code></pre><h3 id=\"部署前先输入以下命令，不然会出现error-deployer-not-found-github的报错。\"><a href=\"#部署前先输入以下命令，不然会出现error-deployer-not-found-github的报错。\" class=\"headerlink\" title=\"部署前先输入以下命令，不然会出现error deployer not found:github的报错。\"></a>部署前先输入以下命令，不然会出现<code>error deployer not found:github</code>的报错。</h3><pre><code>npm install hexo-deployer-git --save\n</code></pre><h3 id=\"上传文档（部署）\"><a href=\"#上传文档（部署）\" class=\"headerlink\" title=\"上传文档（部署）\"></a>上传文档（部署）</h3><pre><code>hexo d\n</code></pre><p>待出现<code>INFO Deploy done: git</code>即成功。成功后，进入网址<code>http://user123..github.io</code>浏览查看。</p>\n<p>至此，所有工作都已完成，如果想更改主题什么的，可以看我后续的博客。有问题欢迎大家留言。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本文主要介绍在Github下搭建Hexo博客。总体说来，搭建Hexo总共需要两步：</p>\n<ul>\n<li>第一部分，部署本地博客，也就是在你的电脑上搭建起来Web环境；</li>\n<li>第二部分，生成静态页面，并上传到Github上去。","more":"</li>\n</ul>\n<h2 id=\"搭建本地博客系统\"><a href=\"#搭建本地博客系统\" class=\"headerlink\" title=\"搭建本地博客系统\"></a>搭建本地博客系统</h2><p>搭建本地博客系统首先要部署环境，即Node.js和Git。</p>\n<h3 id=\"Node-js的安装\"><a href=\"#Node-js的安装\" class=\"headerlink\" title=\"Node.js的安装\"></a>Node.js的安装</h3><p>可以<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">点此</a>下载nodejs，并按照步骤一步步安装；一切默认即可；</p>\n<h3 id=\"Git的安装\"><a href=\"#Git的安装\" class=\"headerlink\" title=\"Git的安装\"></a>Git的安装</h3><p>git bash，<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">点此</a>下载即可。<br>部署好本地环境，便可以开始安装博客系统Hexo了</p>\n<h3 id=\"Hexo的安装\"><a href=\"#Hexo的安装\" class=\"headerlink\" title=\"Hexo的安装\"></a>Hexo的安装</h3><p>Hexo可直接用<code>npm</code>安装，可在电脑任意文件夹下右键Git Bash Here，进去后，在命令行中输入</p>\n<pre><code>npm install -g hexo\n</code></pre><h3 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h3><pre><code>npm install\n</code></pre><h3 id=\"发布本地博客\"><a href=\"#发布本地博客\" class=\"headerlink\" title=\"发布本地博客\"></a>发布本地博客</h3><p>到上一步为止，本地博客已搭建完成，下面我们可以发布本地博客看看效果：（即生成静态页面）</p>\n<pre><code>hexo generate\nhexo server\n</code></pre><p>当然，也可以用简写：</p>\n<pre><code>hexo g\nhexo s\n</code></pre><p>本地服务器开启后，我们就可以进入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>浏览本地博客了。</p>\n<h2 id=\"上传本地文件到Github\"><a href=\"#上传本地文件到Github\" class=\"headerlink\" title=\"上传本地文件到Github\"></a>上传本地文件到Github</h2><h3 id=\"申请账号并建立仓库。\"><a href=\"#申请账号并建立仓库。\" class=\"headerlink\" title=\"申请账号并建立仓库。\"></a>申请账号并建立仓库。</h3><p>账号自行申请，建立仓库即在页面右上角的+除新建一个<code>repository</code>。但是命名有要求，必须用你的用户名加上github.io来命名仓库名。比如你的用户名为user123，那么就命名为user123.github.io。</p>\n<h3 id=\"获取SSH公钥，并与Github账号绑定。\"><a href=\"#获取SSH公钥，并与Github账号绑定。\" class=\"headerlink\" title=\"获取SSH公钥，并与Github账号绑定。\"></a>获取SSH公钥，并与Github账号绑定。</h3><h4 id=\"设置邮箱和用户名\"><a href=\"#设置邮箱和用户名\" class=\"headerlink\" title=\"设置邮箱和用户名\"></a>设置邮箱和用户名</h4><pre><code>git config --global user.email &quot;user123@gmail.com&quot; \n</code></pre><p>git config –global user.name “user123”</p>\n<h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><pre><code>ssh-keygen -t rsa -C &quot;user@gmail.com&quot;\n</code></pre><p>命令运行后，会在<code>C:\\Users\\你的计算机名\\.ssh</code>中找到<code>id_rsa.pub</code>这个文件，貌似是pubication的文件，但是我用office打不开，所以不管它了，如果有老兄知道这个究竟是用什么打开比较好，可以在评论区告诉我。不过它也是可以用txt打开的，将其中的内容复制到以下位置：</p>\n<p>先登录github，点击右上角你的账户头像，进入settings，进入SSH key选项卡，将<code>id_rsa.pub</code>中的所有内容添加进去即可。</p>\n<h4 id=\"更改博客配置，为上传做准备。\"><a href=\"#更改博客配置，为上传做准备。\" class=\"headerlink\" title=\"更改博客配置，为上传做准备。\"></a>更改博客配置，为上传做准备。</h4><p>打开<code>D:\\hexo</code>目录下的配置文件<code>_config.yml</code>（推荐用软件Sublime Text打开，不要用txt打开，因为这要UTF-8编码，而txt不会编码），翻到最下面，并改成以下内容，把<code>user123g</code>替换成你的用户名即可</p>\n<pre><code>deploy:\ntype: git\nrepository: https://github.com/user123/user123.github.io.git\nbranch: master\n</code></pre><p>注意：<code>type</code>后面一定要是<code>git</code>，不要填<code>Github</code>。这是最新版hexo的要求。还有就是上面配置文件的语法较为严格<code>type:</code>后面一定要留一个空格，<code>repository</code>，<code>branch</code>也一样。</p>\n<h2 id=\"上传博客内容\"><a href=\"#上传博客内容\" class=\"headerlink\" title=\"上传博客内容\"></a>上传博客内容</h2><h3 id=\"先生成静态文件\"><a href=\"#先生成静态文件\" class=\"headerlink\" title=\"先生成静态文件\"></a>先生成静态文件</h3><pre><code>hexo g\n</code></pre><h3 id=\"部署前先输入以下命令，不然会出现error-deployer-not-found-github的报错。\"><a href=\"#部署前先输入以下命令，不然会出现error-deployer-not-found-github的报错。\" class=\"headerlink\" title=\"部署前先输入以下命令，不然会出现error deployer not found:github的报错。\"></a>部署前先输入以下命令，不然会出现<code>error deployer not found:github</code>的报错。</h3><pre><code>npm install hexo-deployer-git --save\n</code></pre><h3 id=\"上传文档（部署）\"><a href=\"#上传文档（部署）\" class=\"headerlink\" title=\"上传文档（部署）\"></a>上传文档（部署）</h3><pre><code>hexo d\n</code></pre><p>待出现<code>INFO Deploy done: git</code>即成功。成功后，进入网址<code>http://user123..github.io</code>浏览查看。</p>\n<p>至此，所有工作都已完成，如果想更改主题什么的，可以看我后续的博客。有问题欢迎大家留言。</p>"},{"title":"将图片自动上传到七牛并在markdown中引用","date":"2017-05-16T03:50:27.000Z","keywords":"Mpic,mpic,七牛,七牛云,图床","_content":"## 引言\nMarkdown传统的插入图片的步骤实在是让人心累，所以我就上网搜了搜有没有啥简单的解决办法。倒是找到了不少支持自动上传到七牛云的Markdown编辑器，然而大多是只支持OSX,Win用户哭晕在厕所。。。。不过经过一番搜索，还是找到了不少顺手的工具。\n\n这里推荐两种方式：\n\n1. Mpic软件，不管是拖拽上传、复制上传还是截图上传通通都支持，并且可以自动复制，官网地址：[MPic-图床神器](http://mpic.lzhaofu.cn/)\n2. 可以借助一个工具，Github地址在这里：[qiniu-image-tool-win](https://github.com/jiwenxing/qiniu-image-tool-win)\n\n这两种方式都可以，由于第一种很简单，这里只介绍第二种方式的配制方法。配置完后，使用起来体验也很好。\n\n<!--more-->\n\n## 安装\n1. 从[release](https://github.com/jiwenxing/qiniu-image-tool-win/releases)页面下载成功后，解压。\n2. 安装AutoHotkey。\n## 配置\n编辑`qiniu-image-upload.ahk`文件，将一下内容做一些修改：\n```\nACCESS_KEY = ***\nSECRET_KEY = ***\nBUCKET_NAME = ***  ;qiniu bucket name\nBUCKET_DOMAIN = http://7xry05.com1.z0.glb.clouddn.com/  ;qiniu domain for the image\nWORKING_DIR = E:\\TOOLS\\qiniu-image-tool-win\\  ;directory that you put the qshell.exe \n```\n具体的内容请参考原作者博客，点[这里](http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/)\n\n## 使用\n安装并配置成功后，只需两步即可插入图片到`markdown`文档中：\n1. `Ctrl+c`复制图片\n2. `Ctrl+Alt+v`即可将`markdown`引用地址粘贴到文档中。\n> 参考：[http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/](http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/)\n> [https://github.com/jiwenxing/qiniu-image-tool-win](https://github.com/jiwenxing/qiniu-image-tool-win)\n","source":"_posts/将图片自动上传到七牛并在markdown中引用.md","raw":"---\ntitle: 将图片自动上传到七牛并在markdown中引用\ndate: 2017-05-16 11:50:27\ntags:\n  - Markdown\n  - 七牛云\ncategories: 博客\nkeywords: Mpic,mpic,七牛,七牛云,图床\n---\n## 引言\nMarkdown传统的插入图片的步骤实在是让人心累，所以我就上网搜了搜有没有啥简单的解决办法。倒是找到了不少支持自动上传到七牛云的Markdown编辑器，然而大多是只支持OSX,Win用户哭晕在厕所。。。。不过经过一番搜索，还是找到了不少顺手的工具。\n\n这里推荐两种方式：\n\n1. Mpic软件，不管是拖拽上传、复制上传还是截图上传通通都支持，并且可以自动复制，官网地址：[MPic-图床神器](http://mpic.lzhaofu.cn/)\n2. 可以借助一个工具，Github地址在这里：[qiniu-image-tool-win](https://github.com/jiwenxing/qiniu-image-tool-win)\n\n这两种方式都可以，由于第一种很简单，这里只介绍第二种方式的配制方法。配置完后，使用起来体验也很好。\n\n<!--more-->\n\n## 安装\n1. 从[release](https://github.com/jiwenxing/qiniu-image-tool-win/releases)页面下载成功后，解压。\n2. 安装AutoHotkey。\n## 配置\n编辑`qiniu-image-upload.ahk`文件，将一下内容做一些修改：\n```\nACCESS_KEY = ***\nSECRET_KEY = ***\nBUCKET_NAME = ***  ;qiniu bucket name\nBUCKET_DOMAIN = http://7xry05.com1.z0.glb.clouddn.com/  ;qiniu domain for the image\nWORKING_DIR = E:\\TOOLS\\qiniu-image-tool-win\\  ;directory that you put the qshell.exe \n```\n具体的内容请参考原作者博客，点[这里](http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/)\n\n## 使用\n安装并配置成功后，只需两步即可插入图片到`markdown`文档中：\n1. `Ctrl+c`复制图片\n2. `Ctrl+Alt+v`即可将`markdown`引用地址粘贴到文档中。\n> 参考：[http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/](http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/)\n> [https://github.com/jiwenxing/qiniu-image-tool-win](https://github.com/jiwenxing/qiniu-image-tool-win)\n","slug":"将图片自动上传到七牛并在markdown中引用","published":1,"updated":"2018-07-20T11:34:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu5a0001fjcm1hka5ks00","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>Markdown传统的插入图片的步骤实在是让人心累，所以我就上网搜了搜有没有啥简单的解决办法。倒是找到了不少支持自动上传到七牛云的Markdown编辑器，然而大多是只支持OSX,Win用户哭晕在厕所。。。。不过经过一番搜索，还是找到了不少顺手的工具。</p>\n<p>这里推荐两种方式：</p>\n<ol>\n<li>Mpic软件，不管是拖拽上传、复制上传还是截图上传通通都支持，并且可以自动复制，官网地址：<a href=\"http://mpic.lzhaofu.cn/\" target=\"_blank\" rel=\"noopener\">MPic-图床神器</a></li>\n<li>可以借助一个工具，Github地址在这里：<a href=\"https://github.com/jiwenxing/qiniu-image-tool-win\" target=\"_blank\" rel=\"noopener\">qiniu-image-tool-win</a></li>\n</ol>\n<p>这两种方式都可以，由于第一种很简单，这里只介绍第二种方式的配制方法。配置完后，使用起来体验也很好。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>从<a href=\"https://github.com/jiwenxing/qiniu-image-tool-win/releases\" target=\"_blank\" rel=\"noopener\">release</a>页面下载成功后，解压。</li>\n<li>安装AutoHotkey。<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2>编辑<code>qiniu-image-upload.ahk</code>文件，将一下内容做一些修改：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACCESS_KEY = ***</span><br><span class=\"line\">SECRET_KEY = ***</span><br><span class=\"line\">BUCKET_NAME = ***  ;qiniu bucket name</span><br><span class=\"line\">BUCKET_DOMAIN = http://7xry05.com1.z0.glb.clouddn.com/  ;qiniu domain for the image</span><br><span class=\"line\">WORKING_DIR = E:\\TOOLS\\qiniu-image-tool-win\\  ;directory that you put the qshell.exe</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体的内容请参考原作者博客，点<a href=\"http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>安装并配置成功后，只需两步即可插入图片到<code>markdown</code>文档中：</p>\n<ol>\n<li><code>Ctrl+c</code>复制图片</li>\n<li><code>Ctrl+Alt+v</code>即可将<code>markdown</code>引用地址粘贴到文档中。<blockquote>\n<p>参考：<a href=\"http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/\" target=\"_blank\" rel=\"noopener\">http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/</a><br><a href=\"https://github.com/jiwenxing/qiniu-image-tool-win\" target=\"_blank\" rel=\"noopener\">https://github.com/jiwenxing/qiniu-image-tool-win</a></p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>Markdown传统的插入图片的步骤实在是让人心累，所以我就上网搜了搜有没有啥简单的解决办法。倒是找到了不少支持自动上传到七牛云的Markdown编辑器，然而大多是只支持OSX,Win用户哭晕在厕所。。。。不过经过一番搜索，还是找到了不少顺手的工具。</p>\n<p>这里推荐两种方式：</p>\n<ol>\n<li>Mpic软件，不管是拖拽上传、复制上传还是截图上传通通都支持，并且可以自动复制，官网地址：<a href=\"http://mpic.lzhaofu.cn/\" target=\"_blank\" rel=\"noopener\">MPic-图床神器</a></li>\n<li>可以借助一个工具，Github地址在这里：<a href=\"https://github.com/jiwenxing/qiniu-image-tool-win\" target=\"_blank\" rel=\"noopener\">qiniu-image-tool-win</a></li>\n</ol>\n<p>这两种方式都可以，由于第一种很简单，这里只介绍第二种方式的配制方法。配置完后，使用起来体验也很好。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>从<a href=\"https://github.com/jiwenxing/qiniu-image-tool-win/releases\" target=\"_blank\" rel=\"noopener\">release</a>页面下载成功后，解压。</li>\n<li>安装AutoHotkey。<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2>编辑<code>qiniu-image-upload.ahk</code>文件，将一下内容做一些修改：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACCESS_KEY = ***</span><br><span class=\"line\">SECRET_KEY = ***</span><br><span class=\"line\">BUCKET_NAME = ***  ;qiniu bucket name</span><br><span class=\"line\">BUCKET_DOMAIN = http://7xry05.com1.z0.glb.clouddn.com/  ;qiniu domain for the image</span><br><span class=\"line\">WORKING_DIR = E:\\TOOLS\\qiniu-image-tool-win\\  ;directory that you put the qshell.exe</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体的内容请参考原作者博客，点<a href=\"http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>安装并配置成功后，只需两步即可插入图片到<code>markdown</code>文档中：</p>\n<ol>\n<li><code>Ctrl+c</code>复制图片</li>\n<li><code>Ctrl+Alt+v</code>即可将<code>markdown</code>引用地址粘贴到文档中。<blockquote>\n<p>参考：<a href=\"http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/\" target=\"_blank\" rel=\"noopener\">http://jverson.com/2016/08/30/autohotkey-markdown-uploadImage/</a><br><a href=\"https://github.com/jiwenxing/qiniu-image-tool-win\" target=\"_blank\" rel=\"noopener\">https://github.com/jiwenxing/qiniu-image-tool-win</a></p>\n</blockquote>\n</li>\n</ol>"},{"title":"自己构建Docker镜像在自己的服务器上搭建支持C++和tensorflow的jupyter-notebook","date":"2018-07-28T14:40:14.000Z","keywords":"Docker,服务器,C++,Cling,tensorflow,python,jupyter-notebook,jupyter","_content":"## 安装Docker软件\n不再赘述，可参考本博客中以前的文章。\n\n## Dockerfile\ngithub地址：\n\nhttps://github.com/heliuphy/myDockerRepo/blob/master/jupyter-cling/Dockerfile\n\n\n## docker命令\n```bash\ndocker run -d --name jupyter-cling \\\n-p 9002:8888 \\\n--user root \\\n-e GRANT_SUDO=yes \\\n-e NB_UID=1001 \\\n-e NB_GID=101 \\\n-v /home/jupyter-cling:/home/jovyan/work \\\nheliuphy/jupyter-cling start-notebook.sh \\\n--NotebookApp.password='sha1:********'\n# -------------\n# 增加 NB_UID 对目录的权限\n$ chown 1001 /home/jupyter-cling\n\n```\n","source":"_posts/自己构建Docker镜像在自己的服务器上搭建支持C++和tensorflow的jupyter-notebook.md","raw":"---\ntitle: 自己构建Docker镜像在自己的服务器上搭建支持C++和tensorflow的jupyter-notebook\ndate: 2018-07-28 22:40:14\ncategories: Docker\ntags:\n  - Linux\n  - VPS\n  - c++\n  - Jupyter\nkeywords: Docker,服务器,C++,Cling,tensorflow,python,jupyter-notebook,jupyter\n\n---\n## 安装Docker软件\n不再赘述，可参考本博客中以前的文章。\n\n## Dockerfile\ngithub地址：\n\nhttps://github.com/heliuphy/myDockerRepo/blob/master/jupyter-cling/Dockerfile\n\n\n## docker命令\n```bash\ndocker run -d --name jupyter-cling \\\n-p 9002:8888 \\\n--user root \\\n-e GRANT_SUDO=yes \\\n-e NB_UID=1001 \\\n-e NB_GID=101 \\\n-v /home/jupyter-cling:/home/jovyan/work \\\nheliuphy/jupyter-cling start-notebook.sh \\\n--NotebookApp.password='sha1:********'\n# -------------\n# 增加 NB_UID 对目录的权限\n$ chown 1001 /home/jupyter-cling\n\n```\n","slug":"自己构建Docker镜像在自己的服务器上搭建支持C++和tensorflow的jupyter-notebook","published":1,"updated":"2018-07-30T05:48:28.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu5a3001kjcm1h3ouyt69","content":"<h2 id=\"安装Docker软件\"><a href=\"#安装Docker软件\" class=\"headerlink\" title=\"安装Docker软件\"></a>安装Docker软件</h2><p>不再赘述，可参考本博客中以前的文章。</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>github地址：</p>\n<p><a href=\"https://github.com/heliuphy/myDockerRepo/blob/master/jupyter-cling/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/heliuphy/myDockerRepo/blob/master/jupyter-cling/Dockerfile</a></p>\n<h2 id=\"docker命令\"><a href=\"#docker命令\" class=\"headerlink\" title=\"docker命令\"></a>docker命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jupyter-cling \\</span><br><span class=\"line\">-p 9002:8888 \\</span><br><span class=\"line\">--user root \\</span><br><span class=\"line\">-e GRANT_SUDO=yes \\</span><br><span class=\"line\">-e NB_UID=1001 \\</span><br><span class=\"line\">-e NB_GID=101 \\</span><br><span class=\"line\">-v /home/jupyter-cling:/home/jovyan/work \\</span><br><span class=\"line\">heliuphy/jupyter-cling start-notebook.sh \\</span><br><span class=\"line\">--NotebookApp.password=<span class=\"string\">'sha1:********'</span></span><br><span class=\"line\"><span class=\"comment\"># -------------</span></span><br><span class=\"line\"><span class=\"comment\"># 增加 NB_UID 对目录的权限</span></span><br><span class=\"line\">$ chown 1001 /home/jupyter-cling</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h2 id=\"安装Docker软件\"><a href=\"#安装Docker软件\" class=\"headerlink\" title=\"安装Docker软件\"></a>安装Docker软件</h2><p>不再赘述，可参考本博客中以前的文章。</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>github地址：</p>\n<p><a href=\"https://github.com/heliuphy/myDockerRepo/blob/master/jupyter-cling/Dockerfile\" target=\"_blank\" rel=\"noopener\">https://github.com/heliuphy/myDockerRepo/blob/master/jupyter-cling/Dockerfile</a></p>\n<h2 id=\"docker命令\"><a href=\"#docker命令\" class=\"headerlink\" title=\"docker命令\"></a>docker命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name jupyter-cling \\</span><br><span class=\"line\">-p 9002:8888 \\</span><br><span class=\"line\">--user root \\</span><br><span class=\"line\">-e GRANT_SUDO=yes \\</span><br><span class=\"line\">-e NB_UID=1001 \\</span><br><span class=\"line\">-e NB_GID=101 \\</span><br><span class=\"line\">-v /home/jupyter-cling:/home/jovyan/work \\</span><br><span class=\"line\">heliuphy/jupyter-cling start-notebook.sh \\</span><br><span class=\"line\">--NotebookApp.password=<span class=\"string\">'sha1:********'</span></span><br><span class=\"line\"><span class=\"comment\"># -------------</span></span><br><span class=\"line\"><span class=\"comment\"># 增加 NB_UID 对目录的权限</span></span><br><span class=\"line\">$ chown 1001 /home/jupyter-cling</span><br></pre></td></tr></table></figure>\n"},{"title":"阮一峰JS学习笔记","date":"2018-10-14T10:30:03.000Z","_content":"\n# 阮一峰JS学习笔记\n\n## 什么是JS\n它是脚本语言，即不具备开发操作系统的能力，而是只用来编写**控制**其他大型应用程序的”脚本“（比如浏览器）。它是嵌入式语言，即没有IO，只能嵌入更大型得应用程序中，去调用宿主环境的IO。（浏览器、node）\n\n\n## JS都包括什么\n其核心语法相当精简，只包括两部分：\n* 基本的语法构造\n    * 操作符\n    * 控制结构\n    * 语句\n* 标准库\n\n除此之外，因为它要有宿主环境，所以就是一系列宿主环境的API。\n\n## JS难在哪\n* 它涉及大量的外部API\n* JS有不少设计缺陷，某些地方相当不合理。\n\n\n## JS基础\n\n### 语句and表达式\n\n#### 语句\n\n```javascript\nvar a = 1 + 3;\n```\n#### 表达式\n\n```js\n1 + 3\n```\n指为了**得到返回值的**计算式。\n\n两者的区别在于，语句一般是为了进行某种操作，改编程序运行状态，一般不需要返回值；而表达式是为了得到返回值，其一定会返回一个值。凡是JS中**预期为一个值的**地方，都可以放置表达式。\n\n### 变量\n\n变量是对值旳**具名引用**。\n\n#### 变量提升\n\nJS引擎的工作方式是：**先**解析代码，**获取所有的被声明的变量**，然后再一行一行的运行。这样也就是，所有变量声明的语句，都会被提升到代码头部。\n\n\n```js\nconsole.log(a);\nvar a = 1;\n\n```\n\n真正运行的是如下代码\n\n```js\nvar a;\nconsole.log(a);\na = 1;\n```\n\n### 标识符\n也就是用来识别各种值的合法名称。最常见的标识符就是**变量名**，以及**函数名**。\n\n### 区块\n对于`var`命令来说，`{ }`构成的区块不构成单独的作用域。\n\n### 控制结构\n\n#### switch结构\n多个`if--else`结构连在一起的时候，可使用更简单的`switch`结构。\n\n\n```js\nswitch(fruit) {\n    case \"banana\":\n        //...\n        break;\n    case \"apple\":\n        //...\n        break;\n    default:\n        //...\n}\n```\n\n### 标签\nJS语言允许语句的前面有标签。相当于定位符。\n通常与`break`和`continue`配合使用，跳出特定循环。\n\n```js\ntop:\n    for(var i = 0; i < 3; i ++){\n        for(...){\n            if(...){\n                break top;\n            }\n            console.log(...);\n        }\n    }\n```\n\n这样就可以直接跳出外层循环，如果加标签，只默认跳出当前循环。\n\n## 数据类型\n\n### 概述\n* 数值：整数和小数\n* 字符串\n* 布尔值\n* undefined 未定义\n* null 空值\n* 对象\n\n注：前三个成为”原始类型的值”，也就是不能再细分了。对象则是“合成类型”的值。至于那两个英文的，就是特殊值。\n\n而至于**对象**，又可以分为三类：\n* 狭义的对象 object\n* 数组 array\n* 函数 function\n\n#### typeof 运算符\n这是**运算符**！\n\n预告一下，JS共有三种方式可以确定一个值是什么类型的：\n* typeof 运算符\n* instanceof 运算符\n* Object.prototype.toString 方法\n\n\n### null, undefined, 布尔\nnull表示值为空值，比如一个参数表示抛出的错误参数，如果此处无错，就会抛出`null`。\n\nundefined表示未定义\n\n关于布尔值，注意类型转换，空字符串转换为`false`而空数组和空对象则都是`true`。\n### 数值\n注意，JS里的所有数字都是64位浮动点数存储。所以\n\n```js\n1 === 1.0 //true\n```\n\n#### 与数值相关的全局方法\n\n##### parseInt()\n将字符串转为整数\n\n```js\nparseInt('123') //123\n```\n##### parseFloat()\n将字符串转换为浮点数。\n##### isNaN()\n判断一个值是不是`NaN`。\n##### isFinite()\n判断一个数值是不是一个正常的数值。\n### 字符串\n字符串可以像数组一样访问，但是不可以修改单个字符，比如\n\n```JS\nvar s = 'hello';\ns[0] = 'a';\n//这样是改变不了的\n```\n### 对象\n#### 键名\n* 对象的所有键名都是字符串，所以是否加引号都可以。如果键名是数值，也会被自动转换成字符串。但是如果键名不符合明明规范，则必须加上引号，否则会报错。\n* 键名又称为属性。它的值可以是任意类型，如果是函数，则这个属性又称为方法。\n* 值如果是对象，则形成了链式引用。\n\n#### 对象的引用\n如果不同变量名指向同一个变量，那么他们都是这个对象的引用，也就是指向相同的内存地址。改一个，其他的都会变。\n\n**注意：**这种引用仅限于对象，如果是**原始类型的值**的话，那么变量就是值的**拷贝**。\n#### 属性\n* 有两种运算符，一个是点运算符，另一个就是方括号运算符。\n* 需要查看一个对象的所有属性，可以使用`Object.keys(yourObj)'方法。\n* 属性的删除，使用`delete`命令。\n    ```JS\n    delete obj.p\n    ```\n* 要查看属性是否存在，可使用`in`运算符。即使是继承的属性，也会返回`true`。如果不需要继承，看下一条\n* 判断自身属性，可使用`hasOwnProperty()`方法来判断。\n* 怎么遍历对象的全部属性，可以使用`for...in...`循环。\n    ```JS\n    for (var i in onj) {\n        f(i);\n    }\n    ```\n    注意，会遍历继承的属性。但是必须是**可遍历的对象**。\n    \n    如果想遍历自身的属性，那么可以结合`hasOwnProperty()`方法判断一下。\n    \n    #### with 语句\n    ```JS\n    with(对象){\n        语句...\n    }\n    ```\n    \n这样提供的一种便利就是，在操作一个对象的多个属性时，会方便许多。\n    \n注意，`with`区块不会改变作用域，所以如果要给一个新属性赋值，需要先有这个属性才行。\n    \n**建议：**不要使用`with`，可以使用一个临时变量来代替这种功能。\n```JS\n    with(obj1.obj2.obj3) {\n        console.log(p1 + p2);\n    }\n    \n    //可以写成\n    var temp = obj1.obj2.obj3;\n    console.log(temp.p1 + temp.p2);\n```\n    \n    \n    \n    \n\n### 函数\n\n#### 函数的声明\n三种方法\n1. function命令---函数的声明\n2. 函数表达式---变量赋值的写法，将匿名函数赋值给一个变量，这个匿名函数又叫**函数表达式**。\n3. Function构造函数---几乎无人使用，不管了\n\n#### 第一等公民\n函数在js中只是一种可以执行的值而已，与其他值无特殊之处。凡是可以使用值得地方，都可以使用函数。\n#### 函数名得提升\n因为函数名就是变量名，所以使用`function`命里声明函数的时候，整个函数就会像变量声明一样，被提升到顶部。\n#### 函数的属性\n* name属性\n    主要作用：获取作为参数得函数的名字。\n    ```js\n    var myFunc  = function() {};\n    function test(f) {\n        console.log(f.name);\n    }\n    \n    test(myFunc) //得到myFunc\n    ```\n* length属性\n    返回函数预期传入的**参数的个数**，即函数定义中的参数个数。\n    其作用可实现方法的**重载**。\n* toString()\n    返回一个字符串，内容是函数的源码。\n    其作用可以实现多行字符串。\n    \n#### 作用域\n在js中只有两种作用域，一个是**全局作用域**，另一个就是**函数作用域**。\n    \n#### 参数\n* 关于函数值得传递方式\n    * 函数参数如果是原始类型得值，那么就**按值传递**。也就是说在函数体内修改参数值，不会影响到函数外部。    \n    * 如果函数参数是复合类型-（数组、对象、函数）的值，那么传递方式就是传址传递。\n    * 这里有一个小点需要注意一下就是，如果在函数体内部修改了整个参数的值，而不是某个属性。那么原对象的值是不会被修改的。\n\n    ```js\n    var obj = [1. 2. 3];\n    \n    function f(o) {\n        o = [2, 3, 4];\n    }\n    f(obj);\n    ```\n    \n这里，直接让参数o指向了另外一个对象，保存在原地址上的值当然不会受影响。\n    \n#### arguments对象\n只在函数体内部可以使用，这个对象包含了函数运行时的所有参数。`arguments[0]`是第一个参数。\n    `arguments`对象含有一个`callee`属性返回它所对应的函数。\n    \n#### 函数的其他知识点\n* 闭包：也就是能够读取其他函数内部变量的函数。\n    * 小引例：因为js内层的函数可以读取外层函数的变量，而外层函数却能读取内部函数的变量，所以要想实现读取某个内部函数的变量可以通过下面这个函数实现\n          ```js\n          function f1() {\n            var n = 99;\n            function f2(){\n                console.log(n);\n            }\n            return f2;\n          }\n          \n          var result = f1();\n          result(); //99\n          ```\n          \n这样就可以拐弯抹角的实现这个功能了。\n          \n* 闭包在这里就是这个函数`f2` , 他也就是将内部变量和外部变量相互链接的桥梁。\n* 闭包有两个作用\n    * 一个是可以让外部函数访问内部函数的变量\n    * 第二就是可以让运行环境保存住函数内部的变量\n* 闭包还可以封装对象的私有属性和私有方法\n* 闭包会保留外层函数的内部变量，造成内存消耗，不能滥用。\n* 立即调用的函数表达式\n这里有一个很有意思的点，就是`function(){}`既可以当语句又可以当表达式。\n```js\n    //语句\n    function f() {}\n    //表达式\n    var f = function f() {}\n```\n所以为了能够区分，js引擎就认为`function`出现在行首就是一个语句。\n但是加个括号阔起来就可以让引擎认为是一个表达式了。\n```js\n    (function(...){...})();//这样就可以直接调用函数了。\n```\n为了避免污染全局变量，经常会直接调用匿名函数。\n    \n#### eval命令\neval接受一个字符串作为参数，并将这个字符串当做语句执行。\n```js\n    eval('var a = q');\n    a //1\n```\n会影响当前作用域的变量，不推荐使用。一般用来解析JSON但是JSON最好还是用`JSON.parse`方法。\n**注意：**只有`eval()`这一种形式属于直接调用，剩下的全属于别名调用，别名调用的`eval()`通通影响的事**全局**作用域。\n    \n    \n### 数组\n\n#### 引言\n```js\ntyoeof [1,2,3] //\"object\"\n```\n可见数组的类型就是对象，那么数组有什么不同呢，数组的特殊性就体现在它的键名是按次序排列的一组整数`(0,1,2...)`。\n\n但是读取的时候，对于数组的键名，不能使用点号读取。（因为数字开头不是合法的标识符）。\n\n#### 基础\n* length属性\n* in 运算符\n* for ... in ... 循环和数组遍历\n    * 注意，这个不仅会遍历数组的数字键，还会遍历非数字键。\n    * 所以不推荐使用\n* 那么想简历数组最好使用`for`OR`while`循环。\n* 数组的`forEach()`方法也能**遍历数组**。\n#### 空位\n空位不同于`undefined`，遍历数组是，空位不会被遍历。\n#### 类似数组的对象\n只要有`length`属性，就可以认为是类似数组对象，但是它不是数组。要想将其转换为数组可以使用数组的`slice()`方法。\n\n```js\nvar arr = Array.prototype.slice.call(arrayLike);\n```\n\n使用`call()`方法可以对类似数组的对象使用数组的方法。\n\n```js\nArray.prototype.forEach.call(arrayLike, print);\n```\n\n这样就可以让`arrayLike`使用`forEach`方法。\n\n实际使用中最好还是先转成数组再使用。\n\n### 类型转换\n* 注意强制类型转换Number()和parseInt的区别\n    * Number()函数比parseInt()函数要严格很多。基本上，只要有一个字符无法转成述职，整个字符串就是`NaN`。而，`parseInt()`却可以将前几个是数字的字符提取出来。\n* 自动转换的规则\n    * 预期是什么类型的值，就调用该类型得转换函数。\n### 错误处理机制\n#### Error构造函数\n```js\nvar err = new Error('出错信息');\nerr.message // \"出错信息\"\n```\n此外还有几个派生的错误类\n* SyntaxError\n* ReferenceError\n* RangeError\n* TypeError\n* URIError\n* EvalError\n* 自定义错误类型（继承自Error）\n\n#### throw语句\n作用是手动**中断程序**执行，抛出一个错误\n```js\nif(x <= 0){\n    throw new Error('x必须为正数'); //这里抛出一个错误对象\n}\n```\n#### try...catch结构\n发生错误后可以对错误进行处理，捕捉错误，并决定是否执行下去。\n```JS\ntry {\n    throw new Error('error occured');\n} catch(e){ // 这里的参数e就是捕获上面那个try返回的错误对象（这里为了产生错误，强行用了throw语句）\n    console.log(e.name + \": \" + e.message);\n    console.log(e.stack);\n}\n```\n\n#### finally代码块\n`try...catch`后面还可以跟一个`finally`代码块，**无论是否出现错误**，都会执行。\n```JS\nfunction cleanUp(){\n    try{\n        throw new Error('error occured');\n        console.log('此行不会执行');\n    } finally {\n        console.log('完成清理工作');\n    }\n}\n\ncleanUp()\n\n// 完成清理工作\n// Error: error occured\n```\n\n## 标准库\n### Object对象\nJS其他所有对象都是**继承**自`Object`对象，即都是`Object`的**实例**。\n#### 原生方法\n* 一类是`Object`本身的方法，\n    * 即直接定义在Object对象上\n    * \n```js\nObject.print = function (o) { console.log(o)};\n```\n* 还有一类就是`Object`的实例方法。\n    * 即定义在Object原型对象`Object.prototype`上的方法。可以被Object实例直接使用。\n\n    \n```js\nObject.prototype.print = function () {\n    console.log(this);\n};\n\nvar obj = new Object();\nobj.print()\n```\n\n* obj会直接继承 `Object.prototype` 上的方法.\n\n    \n    \n#### 将Object()看为一个普通函数（工具函数）\n\n功能1：将任意值转换为对象\n\n```JS\nvar obj  = Object();\n\nvar obj2 = Object('foo');\n\nvar obj3 = Object(100);\n```\n\n功能2：判断某个变量是不是对象。因为Object有一个特点，就是当他的参数本身就是个对象的话，那么返回的还是原变量。\n\n```JS\nvar arr = [];\nvar obj = Object(arr); // 返回原数组\nobj === arr //true\n```\n\n#### 当Object()是构造函数时\n\n即前面可以使用`new`命令。使用方法几乎等同于工具函数Object()，但是语义不一样。工具函数是指**转换**成对象。\n\n#### Object静态方法（即将Object看成一个普通的对象）\n即部署在Object对象自身的方法。\n##### 遍历对象的属性\n* Object.keys()\n* Object.getOwnPropertyNames()\n\n这两个的参数都是一个对象。区别在于，keys只返回可枚举的属性，而getOwnPropertyNames方法还可以返回补课枚举的属性。\n\n#### 其他方法\n* 对象属性模型的相关方法\n* 控制对象状态的方法\n* 原型链相关方法\n\n\n#### Object的实例方法\n也就是定义在Object.prototype对象上的方法。所有Object的实例对象都继承了这些方法。\n##### Object.prototype.valueOf()\n返回一个对象的值，默认返回对象本身。其主要作用在于，自动类型转换时会**调用**。\n##### Obbject.prototype.toString()\n返回一个对象的字符串形式。默认返回**类型**字符串。也用于自动类型转换。可以得到想要的字符串形式。\n**注意，**这些函数有可能被用户重写，如果依然想调用，最好使用`Object.prototype.toString.call()`方法。\n可以用于判断类型以及构造函数。这样会比`typeof`运算符更精确。\n##### Object.prototype.toLocalString()\n与`toString`基本相同，也是返回字符串，但是可以加上一些用户的信息。比如返回日期的实例类型对象时，就和地域相关。\n##### Object.prototype.hasOwnProperty()\n返回一个布尔值，表示该实例对象自身是否具有该属性。\n\n### 属性描述对象\n是一种数据结构，用来描述某个属性是否可写、可遍历等。每个属性都有自己的属性描述对象。\n\n#### Object.getOwnPropertyDescription()\n获取属性描述对象\n\n```JS\nObject.getOwnPropertyDescription()\n```\n\n#### 其他方法\n* Object.getOwnPropertyNames()\n* Object.defineProkperty()\n* Object.defineProperties()\n* Object.prototype.propertyIsEnumerable()\n\n\n#### 元属性\n也就是属性描述对象的属性\n* value\n* writable\n* enumerable --- 可以用来设置私密属性，只是不可以遍历到，但是还是可以访问的。如果要获取自身的所有属性（不管是否可遍历，都可以使用getOwnPropertyNames）\n* configurable -- 是否可以修改属性描述对象\n* getter/setter -- 存取器\n\n    存取器有两种写法，一个是在键`get`和`set`的后面直接给出值。另一种是`get p() {}`和`set p(value) {}`\n\n#### 对象的拷贝\n这里要注意的是，怎么拷贝过来get()属性等。\n#### 控制对象状态\n* Object.preventExtentions()\n* Object.isExtensible()\n* Object.seal()\n* Object.isSealed()\n* Object.freeze()\n* Object.isFrozen()\n\n\n### Array对象\n`Array`是JS的原生**对象**，同时也是**构造函数**。\n\n因为当Array构造函数的参数不同时，他的行为很不一致，所以最好直接使用数组字面量来创建新数组。\n\n\n```JS\n//bad \nvar arr = new Array(1, 2);\n\n//good \nvar arr = [1, 2];\n```\n\n#### 静态方法\n##### Array.isArray()\n可以弥补`typeof`运算符的不足。\n\n#### 实例方法\n* valueOf()\n* toString()\n* push(), pop()\n* shift(), unshift()\n* join()---连接数组成员为字符串（可以自定义分隔符）\n* concat() —— 用于多个数组的合并\n* reverse()\n* slice() - arr.slice(start, end) --提取\n* splice() - arr.splice(start, end, addElem1, addElem2 ,....)删除，并且可以在删除的位置添加。返回值是被删除的元素。\n* sort()\n* map()\n* forEach()\n* filter()\n* some(), every()\n* reduce(), reduceRight()\n* indexOf(), lastIndexOf\n\n\n### 包装对象\n就是将三种原始数据类型的值（数值、字符串、布尔值）包装为对象。\n\n## 面向对象程序设计\n### 对象是什么\n可以从两个方面来理解：\n* 对象时**单个实物**的抽象。\n* 对象是一个**容器**，封装了属性和方法。\n\n### 构造函数\nJS与C++不同，没有类的概念，也就是他不是基于类的，而是基于**构造函数（constructor）**和**原型链（prototype）**。JS使用构造函数作为对象的**模板**。一个构造函数，可以生成多个实例对象。\n\n构造函数就是一个普通的函数，但是有自己的特征和用法。\n\n\n```JS\nvar Vehicle = function () {\n    this.price = 100;\n};\n```\n\n为了与普通函数区别，构造函数名字的第一个字母通常大写。\n\nnew命令：因为new命令本身就可以执行函数，不再需要函数的调用，所以可以不加括号执行，但是还是推荐加括号。\n\n\n```JS\nvar v = new Vehicle();\n\nvar v = new Vehicle;\n```\n\n如果不使用`new`命令，而直接调用构造函数，会发生：构造函数变为普通函数，不会再生成实例对象，这里的`this`也将会代表全局对象。\n\n\n#### new命令执行过程\n\n\n\n```JS\nfunction _new(constructor, plarams) {\n    //将arguments对象转为数组\n    var args = [].slice.call(arguments);\n    //取出构造函数\n    var constructor = args.shift();\n    //创建一个空对象，继承构造函数的prototype属性\n    var context = Object.create(constructor.prototype);\n    //执行构造函数\n    var result = constructor.apply(context, args);\n    //如果返回结果是对象，就直接返回，否则返回context对象。\n    return (typeof result === 'object' && result != null) ? result:context;\n}\n\n//实例\nvar actor = _new(Person, '张三', 28);\n```\n\n### 实例化对象的另一个方法Object.create()\n在拿不到构造函数，而只能拿到一个现有的对象的时候，我们可以以这个对象为模板，来生成新的实例对象。\n\n\n\n","source":"_posts/阮一峰JS学习笔记.md","raw":"---\ntitle: 阮一峰JS学习笔记\ndate: 2018-10-14 18:30:03\ntags:\n  - javascript\ncategories: web\n---\n\n# 阮一峰JS学习笔记\n\n## 什么是JS\n它是脚本语言，即不具备开发操作系统的能力，而是只用来编写**控制**其他大型应用程序的”脚本“（比如浏览器）。它是嵌入式语言，即没有IO，只能嵌入更大型得应用程序中，去调用宿主环境的IO。（浏览器、node）\n\n\n## JS都包括什么\n其核心语法相当精简，只包括两部分：\n* 基本的语法构造\n    * 操作符\n    * 控制结构\n    * 语句\n* 标准库\n\n除此之外，因为它要有宿主环境，所以就是一系列宿主环境的API。\n\n## JS难在哪\n* 它涉及大量的外部API\n* JS有不少设计缺陷，某些地方相当不合理。\n\n\n## JS基础\n\n### 语句and表达式\n\n#### 语句\n\n```javascript\nvar a = 1 + 3;\n```\n#### 表达式\n\n```js\n1 + 3\n```\n指为了**得到返回值的**计算式。\n\n两者的区别在于，语句一般是为了进行某种操作，改编程序运行状态，一般不需要返回值；而表达式是为了得到返回值，其一定会返回一个值。凡是JS中**预期为一个值的**地方，都可以放置表达式。\n\n### 变量\n\n变量是对值旳**具名引用**。\n\n#### 变量提升\n\nJS引擎的工作方式是：**先**解析代码，**获取所有的被声明的变量**，然后再一行一行的运行。这样也就是，所有变量声明的语句，都会被提升到代码头部。\n\n\n```js\nconsole.log(a);\nvar a = 1;\n\n```\n\n真正运行的是如下代码\n\n```js\nvar a;\nconsole.log(a);\na = 1;\n```\n\n### 标识符\n也就是用来识别各种值的合法名称。最常见的标识符就是**变量名**，以及**函数名**。\n\n### 区块\n对于`var`命令来说，`{ }`构成的区块不构成单独的作用域。\n\n### 控制结构\n\n#### switch结构\n多个`if--else`结构连在一起的时候，可使用更简单的`switch`结构。\n\n\n```js\nswitch(fruit) {\n    case \"banana\":\n        //...\n        break;\n    case \"apple\":\n        //...\n        break;\n    default:\n        //...\n}\n```\n\n### 标签\nJS语言允许语句的前面有标签。相当于定位符。\n通常与`break`和`continue`配合使用，跳出特定循环。\n\n```js\ntop:\n    for(var i = 0; i < 3; i ++){\n        for(...){\n            if(...){\n                break top;\n            }\n            console.log(...);\n        }\n    }\n```\n\n这样就可以直接跳出外层循环，如果加标签，只默认跳出当前循环。\n\n## 数据类型\n\n### 概述\n* 数值：整数和小数\n* 字符串\n* 布尔值\n* undefined 未定义\n* null 空值\n* 对象\n\n注：前三个成为”原始类型的值”，也就是不能再细分了。对象则是“合成类型”的值。至于那两个英文的，就是特殊值。\n\n而至于**对象**，又可以分为三类：\n* 狭义的对象 object\n* 数组 array\n* 函数 function\n\n#### typeof 运算符\n这是**运算符**！\n\n预告一下，JS共有三种方式可以确定一个值是什么类型的：\n* typeof 运算符\n* instanceof 运算符\n* Object.prototype.toString 方法\n\n\n### null, undefined, 布尔\nnull表示值为空值，比如一个参数表示抛出的错误参数，如果此处无错，就会抛出`null`。\n\nundefined表示未定义\n\n关于布尔值，注意类型转换，空字符串转换为`false`而空数组和空对象则都是`true`。\n### 数值\n注意，JS里的所有数字都是64位浮动点数存储。所以\n\n```js\n1 === 1.0 //true\n```\n\n#### 与数值相关的全局方法\n\n##### parseInt()\n将字符串转为整数\n\n```js\nparseInt('123') //123\n```\n##### parseFloat()\n将字符串转换为浮点数。\n##### isNaN()\n判断一个值是不是`NaN`。\n##### isFinite()\n判断一个数值是不是一个正常的数值。\n### 字符串\n字符串可以像数组一样访问，但是不可以修改单个字符，比如\n\n```JS\nvar s = 'hello';\ns[0] = 'a';\n//这样是改变不了的\n```\n### 对象\n#### 键名\n* 对象的所有键名都是字符串，所以是否加引号都可以。如果键名是数值，也会被自动转换成字符串。但是如果键名不符合明明规范，则必须加上引号，否则会报错。\n* 键名又称为属性。它的值可以是任意类型，如果是函数，则这个属性又称为方法。\n* 值如果是对象，则形成了链式引用。\n\n#### 对象的引用\n如果不同变量名指向同一个变量，那么他们都是这个对象的引用，也就是指向相同的内存地址。改一个，其他的都会变。\n\n**注意：**这种引用仅限于对象，如果是**原始类型的值**的话，那么变量就是值的**拷贝**。\n#### 属性\n* 有两种运算符，一个是点运算符，另一个就是方括号运算符。\n* 需要查看一个对象的所有属性，可以使用`Object.keys(yourObj)'方法。\n* 属性的删除，使用`delete`命令。\n    ```JS\n    delete obj.p\n    ```\n* 要查看属性是否存在，可使用`in`运算符。即使是继承的属性，也会返回`true`。如果不需要继承，看下一条\n* 判断自身属性，可使用`hasOwnProperty()`方法来判断。\n* 怎么遍历对象的全部属性，可以使用`for...in...`循环。\n    ```JS\n    for (var i in onj) {\n        f(i);\n    }\n    ```\n    注意，会遍历继承的属性。但是必须是**可遍历的对象**。\n    \n    如果想遍历自身的属性，那么可以结合`hasOwnProperty()`方法判断一下。\n    \n    #### with 语句\n    ```JS\n    with(对象){\n        语句...\n    }\n    ```\n    \n这样提供的一种便利就是，在操作一个对象的多个属性时，会方便许多。\n    \n注意，`with`区块不会改变作用域，所以如果要给一个新属性赋值，需要先有这个属性才行。\n    \n**建议：**不要使用`with`，可以使用一个临时变量来代替这种功能。\n```JS\n    with(obj1.obj2.obj3) {\n        console.log(p1 + p2);\n    }\n    \n    //可以写成\n    var temp = obj1.obj2.obj3;\n    console.log(temp.p1 + temp.p2);\n```\n    \n    \n    \n    \n\n### 函数\n\n#### 函数的声明\n三种方法\n1. function命令---函数的声明\n2. 函数表达式---变量赋值的写法，将匿名函数赋值给一个变量，这个匿名函数又叫**函数表达式**。\n3. Function构造函数---几乎无人使用，不管了\n\n#### 第一等公民\n函数在js中只是一种可以执行的值而已，与其他值无特殊之处。凡是可以使用值得地方，都可以使用函数。\n#### 函数名得提升\n因为函数名就是变量名，所以使用`function`命里声明函数的时候，整个函数就会像变量声明一样，被提升到顶部。\n#### 函数的属性\n* name属性\n    主要作用：获取作为参数得函数的名字。\n    ```js\n    var myFunc  = function() {};\n    function test(f) {\n        console.log(f.name);\n    }\n    \n    test(myFunc) //得到myFunc\n    ```\n* length属性\n    返回函数预期传入的**参数的个数**，即函数定义中的参数个数。\n    其作用可实现方法的**重载**。\n* toString()\n    返回一个字符串，内容是函数的源码。\n    其作用可以实现多行字符串。\n    \n#### 作用域\n在js中只有两种作用域，一个是**全局作用域**，另一个就是**函数作用域**。\n    \n#### 参数\n* 关于函数值得传递方式\n    * 函数参数如果是原始类型得值，那么就**按值传递**。也就是说在函数体内修改参数值，不会影响到函数外部。    \n    * 如果函数参数是复合类型-（数组、对象、函数）的值，那么传递方式就是传址传递。\n    * 这里有一个小点需要注意一下就是，如果在函数体内部修改了整个参数的值，而不是某个属性。那么原对象的值是不会被修改的。\n\n    ```js\n    var obj = [1. 2. 3];\n    \n    function f(o) {\n        o = [2, 3, 4];\n    }\n    f(obj);\n    ```\n    \n这里，直接让参数o指向了另外一个对象，保存在原地址上的值当然不会受影响。\n    \n#### arguments对象\n只在函数体内部可以使用，这个对象包含了函数运行时的所有参数。`arguments[0]`是第一个参数。\n    `arguments`对象含有一个`callee`属性返回它所对应的函数。\n    \n#### 函数的其他知识点\n* 闭包：也就是能够读取其他函数内部变量的函数。\n    * 小引例：因为js内层的函数可以读取外层函数的变量，而外层函数却能读取内部函数的变量，所以要想实现读取某个内部函数的变量可以通过下面这个函数实现\n          ```js\n          function f1() {\n            var n = 99;\n            function f2(){\n                console.log(n);\n            }\n            return f2;\n          }\n          \n          var result = f1();\n          result(); //99\n          ```\n          \n这样就可以拐弯抹角的实现这个功能了。\n          \n* 闭包在这里就是这个函数`f2` , 他也就是将内部变量和外部变量相互链接的桥梁。\n* 闭包有两个作用\n    * 一个是可以让外部函数访问内部函数的变量\n    * 第二就是可以让运行环境保存住函数内部的变量\n* 闭包还可以封装对象的私有属性和私有方法\n* 闭包会保留外层函数的内部变量，造成内存消耗，不能滥用。\n* 立即调用的函数表达式\n这里有一个很有意思的点，就是`function(){}`既可以当语句又可以当表达式。\n```js\n    //语句\n    function f() {}\n    //表达式\n    var f = function f() {}\n```\n所以为了能够区分，js引擎就认为`function`出现在行首就是一个语句。\n但是加个括号阔起来就可以让引擎认为是一个表达式了。\n```js\n    (function(...){...})();//这样就可以直接调用函数了。\n```\n为了避免污染全局变量，经常会直接调用匿名函数。\n    \n#### eval命令\neval接受一个字符串作为参数，并将这个字符串当做语句执行。\n```js\n    eval('var a = q');\n    a //1\n```\n会影响当前作用域的变量，不推荐使用。一般用来解析JSON但是JSON最好还是用`JSON.parse`方法。\n**注意：**只有`eval()`这一种形式属于直接调用，剩下的全属于别名调用，别名调用的`eval()`通通影响的事**全局**作用域。\n    \n    \n### 数组\n\n#### 引言\n```js\ntyoeof [1,2,3] //\"object\"\n```\n可见数组的类型就是对象，那么数组有什么不同呢，数组的特殊性就体现在它的键名是按次序排列的一组整数`(0,1,2...)`。\n\n但是读取的时候，对于数组的键名，不能使用点号读取。（因为数字开头不是合法的标识符）。\n\n#### 基础\n* length属性\n* in 运算符\n* for ... in ... 循环和数组遍历\n    * 注意，这个不仅会遍历数组的数字键，还会遍历非数字键。\n    * 所以不推荐使用\n* 那么想简历数组最好使用`for`OR`while`循环。\n* 数组的`forEach()`方法也能**遍历数组**。\n#### 空位\n空位不同于`undefined`，遍历数组是，空位不会被遍历。\n#### 类似数组的对象\n只要有`length`属性，就可以认为是类似数组对象，但是它不是数组。要想将其转换为数组可以使用数组的`slice()`方法。\n\n```js\nvar arr = Array.prototype.slice.call(arrayLike);\n```\n\n使用`call()`方法可以对类似数组的对象使用数组的方法。\n\n```js\nArray.prototype.forEach.call(arrayLike, print);\n```\n\n这样就可以让`arrayLike`使用`forEach`方法。\n\n实际使用中最好还是先转成数组再使用。\n\n### 类型转换\n* 注意强制类型转换Number()和parseInt的区别\n    * Number()函数比parseInt()函数要严格很多。基本上，只要有一个字符无法转成述职，整个字符串就是`NaN`。而，`parseInt()`却可以将前几个是数字的字符提取出来。\n* 自动转换的规则\n    * 预期是什么类型的值，就调用该类型得转换函数。\n### 错误处理机制\n#### Error构造函数\n```js\nvar err = new Error('出错信息');\nerr.message // \"出错信息\"\n```\n此外还有几个派生的错误类\n* SyntaxError\n* ReferenceError\n* RangeError\n* TypeError\n* URIError\n* EvalError\n* 自定义错误类型（继承自Error）\n\n#### throw语句\n作用是手动**中断程序**执行，抛出一个错误\n```js\nif(x <= 0){\n    throw new Error('x必须为正数'); //这里抛出一个错误对象\n}\n```\n#### try...catch结构\n发生错误后可以对错误进行处理，捕捉错误，并决定是否执行下去。\n```JS\ntry {\n    throw new Error('error occured');\n} catch(e){ // 这里的参数e就是捕获上面那个try返回的错误对象（这里为了产生错误，强行用了throw语句）\n    console.log(e.name + \": \" + e.message);\n    console.log(e.stack);\n}\n```\n\n#### finally代码块\n`try...catch`后面还可以跟一个`finally`代码块，**无论是否出现错误**，都会执行。\n```JS\nfunction cleanUp(){\n    try{\n        throw new Error('error occured');\n        console.log('此行不会执行');\n    } finally {\n        console.log('完成清理工作');\n    }\n}\n\ncleanUp()\n\n// 完成清理工作\n// Error: error occured\n```\n\n## 标准库\n### Object对象\nJS其他所有对象都是**继承**自`Object`对象，即都是`Object`的**实例**。\n#### 原生方法\n* 一类是`Object`本身的方法，\n    * 即直接定义在Object对象上\n    * \n```js\nObject.print = function (o) { console.log(o)};\n```\n* 还有一类就是`Object`的实例方法。\n    * 即定义在Object原型对象`Object.prototype`上的方法。可以被Object实例直接使用。\n\n    \n```js\nObject.prototype.print = function () {\n    console.log(this);\n};\n\nvar obj = new Object();\nobj.print()\n```\n\n* obj会直接继承 `Object.prototype` 上的方法.\n\n    \n    \n#### 将Object()看为一个普通函数（工具函数）\n\n功能1：将任意值转换为对象\n\n```JS\nvar obj  = Object();\n\nvar obj2 = Object('foo');\n\nvar obj3 = Object(100);\n```\n\n功能2：判断某个变量是不是对象。因为Object有一个特点，就是当他的参数本身就是个对象的话，那么返回的还是原变量。\n\n```JS\nvar arr = [];\nvar obj = Object(arr); // 返回原数组\nobj === arr //true\n```\n\n#### 当Object()是构造函数时\n\n即前面可以使用`new`命令。使用方法几乎等同于工具函数Object()，但是语义不一样。工具函数是指**转换**成对象。\n\n#### Object静态方法（即将Object看成一个普通的对象）\n即部署在Object对象自身的方法。\n##### 遍历对象的属性\n* Object.keys()\n* Object.getOwnPropertyNames()\n\n这两个的参数都是一个对象。区别在于，keys只返回可枚举的属性，而getOwnPropertyNames方法还可以返回补课枚举的属性。\n\n#### 其他方法\n* 对象属性模型的相关方法\n* 控制对象状态的方法\n* 原型链相关方法\n\n\n#### Object的实例方法\n也就是定义在Object.prototype对象上的方法。所有Object的实例对象都继承了这些方法。\n##### Object.prototype.valueOf()\n返回一个对象的值，默认返回对象本身。其主要作用在于，自动类型转换时会**调用**。\n##### Obbject.prototype.toString()\n返回一个对象的字符串形式。默认返回**类型**字符串。也用于自动类型转换。可以得到想要的字符串形式。\n**注意，**这些函数有可能被用户重写，如果依然想调用，最好使用`Object.prototype.toString.call()`方法。\n可以用于判断类型以及构造函数。这样会比`typeof`运算符更精确。\n##### Object.prototype.toLocalString()\n与`toString`基本相同，也是返回字符串，但是可以加上一些用户的信息。比如返回日期的实例类型对象时，就和地域相关。\n##### Object.prototype.hasOwnProperty()\n返回一个布尔值，表示该实例对象自身是否具有该属性。\n\n### 属性描述对象\n是一种数据结构，用来描述某个属性是否可写、可遍历等。每个属性都有自己的属性描述对象。\n\n#### Object.getOwnPropertyDescription()\n获取属性描述对象\n\n```JS\nObject.getOwnPropertyDescription()\n```\n\n#### 其他方法\n* Object.getOwnPropertyNames()\n* Object.defineProkperty()\n* Object.defineProperties()\n* Object.prototype.propertyIsEnumerable()\n\n\n#### 元属性\n也就是属性描述对象的属性\n* value\n* writable\n* enumerable --- 可以用来设置私密属性，只是不可以遍历到，但是还是可以访问的。如果要获取自身的所有属性（不管是否可遍历，都可以使用getOwnPropertyNames）\n* configurable -- 是否可以修改属性描述对象\n* getter/setter -- 存取器\n\n    存取器有两种写法，一个是在键`get`和`set`的后面直接给出值。另一种是`get p() {}`和`set p(value) {}`\n\n#### 对象的拷贝\n这里要注意的是，怎么拷贝过来get()属性等。\n#### 控制对象状态\n* Object.preventExtentions()\n* Object.isExtensible()\n* Object.seal()\n* Object.isSealed()\n* Object.freeze()\n* Object.isFrozen()\n\n\n### Array对象\n`Array`是JS的原生**对象**，同时也是**构造函数**。\n\n因为当Array构造函数的参数不同时，他的行为很不一致，所以最好直接使用数组字面量来创建新数组。\n\n\n```JS\n//bad \nvar arr = new Array(1, 2);\n\n//good \nvar arr = [1, 2];\n```\n\n#### 静态方法\n##### Array.isArray()\n可以弥补`typeof`运算符的不足。\n\n#### 实例方法\n* valueOf()\n* toString()\n* push(), pop()\n* shift(), unshift()\n* join()---连接数组成员为字符串（可以自定义分隔符）\n* concat() —— 用于多个数组的合并\n* reverse()\n* slice() - arr.slice(start, end) --提取\n* splice() - arr.splice(start, end, addElem1, addElem2 ,....)删除，并且可以在删除的位置添加。返回值是被删除的元素。\n* sort()\n* map()\n* forEach()\n* filter()\n* some(), every()\n* reduce(), reduceRight()\n* indexOf(), lastIndexOf\n\n\n### 包装对象\n就是将三种原始数据类型的值（数值、字符串、布尔值）包装为对象。\n\n## 面向对象程序设计\n### 对象是什么\n可以从两个方面来理解：\n* 对象时**单个实物**的抽象。\n* 对象是一个**容器**，封装了属性和方法。\n\n### 构造函数\nJS与C++不同，没有类的概念，也就是他不是基于类的，而是基于**构造函数（constructor）**和**原型链（prototype）**。JS使用构造函数作为对象的**模板**。一个构造函数，可以生成多个实例对象。\n\n构造函数就是一个普通的函数，但是有自己的特征和用法。\n\n\n```JS\nvar Vehicle = function () {\n    this.price = 100;\n};\n```\n\n为了与普通函数区别，构造函数名字的第一个字母通常大写。\n\nnew命令：因为new命令本身就可以执行函数，不再需要函数的调用，所以可以不加括号执行，但是还是推荐加括号。\n\n\n```JS\nvar v = new Vehicle();\n\nvar v = new Vehicle;\n```\n\n如果不使用`new`命令，而直接调用构造函数，会发生：构造函数变为普通函数，不会再生成实例对象，这里的`this`也将会代表全局对象。\n\n\n#### new命令执行过程\n\n\n\n```JS\nfunction _new(constructor, plarams) {\n    //将arguments对象转为数组\n    var args = [].slice.call(arguments);\n    //取出构造函数\n    var constructor = args.shift();\n    //创建一个空对象，继承构造函数的prototype属性\n    var context = Object.create(constructor.prototype);\n    //执行构造函数\n    var result = constructor.apply(context, args);\n    //如果返回结果是对象，就直接返回，否则返回context对象。\n    return (typeof result === 'object' && result != null) ? result:context;\n}\n\n//实例\nvar actor = _new(Person, '张三', 28);\n```\n\n### 实例化对象的另一个方法Object.create()\n在拿不到构造函数，而只能拿到一个现有的对象的时候，我们可以以这个对象为模板，来生成新的实例对象。\n\n\n\n","slug":"阮一峰JS学习笔记","published":1,"updated":"2018-10-14T15:27:55.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpccu66q003rjcm19cxfbnux","content":"<h1 id=\"阮一峰JS学习笔记\"><a href=\"#阮一峰JS学习笔记\" class=\"headerlink\" title=\"阮一峰JS学习笔记\"></a>阮一峰JS学习笔记</h1><h2 id=\"什么是JS\"><a href=\"#什么是JS\" class=\"headerlink\" title=\"什么是JS\"></a>什么是JS</h2><p>它是脚本语言，即不具备开发操作系统的能力，而是只用来编写<strong>控制</strong>其他大型应用程序的”脚本“（比如浏览器）。它是嵌入式语言，即没有IO，只能嵌入更大型得应用程序中，去调用宿主环境的IO。（浏览器、node）</p>\n<h2 id=\"JS都包括什么\"><a href=\"#JS都包括什么\" class=\"headerlink\" title=\"JS都包括什么\"></a>JS都包括什么</h2><p>其核心语法相当精简，只包括两部分：</p>\n<ul>\n<li>基本的语法构造<ul>\n<li>操作符</li>\n<li>控制结构</li>\n<li>语句</li>\n</ul>\n</li>\n<li>标准库</li>\n</ul>\n<p>除此之外，因为它要有宿主环境，所以就是一系列宿主环境的API。</p>\n<h2 id=\"JS难在哪\"><a href=\"#JS难在哪\" class=\"headerlink\" title=\"JS难在哪\"></a>JS难在哪</h2><ul>\n<li>它涉及大量的外部API</li>\n<li>JS有不少设计缺陷，某些地方相当不合理。</li>\n</ul>\n<h2 id=\"JS基础\"><a href=\"#JS基础\" class=\"headerlink\" title=\"JS基础\"></a>JS基础</h2><h3 id=\"语句and表达式\"><a href=\"#语句and表达式\" class=\"headerlink\" title=\"语句and表达式\"></a>语句and表达式</h3><h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>指为了<strong>得到返回值的</strong>计算式。</p>\n<p>两者的区别在于，语句一般是为了进行某种操作，改编程序运行状态，一般不需要返回值；而表达式是为了得到返回值，其一定会返回一个值。凡是JS中<strong>预期为一个值的</strong>地方，都可以放置表达式。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量是对值旳<strong>具名引用</strong>。</p>\n<h4 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h4><p>JS引擎的工作方式是：<strong>先</strong>解析代码，<strong>获取所有的被声明的变量</strong>，然后再一行一行的运行。这样也就是，所有变量声明的语句，都会被提升到代码头部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>真正运行的是如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>也就是用来识别各种值的合法名称。最常见的标识符就是<strong>变量名</strong>，以及<strong>函数名</strong>。</p>\n<h3 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h3><p>对于<code>var</code>命令来说，<code>{ }</code>构成的区块不构成单独的作用域。</p>\n<h3 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h3><h4 id=\"switch结构\"><a href=\"#switch结构\" class=\"headerlink\" title=\"switch结构\"></a>switch结构</h4><p>多个<code>if--else</code>结构连在一起的时候，可使用更简单的<code>switch</code>结构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(fruit) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"banana\"</span>:</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"apple\"</span>:</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>JS语言允许语句的前面有标签。相当于定位符。<br>通常与<code>break</code>和<code>continue</code>配合使用，跳出特定循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top:</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(...)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(...)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> top;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(...);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以直接跳出外层循环，如果加标签，只默认跳出当前循环。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>数值：整数和小数</li>\n<li>字符串</li>\n<li>布尔值</li>\n<li>undefined 未定义</li>\n<li>null 空值</li>\n<li>对象</li>\n</ul>\n<p>注：前三个成为”原始类型的值”，也就是不能再细分了。对象则是“合成类型”的值。至于那两个英文的，就是特殊值。</p>\n<p>而至于<strong>对象</strong>，又可以分为三类：</p>\n<ul>\n<li>狭义的对象 object</li>\n<li>数组 array</li>\n<li>函数 function</li>\n</ul>\n<h4 id=\"typeof-运算符\"><a href=\"#typeof-运算符\" class=\"headerlink\" title=\"typeof 运算符\"></a>typeof 运算符</h4><p>这是<strong>运算符</strong>！</p>\n<p>预告一下，JS共有三种方式可以确定一个值是什么类型的：</p>\n<ul>\n<li>typeof 运算符</li>\n<li>instanceof 运算符</li>\n<li>Object.prototype.toString 方法</li>\n</ul>\n<h3 id=\"null-undefined-布尔\"><a href=\"#null-undefined-布尔\" class=\"headerlink\" title=\"null, undefined, 布尔\"></a>null, undefined, 布尔</h3><p>null表示值为空值，比如一个参数表示抛出的错误参数，如果此处无错，就会抛出<code>null</code>。</p>\n<p>undefined表示未定义</p>\n<p>关于布尔值，注意类型转换，空字符串转换为<code>false</code>而空数组和空对象则都是<code>true</code>。</p>\n<h3 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h3><p>注意，JS里的所有数字都是64位浮动点数存储。所以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1.0</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"与数值相关的全局方法\"><a href=\"#与数值相关的全局方法\" class=\"headerlink\" title=\"与数值相关的全局方法\"></a>与数值相关的全局方法</h4><h5 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h5><p>将字符串转为整数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'123'</span>) <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h5><p>将字符串转换为浮点数。</p>\n<h5 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN()\"></a>isNaN()</h5><p>判断一个值是不是<code>NaN</code>。</p>\n<h5 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite()\"></a>isFinite()</h5><p>判断一个数值是不是一个正常的数值。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串可以像数组一样访问，但是不可以修改单个字符，比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"comment\">//这样是改变不了的</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h4 id=\"键名\"><a href=\"#键名\" class=\"headerlink\" title=\"键名\"></a>键名</h4><ul>\n<li>对象的所有键名都是字符串，所以是否加引号都可以。如果键名是数值，也会被自动转换成字符串。但是如果键名不符合明明规范，则必须加上引号，否则会报错。</li>\n<li>键名又称为属性。它的值可以是任意类型，如果是函数，则这个属性又称为方法。</li>\n<li>值如果是对象，则形成了链式引用。</li>\n</ul>\n<h4 id=\"对象的引用\"><a href=\"#对象的引用\" class=\"headerlink\" title=\"对象的引用\"></a>对象的引用</h4><p>如果不同变量名指向同一个变量，那么他们都是这个对象的引用，也就是指向相同的内存地址。改一个，其他的都会变。</p>\n<p><strong>注意：</strong>这种引用仅限于对象，如果是<strong>原始类型的值</strong>的话，那么变量就是值的<strong>拷贝</strong>。</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><ul>\n<li>有两种运算符，一个是点运算符，另一个就是方括号运算符。</li>\n<li>需要查看一个对象的所有属性，可以使用`Object.keys(yourObj)’方法。</li>\n<li><p>属性的删除，使用<code>delete</code>命令。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> obj.p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要查看属性是否存在，可使用<code>in</code>运算符。即使是继承的属性，也会返回<code>true</code>。如果不需要继承，看下一条</p>\n</li>\n<li>判断自身属性，可使用<code>hasOwnProperty()</code>方法来判断。</li>\n<li><p>怎么遍历对象的全部属性，可以使用<code>for...in...</code>循环。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> onj) &#123;</span><br><span class=\"line\">    f(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  注意，会遍历继承的属性。但是必须是<strong>可遍历的对象</strong>。</p>\n<p>  如果想遍历自身的属性，那么可以结合<code>hasOwnProperty()</code>方法判断一下。</p>\n<h4 id=\"with-语句\"><a href=\"#with-语句\" class=\"headerlink\" title=\"with 语句\"></a>with 语句</h4>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(对象)&#123;</span><br><span class=\"line\">    语句...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样提供的一种便利就是，在操作一个对象的多个属性时，会方便许多。</p>\n<p>注意，<code>with</code>区块不会改变作用域，所以如果要给一个新属性赋值，需要先有这个属性才行。</p>\n<p><strong>建议：</strong>不要使用<code>with</code>，可以使用一个临时变量来代替这种功能。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(obj1.obj2.obj3) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p1 + p2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj1.obj2.obj3;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp.p1 + temp.p2);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p>三种方法</p>\n<ol>\n<li>function命令—函数的声明</li>\n<li>函数表达式—变量赋值的写法，将匿名函数赋值给一个变量，这个匿名函数又叫<strong>函数表达式</strong>。</li>\n<li>Function构造函数—几乎无人使用，不管了</li>\n</ol>\n<h4 id=\"第一等公民\"><a href=\"#第一等公民\" class=\"headerlink\" title=\"第一等公民\"></a>第一等公民</h4><p>函数在js中只是一种可以执行的值而已，与其他值无特殊之处。凡是可以使用值得地方，都可以使用函数。</p>\n<h4 id=\"函数名得提升\"><a href=\"#函数名得提升\" class=\"headerlink\" title=\"函数名得提升\"></a>函数名得提升</h4><p>因为函数名就是变量名，所以使用<code>function</code>命里声明函数的时候，整个函数就会像变量声明一样，被提升到顶部。</p>\n<h4 id=\"函数的属性\"><a href=\"#函数的属性\" class=\"headerlink\" title=\"函数的属性\"></a>函数的属性</h4><ul>\n<li><p>name属性<br>  主要作用：获取作为参数得函数的名字。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myFunc  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(myFunc) <span class=\"comment\">//得到myFunc</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>length属性<br>  返回函数预期传入的<strong>参数的个数</strong>，即函数定义中的参数个数。<br>  其作用可实现方法的<strong>重载</strong>。</p>\n</li>\n<li>toString()<br>  返回一个字符串，内容是函数的源码。<br>  其作用可以实现多行字符串。</li>\n</ul>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>在js中只有两种作用域，一个是<strong>全局作用域</strong>，另一个就是<strong>函数作用域</strong>。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><p>关于函数值得传递方式</p>\n<ul>\n<li>函数参数如果是原始类型得值，那么就<strong>按值传递</strong>。也就是说在函数体内修改参数值，不会影响到函数外部。    </li>\n<li>如果函数参数是复合类型-（数组、对象、函数）的值，那么传递方式就是传址传递。</li>\n<li><p>这里有一个小点需要注意一下就是，如果在函数体内部修改了整个参数的值，而不是某个属性。那么原对象的值是不会被修改的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"number\">1.</span> <span class=\"number\">2.</span> <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    o = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(obj);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>这里，直接让参数o指向了另外一个对象，保存在原地址上的值当然不会受影响。</p>\n<h4 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h4><p>只在函数体内部可以使用，这个对象包含了函数运行时的所有参数。<code>arguments[0]</code>是第一个参数。<br>    <code>arguments</code>对象含有一个<code>callee</code>属性返回它所对应的函数。</p>\n<h4 id=\"函数的其他知识点\"><a href=\"#函数的其他知识点\" class=\"headerlink\" title=\"函数的其他知识点\"></a>函数的其他知识点</h4><ul>\n<li>闭包：也就是能够读取其他函数内部变量的函数。<ul>\n<li>小引例：因为js内层的函数可以读取外层函数的变量，而外层函数却能读取内部函数的变量，所以要想实现读取某个内部函数的变量可以通过下面这个函数实现<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">99</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = f1();</span><br><span class=\"line\">result(); <span class=\"comment\">//99</span></span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>这样就可以拐弯抹角的实现这个功能了。</p>\n<ul>\n<li>闭包在这里就是这个函数<code>f2</code> , 他也就是将内部变量和外部变量相互链接的桥梁。</li>\n<li>闭包有两个作用<ul>\n<li>一个是可以让外部函数访问内部函数的变量</li>\n<li>第二就是可以让运行环境保存住函数内部的变量</li>\n</ul>\n</li>\n<li>闭包还可以封装对象的私有属性和私有方法</li>\n<li>闭包会保留外层函数的内部变量，造成内存消耗，不能滥用。</li>\n<li>立即调用的函数表达式<br>这里有一个很有意思的点，就是<code>function(){}</code>既可以当语句又可以当表达式。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语句</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>所以为了能够区分，js引擎就认为<code>function</code>出现在行首就是一个语句。<br>但是加个括号阔起来就可以让引擎认为是一个表达式了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...</span>)</span>&#123;...&#125;)();<span class=\"comment\">//这样就可以直接调用函数了。</span></span><br></pre></td></tr></table></figure></p>\n<p>为了避免污染全局变量，经常会直接调用匿名函数。</p>\n<h4 id=\"eval命令\"><a href=\"#eval命令\" class=\"headerlink\" title=\"eval命令\"></a>eval命令</h4><p>eval接受一个字符串作为参数，并将这个字符串当做语句执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'var a = q'</span>);</span><br><span class=\"line\">a <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure></p>\n<p>会影响当前作用域的变量，不推荐使用。一般用来解析JSON但是JSON最好还是用<code>JSON.parse</code>方法。<br><strong>注意：</strong>只有<code>eval()</code>这一种形式属于直接调用，剩下的全属于别名调用，别名调用的<code>eval()</code>通通影响的事<strong>全局</strong>作用域。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tyoeof [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">//\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>可见数组的类型就是对象，那么数组有什么不同呢，数组的特殊性就体现在它的键名是按次序排列的一组整数<code>(0,1,2...)</code>。</p>\n<p>但是读取的时候，对于数组的键名，不能使用点号读取。（因为数字开头不是合法的标识符）。</p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><ul>\n<li>length属性</li>\n<li>in 运算符</li>\n<li>for … in … 循环和数组遍历<ul>\n<li>注意，这个不仅会遍历数组的数字键，还会遍历非数字键。</li>\n<li>所以不推荐使用</li>\n</ul>\n</li>\n<li>那么想简历数组最好使用<code>for</code>OR<code>while</code>循环。</li>\n<li>数组的<code>forEach()</code>方法也能<strong>遍历数组</strong>。<h4 id=\"空位\"><a href=\"#空位\" class=\"headerlink\" title=\"空位\"></a>空位</h4>空位不同于<code>undefined</code>，遍历数组是，空位不会被遍历。<h4 id=\"类似数组的对象\"><a href=\"#类似数组的对象\" class=\"headerlink\" title=\"类似数组的对象\"></a>类似数组的对象</h4>只要有<code>length</code>属性，就可以认为是类似数组对象，但是它不是数组。要想将其转换为数组可以使用数组的<code>slice()</code>方法。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"built_in\">Array</span>.prototype.slice.call(arrayLike);</span><br></pre></td></tr></table></figure>\n<p>使用<code>call()</code>方法可以对类似数组的对象使用数组的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(arrayLike, print);</span><br></pre></td></tr></table></figure>\n<p>这样就可以让<code>arrayLike</code>使用<code>forEach</code>方法。</p>\n<p>实际使用中最好还是先转成数组再使用。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li>注意强制类型转换Number()和parseInt的区别<ul>\n<li>Number()函数比parseInt()函数要严格很多。基本上，只要有一个字符无法转成述职，整个字符串就是<code>NaN</code>。而，<code>parseInt()</code>却可以将前几个是数字的字符提取出来。</li>\n</ul>\n</li>\n<li>自动转换的规则<ul>\n<li>预期是什么类型的值，就调用该类型得转换函数。<h3 id=\"错误处理机制\"><a href=\"#错误处理机制\" class=\"headerlink\" title=\"错误处理机制\"></a>错误处理机制</h3><h4 id=\"Error构造函数\"><a href=\"#Error构造函数\" class=\"headerlink\" title=\"Error构造函数\"></a>Error构造函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'出错信息'</span>);</span><br><span class=\"line\">err.message <span class=\"comment\">// \"出错信息\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>此外还有几个派生的错误类</p>\n<ul>\n<li>SyntaxError</li>\n<li>ReferenceError</li>\n<li>RangeError</li>\n<li>TypeError</li>\n<li>URIError</li>\n<li>EvalError</li>\n<li>自定义错误类型（继承自Error）</li>\n</ul>\n<h4 id=\"throw语句\"><a href=\"#throw语句\" class=\"headerlink\" title=\"throw语句\"></a>throw语句</h4><p>作用是手动<strong>中断程序</strong>执行，抛出一个错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'x必须为正数'</span>); <span class=\"comment\">//这里抛出一个错误对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"try…catch结构\"><a href=\"#try…catch结构\" class=\"headerlink\" title=\"try…catch结构\"></a>try…catch结构</h4><p>发生错误后可以对错误进行处理，捕捉错误，并决定是否执行下去。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error occured'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e)&#123; <span class=\"comment\">// 这里的参数e就是捕获上面那个try返回的错误对象（这里为了产生错误，强行用了throw语句）</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.name + <span class=\"string\">\": \"</span> + e.message);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.stack);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"finally代码块\"><a href=\"#finally代码块\" class=\"headerlink\" title=\"finally代码块\"></a>finally代码块</h4><p><code>try...catch</code>后面还可以跟一个<code>finally</code>代码块，<strong>无论是否出现错误</strong>，都会执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cleanUp</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error occured'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'此行不会执行'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'完成清理工作'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cleanUp()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成清理工作</span></span><br><span class=\"line\"><span class=\"comment\">// Error: error occured</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"标准库\"><a href=\"#标准库\" class=\"headerlink\" title=\"标准库\"></a>标准库</h2><h3 id=\"Object对象\"><a href=\"#Object对象\" class=\"headerlink\" title=\"Object对象\"></a>Object对象</h3><p>JS其他所有对象都是<strong>继承</strong>自<code>Object</code>对象，即都是<code>Object</code>的<strong>实例</strong>。</p>\n<h4 id=\"原生方法\"><a href=\"#原生方法\" class=\"headerlink\" title=\"原生方法\"></a>原生方法</h4><ul>\n<li><p>一类是<code>Object</code>本身的方法，</p>\n<ul>\n<li>即直接定义在Object对象上</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.print = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"built_in\">console</span>.log(o)&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>还有一类就是<code>Object</code>的实例方法。</p>\n<ul>\n<li>即定义在Object原型对象<code>Object.prototype</code>上的方法。可以被Object实例直接使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.print = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">obj.print()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>obj会直接继承 <code>Object.prototype</code> 上的方法.</li>\n</ul>\n<h4 id=\"将Object-看为一个普通函数（工具函数）\"><a href=\"#将Object-看为一个普通函数（工具函数）\" class=\"headerlink\" title=\"将Object()看为一个普通函数（工具函数）\"></a>将Object()看为一个普通函数（工具函数）</h4><p>功能1：将任意值转换为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj  = <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"built_in\">Object</span>(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>功能2：判断某个变量是不是对象。因为Object有一个特点，就是当他的参数本身就是个对象的话，那么返回的还是原变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>(arr); <span class=\"comment\">// 返回原数组</span></span><br><span class=\"line\">obj === arr <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当Object-是构造函数时\"><a href=\"#当Object-是构造函数时\" class=\"headerlink\" title=\"当Object()是构造函数时\"></a>当Object()是构造函数时</h4><p>即前面可以使用<code>new</code>命令。使用方法几乎等同于工具函数Object()，但是语义不一样。工具函数是指<strong>转换</strong>成对象。</p>\n<h4 id=\"Object静态方法（即将Object看成一个普通的对象）\"><a href=\"#Object静态方法（即将Object看成一个普通的对象）\" class=\"headerlink\" title=\"Object静态方法（即将Object看成一个普通的对象）\"></a>Object静态方法（即将Object看成一个普通的对象）</h4><p>即部署在Object对象自身的方法。</p>\n<h5 id=\"遍历对象的属性\"><a href=\"#遍历对象的属性\" class=\"headerlink\" title=\"遍历对象的属性\"></a>遍历对象的属性</h5><ul>\n<li>Object.keys()</li>\n<li>Object.getOwnPropertyNames()</li>\n</ul>\n<p>这两个的参数都是一个对象。区别在于，keys只返回可枚举的属性，而getOwnPropertyNames方法还可以返回补课枚举的属性。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li>对象属性模型的相关方法</li>\n<li>控制对象状态的方法</li>\n<li>原型链相关方法</li>\n</ul>\n<h4 id=\"Object的实例方法\"><a href=\"#Object的实例方法\" class=\"headerlink\" title=\"Object的实例方法\"></a>Object的实例方法</h4><p>也就是定义在Object.prototype对象上的方法。所有Object的实例对象都继承了这些方法。</p>\n<h5 id=\"Object-prototype-valueOf\"><a href=\"#Object-prototype-valueOf\" class=\"headerlink\" title=\"Object.prototype.valueOf()\"></a>Object.prototype.valueOf()</h5><p>返回一个对象的值，默认返回对象本身。其主要作用在于，自动类型转换时会<strong>调用</strong>。</p>\n<h5 id=\"Obbject-prototype-toString\"><a href=\"#Obbject-prototype-toString\" class=\"headerlink\" title=\"Obbject.prototype.toString()\"></a>Obbject.prototype.toString()</h5><p>返回一个对象的字符串形式。默认返回<strong>类型</strong>字符串。也用于自动类型转换。可以得到想要的字符串形式。<br><strong>注意，</strong>这些函数有可能被用户重写，如果依然想调用，最好使用<code>Object.prototype.toString.call()</code>方法。<br>可以用于判断类型以及构造函数。这样会比<code>typeof</code>运算符更精确。</p>\n<h5 id=\"Object-prototype-toLocalString\"><a href=\"#Object-prototype-toLocalString\" class=\"headerlink\" title=\"Object.prototype.toLocalString()\"></a>Object.prototype.toLocalString()</h5><p>与<code>toString</code>基本相同，也是返回字符串，但是可以加上一些用户的信息。比如返回日期的实例类型对象时，就和地域相关。</p>\n<h5 id=\"Object-prototype-hasOwnProperty\"><a href=\"#Object-prototype-hasOwnProperty\" class=\"headerlink\" title=\"Object.prototype.hasOwnProperty()\"></a>Object.prototype.hasOwnProperty()</h5><p>返回一个布尔值，表示该实例对象自身是否具有该属性。</p>\n<h3 id=\"属性描述对象\"><a href=\"#属性描述对象\" class=\"headerlink\" title=\"属性描述对象\"></a>属性描述对象</h3><p>是一种数据结构，用来描述某个属性是否可写、可遍历等。每个属性都有自己的属性描述对象。</p>\n<h4 id=\"Object-getOwnPropertyDescription\"><a href=\"#Object-getOwnPropertyDescription\" class=\"headerlink\" title=\"Object.getOwnPropertyDescription()\"></a>Object.getOwnPropertyDescription()</h4><p>获取属性描述对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescription()</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他方法-1\"><a href=\"#其他方法-1\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li>Object.getOwnPropertyNames()</li>\n<li>Object.defineProkperty()</li>\n<li>Object.defineProperties()</li>\n<li>Object.prototype.propertyIsEnumerable()</li>\n</ul>\n<h4 id=\"元属性\"><a href=\"#元属性\" class=\"headerlink\" title=\"元属性\"></a>元属性</h4><p>也就是属性描述对象的属性</p>\n<ul>\n<li>value</li>\n<li>writable</li>\n<li>enumerable — 可以用来设置私密属性，只是不可以遍历到，但是还是可以访问的。如果要获取自身的所有属性（不管是否可遍历，都可以使用getOwnPropertyNames）</li>\n<li>configurable – 是否可以修改属性描述对象</li>\n<li><p>getter/setter – 存取器</p>\n<p>  存取器有两种写法，一个是在键<code>get</code>和<code>set</code>的后面直接给出值。另一种是<code>get p() {}</code>和<code>set p(value) {}</code></p>\n</li>\n</ul>\n<h4 id=\"对象的拷贝\"><a href=\"#对象的拷贝\" class=\"headerlink\" title=\"对象的拷贝\"></a>对象的拷贝</h4><p>这里要注意的是，怎么拷贝过来get()属性等。</p>\n<h4 id=\"控制对象状态\"><a href=\"#控制对象状态\" class=\"headerlink\" title=\"控制对象状态\"></a>控制对象状态</h4><ul>\n<li>Object.preventExtentions()</li>\n<li>Object.isExtensible()</li>\n<li>Object.seal()</li>\n<li>Object.isSealed()</li>\n<li>Object.freeze()</li>\n<li>Object.isFrozen()</li>\n</ul>\n<h3 id=\"Array对象\"><a href=\"#Array对象\" class=\"headerlink\" title=\"Array对象\"></a>Array对象</h3><p><code>Array</code>是JS的原生<strong>对象</strong>，同时也是<strong>构造函数</strong>。</p>\n<p>因为当Array构造函数的参数不同时，他的行为很不一致，所以最好直接使用数组字面量来创建新数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//good </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><h5 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h5><p>可以弥补<code>typeof</code>运算符的不足。</p>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><ul>\n<li>valueOf()</li>\n<li>toString()</li>\n<li>push(), pop()</li>\n<li>shift(), unshift()</li>\n<li>join()—连接数组成员为字符串（可以自定义分隔符）</li>\n<li>concat() —— 用于多个数组的合并</li>\n<li>reverse()</li>\n<li>slice() - arr.slice(start, end) –提取</li>\n<li>splice() - arr.splice(start, end, addElem1, addElem2 ,….)删除，并且可以在删除的位置添加。返回值是被删除的元素。</li>\n<li>sort()</li>\n<li>map()</li>\n<li>forEach()</li>\n<li>filter()</li>\n<li>some(), every()</li>\n<li>reduce(), reduceRight()</li>\n<li>indexOf(), lastIndexOf</li>\n</ul>\n<h3 id=\"包装对象\"><a href=\"#包装对象\" class=\"headerlink\" title=\"包装对象\"></a>包装对象</h3><p>就是将三种原始数据类型的值（数值、字符串、布尔值）包装为对象。</p>\n<h2 id=\"面向对象程序设计\"><a href=\"#面向对象程序设计\" class=\"headerlink\" title=\"面向对象程序设计\"></a>面向对象程序设计</h2><h3 id=\"对象是什么\"><a href=\"#对象是什么\" class=\"headerlink\" title=\"对象是什么\"></a>对象是什么</h3><p>可以从两个方面来理解：</p>\n<ul>\n<li>对象时<strong>单个实物</strong>的抽象。</li>\n<li>对象是一个<strong>容器</strong>，封装了属性和方法。</li>\n</ul>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>JS与C++不同，没有类的概念，也就是他不是基于类的，而是基于<strong>构造函数（constructor）</strong>和<strong>原型链（prototype）</strong>。JS使用构造函数作为对象的<strong>模板</strong>。一个构造函数，可以生成多个实例对象。</p>\n<p>构造函数就是一个普通的函数，但是有自己的特征和用法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Vehicle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.price = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为了与普通函数区别，构造函数名字的第一个字母通常大写。</p>\n<p>new命令：因为new命令本身就可以执行函数，不再需要函数的调用，所以可以不加括号执行，但是还是推荐加括号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> Vehicle();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> Vehicle;</span><br></pre></td></tr></table></figure>\n<p>如果不使用<code>new</code>命令，而直接调用构造函数，会发生：构造函数变为普通函数，不会再生成实例对象，这里的<code>this</code>也将会代表全局对象。</p>\n<h4 id=\"new命令执行过程\"><a href=\"#new命令执行过程\" class=\"headerlink\" title=\"new命令执行过程\"></a>new命令执行过程</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">constructor, plarams</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将arguments对象转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">//取出构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">constructor</span> = args.shift();</span><br><span class=\"line\">    //创建一个空对象，继承构造函数的prototype属性</span><br><span class=\"line\">    var context = Object.create(<span class=\"keyword\">constructor</span>.prototype);</span><br><span class=\"line\">    //执行构造函数</span><br><span class=\"line\">    var result = <span class=\"keyword\">constructor</span>.apply(context, args);</span><br><span class=\"line\">    //如果返回结果是对象，就直接返回，否则返回context对象。</span><br><span class=\"line\">    return (typeof result === 'object' &amp;&amp; result != null) ? result:context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实例</span><br><span class=\"line\">var actor = _new(Person, '张三', 28);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例化对象的另一个方法Object-create\"><a href=\"#实例化对象的另一个方法Object-create\" class=\"headerlink\" title=\"实例化对象的另一个方法Object.create()\"></a>实例化对象的另一个方法Object.create()</h3><p>在拿不到构造函数，而只能拿到一个现有的对象的时候，我们可以以这个对象为模板，来生成新的实例对象。</p>\n","site":{"data":{"melody":{"language":"zh-Hans","theme_color":{"enable":true,"main":"#000","paginator":"#000","button_hover":"#49B1F5","text_selection":"#000","link_color":"#000","hr_color":"#000","meta_color":"#000"},"menu":{"主页":"/","归档":"/archives","标签":"/tags","分类":"/categories","相册":"/gallery","slides":"/slides"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":null},"highlight_theme":"default","social":{"github":"https://github.com/heliuphy","weibo":"http://weibo.com/2553167443"},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false,"cdn":"https://cdn.bootcss.com/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css"},"js":{"anime":"/js/third-party/anime.min.js","jquery":"/js/third-party/jquery.min.js","fancybox":"/js/third-party/jquery.fancybox.min.js","velocity":"/js/third-party/velocity.min.js","velocity-ui":"/js/third-party/velocity.ui.min.js"}},"avatar":"/avatar.jpg","top_img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/images/beautiful-cold-fog-547115%202.jpg","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":true},"toc":{"enable":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"QR_code":[{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/alipay.jpg","text":"支付宝打赏"}},{"itemlist":{"img":"https://hexo-1252865648.cos.ap-chengdu.myqcloud.com/qrcode/wechat.jpg","text":"微信打赏"}}],"addThis":{"enable":false},"sharejs":{"enable":true,"disabled_sites":"facebook"},"disqus":{"enable":false},"gitalk":{"enable":true,"client_id":"ad7cd539b86faeab9c35","client_secret":"4e6c00fca2d4e6e2c7c725936748e69ecb3a277c","repo":"Gitalk","owner":"heliuphy","admin":"heliuphy"},"since":2016,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null}}}},"excerpt":"","more":"<h1 id=\"阮一峰JS学习笔记\"><a href=\"#阮一峰JS学习笔记\" class=\"headerlink\" title=\"阮一峰JS学习笔记\"></a>阮一峰JS学习笔记</h1><h2 id=\"什么是JS\"><a href=\"#什么是JS\" class=\"headerlink\" title=\"什么是JS\"></a>什么是JS</h2><p>它是脚本语言，即不具备开发操作系统的能力，而是只用来编写<strong>控制</strong>其他大型应用程序的”脚本“（比如浏览器）。它是嵌入式语言，即没有IO，只能嵌入更大型得应用程序中，去调用宿主环境的IO。（浏览器、node）</p>\n<h2 id=\"JS都包括什么\"><a href=\"#JS都包括什么\" class=\"headerlink\" title=\"JS都包括什么\"></a>JS都包括什么</h2><p>其核心语法相当精简，只包括两部分：</p>\n<ul>\n<li>基本的语法构造<ul>\n<li>操作符</li>\n<li>控制结构</li>\n<li>语句</li>\n</ul>\n</li>\n<li>标准库</li>\n</ul>\n<p>除此之外，因为它要有宿主环境，所以就是一系列宿主环境的API。</p>\n<h2 id=\"JS难在哪\"><a href=\"#JS难在哪\" class=\"headerlink\" title=\"JS难在哪\"></a>JS难在哪</h2><ul>\n<li>它涉及大量的外部API</li>\n<li>JS有不少设计缺陷，某些地方相当不合理。</li>\n</ul>\n<h2 id=\"JS基础\"><a href=\"#JS基础\" class=\"headerlink\" title=\"JS基础\"></a>JS基础</h2><h3 id=\"语句and表达式\"><a href=\"#语句and表达式\" class=\"headerlink\" title=\"语句and表达式\"></a>语句and表达式</h3><h4 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span> + <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>指为了<strong>得到返回值的</strong>计算式。</p>\n<p>两者的区别在于，语句一般是为了进行某种操作，改编程序运行状态，一般不需要返回值；而表达式是为了得到返回值，其一定会返回一个值。凡是JS中<strong>预期为一个值的</strong>地方，都可以放置表达式。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量是对值旳<strong>具名引用</strong>。</p>\n<h4 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h4><p>JS引擎的工作方式是：<strong>先</strong>解析代码，<strong>获取所有的被声明的变量</strong>，然后再一行一行的运行。这样也就是，所有变量声明的语句，都会被提升到代码头部。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>真正运行的是如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>也就是用来识别各种值的合法名称。最常见的标识符就是<strong>变量名</strong>，以及<strong>函数名</strong>。</p>\n<h3 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h3><p>对于<code>var</code>命令来说，<code>{ }</code>构成的区块不构成单独的作用域。</p>\n<h3 id=\"控制结构\"><a href=\"#控制结构\" class=\"headerlink\" title=\"控制结构\"></a>控制结构</h3><h4 id=\"switch结构\"><a href=\"#switch结构\" class=\"headerlink\" title=\"switch结构\"></a>switch结构</h4><p>多个<code>if--else</code>结构连在一起的时候，可使用更简单的<code>switch</code>结构。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(fruit) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"banana\"</span>:</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"apple\"</span>:</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p>JS语言允许语句的前面有标签。相当于定位符。<br>通常与<code>break</code>和<code>continue</code>配合使用，跳出特定循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top:</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i ++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(...)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(...)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span> top;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(...);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以直接跳出外层循环，如果加标签，只默认跳出当前循环。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ul>\n<li>数值：整数和小数</li>\n<li>字符串</li>\n<li>布尔值</li>\n<li>undefined 未定义</li>\n<li>null 空值</li>\n<li>对象</li>\n</ul>\n<p>注：前三个成为”原始类型的值”，也就是不能再细分了。对象则是“合成类型”的值。至于那两个英文的，就是特殊值。</p>\n<p>而至于<strong>对象</strong>，又可以分为三类：</p>\n<ul>\n<li>狭义的对象 object</li>\n<li>数组 array</li>\n<li>函数 function</li>\n</ul>\n<h4 id=\"typeof-运算符\"><a href=\"#typeof-运算符\" class=\"headerlink\" title=\"typeof 运算符\"></a>typeof 运算符</h4><p>这是<strong>运算符</strong>！</p>\n<p>预告一下，JS共有三种方式可以确定一个值是什么类型的：</p>\n<ul>\n<li>typeof 运算符</li>\n<li>instanceof 运算符</li>\n<li>Object.prototype.toString 方法</li>\n</ul>\n<h3 id=\"null-undefined-布尔\"><a href=\"#null-undefined-布尔\" class=\"headerlink\" title=\"null, undefined, 布尔\"></a>null, undefined, 布尔</h3><p>null表示值为空值，比如一个参数表示抛出的错误参数，如果此处无错，就会抛出<code>null</code>。</p>\n<p>undefined表示未定义</p>\n<p>关于布尔值，注意类型转换，空字符串转换为<code>false</code>而空数组和空对象则都是<code>true</code>。</p>\n<h3 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h3><p>注意，JS里的所有数字都是64位浮动点数存储。所以</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> === <span class=\"number\">1.0</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"与数值相关的全局方法\"><a href=\"#与数值相关的全局方法\" class=\"headerlink\" title=\"与数值相关的全局方法\"></a>与数值相关的全局方法</h4><h5 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h5><p>将字符串转为整数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'123'</span>) <span class=\"comment\">//123</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h5><p>将字符串转换为浮点数。</p>\n<h5 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN()\"></a>isNaN()</h5><p>判断一个值是不是<code>NaN</code>。</p>\n<h5 id=\"isFinite\"><a href=\"#isFinite\" class=\"headerlink\" title=\"isFinite()\"></a>isFinite()</h5><p>判断一个数值是不是一个正常的数值。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串可以像数组一样访问，但是不可以修改单个字符，比如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"comment\">//这样是改变不了的</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><h4 id=\"键名\"><a href=\"#键名\" class=\"headerlink\" title=\"键名\"></a>键名</h4><ul>\n<li>对象的所有键名都是字符串，所以是否加引号都可以。如果键名是数值，也会被自动转换成字符串。但是如果键名不符合明明规范，则必须加上引号，否则会报错。</li>\n<li>键名又称为属性。它的值可以是任意类型，如果是函数，则这个属性又称为方法。</li>\n<li>值如果是对象，则形成了链式引用。</li>\n</ul>\n<h4 id=\"对象的引用\"><a href=\"#对象的引用\" class=\"headerlink\" title=\"对象的引用\"></a>对象的引用</h4><p>如果不同变量名指向同一个变量，那么他们都是这个对象的引用，也就是指向相同的内存地址。改一个，其他的都会变。</p>\n<p><strong>注意：</strong>这种引用仅限于对象，如果是<strong>原始类型的值</strong>的话，那么变量就是值的<strong>拷贝</strong>。</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><ul>\n<li>有两种运算符，一个是点运算符，另一个就是方括号运算符。</li>\n<li>需要查看一个对象的所有属性，可以使用`Object.keys(yourObj)’方法。</li>\n<li><p>属性的删除，使用<code>delete</code>命令。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> obj.p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要查看属性是否存在，可使用<code>in</code>运算符。即使是继承的属性，也会返回<code>true</code>。如果不需要继承，看下一条</p>\n</li>\n<li>判断自身属性，可使用<code>hasOwnProperty()</code>方法来判断。</li>\n<li><p>怎么遍历对象的全部属性，可以使用<code>for...in...</code>循环。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> onj) &#123;</span><br><span class=\"line\">    f(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  注意，会遍历继承的属性。但是必须是<strong>可遍历的对象</strong>。</p>\n<p>  如果想遍历自身的属性，那么可以结合<code>hasOwnProperty()</code>方法判断一下。</p>\n<h4 id=\"with-语句\"><a href=\"#with-语句\" class=\"headerlink\" title=\"with 语句\"></a>with 语句</h4>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(对象)&#123;</span><br><span class=\"line\">    语句...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样提供的一种便利就是，在操作一个对象的多个属性时，会方便许多。</p>\n<p>注意，<code>with</code>区块不会改变作用域，所以如果要给一个新属性赋值，需要先有这个属性才行。</p>\n<p><strong>建议：</strong>不要使用<code>with</code>，可以使用一个临时变量来代替这种功能。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span>(obj1.obj2.obj3) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p1 + p2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以写成</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = obj1.obj2.obj3;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp.p1 + temp.p2);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p>三种方法</p>\n<ol>\n<li>function命令—函数的声明</li>\n<li>函数表达式—变量赋值的写法，将匿名函数赋值给一个变量，这个匿名函数又叫<strong>函数表达式</strong>。</li>\n<li>Function构造函数—几乎无人使用，不管了</li>\n</ol>\n<h4 id=\"第一等公民\"><a href=\"#第一等公民\" class=\"headerlink\" title=\"第一等公民\"></a>第一等公民</h4><p>函数在js中只是一种可以执行的值而已，与其他值无特殊之处。凡是可以使用值得地方，都可以使用函数。</p>\n<h4 id=\"函数名得提升\"><a href=\"#函数名得提升\" class=\"headerlink\" title=\"函数名得提升\"></a>函数名得提升</h4><p>因为函数名就是变量名，所以使用<code>function</code>命里声明函数的时候，整个函数就会像变量声明一样，被提升到顶部。</p>\n<h4 id=\"函数的属性\"><a href=\"#函数的属性\" class=\"headerlink\" title=\"函数的属性\"></a>函数的属性</h4><ul>\n<li><p>name属性<br>  主要作用：获取作为参数得函数的名字。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myFunc  = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(f.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(myFunc) <span class=\"comment\">//得到myFunc</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>length属性<br>  返回函数预期传入的<strong>参数的个数</strong>，即函数定义中的参数个数。<br>  其作用可实现方法的<strong>重载</strong>。</p>\n</li>\n<li>toString()<br>  返回一个字符串，内容是函数的源码。<br>  其作用可以实现多行字符串。</li>\n</ul>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>在js中只有两种作用域，一个是<strong>全局作用域</strong>，另一个就是<strong>函数作用域</strong>。</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><p>关于函数值得传递方式</p>\n<ul>\n<li>函数参数如果是原始类型得值，那么就<strong>按值传递</strong>。也就是说在函数体内修改参数值，不会影响到函数外部。    </li>\n<li>如果函数参数是复合类型-（数组、对象、函数）的值，那么传递方式就是传址传递。</li>\n<li><p>这里有一个小点需要注意一下就是，如果在函数体内部修改了整个参数的值，而不是某个属性。那么原对象的值是不会被修改的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"number\">1.</span> <span class=\"number\">2.</span> <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    o = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(obj);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>这里，直接让参数o指向了另外一个对象，保存在原地址上的值当然不会受影响。</p>\n<h4 id=\"arguments对象\"><a href=\"#arguments对象\" class=\"headerlink\" title=\"arguments对象\"></a>arguments对象</h4><p>只在函数体内部可以使用，这个对象包含了函数运行时的所有参数。<code>arguments[0]</code>是第一个参数。<br>    <code>arguments</code>对象含有一个<code>callee</code>属性返回它所对应的函数。</p>\n<h4 id=\"函数的其他知识点\"><a href=\"#函数的其他知识点\" class=\"headerlink\" title=\"函数的其他知识点\"></a>函数的其他知识点</h4><ul>\n<li>闭包：也就是能够读取其他函数内部变量的函数。<ul>\n<li>小引例：因为js内层的函数可以读取外层函数的变量，而外层函数却能读取内部函数的变量，所以要想实现读取某个内部函数的变量可以通过下面这个函数实现<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = <span class=\"number\">99</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = f1();</span><br><span class=\"line\">result(); <span class=\"comment\">//99</span></span><br></pre></td></tr></table></figure>\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<p>这样就可以拐弯抹角的实现这个功能了。</p>\n<ul>\n<li>闭包在这里就是这个函数<code>f2</code> , 他也就是将内部变量和外部变量相互链接的桥梁。</li>\n<li>闭包有两个作用<ul>\n<li>一个是可以让外部函数访问内部函数的变量</li>\n<li>第二就是可以让运行环境保存住函数内部的变量</li>\n</ul>\n</li>\n<li>闭包还可以封装对象的私有属性和私有方法</li>\n<li>闭包会保留外层函数的内部变量，造成内存消耗，不能滥用。</li>\n<li>立即调用的函数表达式<br>这里有一个很有意思的点，就是<code>function(){}</code>既可以当语句又可以当表达式。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//语句</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>所以为了能够区分，js引擎就认为<code>function</code>出现在行首就是一个语句。<br>但是加个括号阔起来就可以让引擎认为是一个表达式了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...</span>)</span>&#123;...&#125;)();<span class=\"comment\">//这样就可以直接调用函数了。</span></span><br></pre></td></tr></table></figure></p>\n<p>为了避免污染全局变量，经常会直接调用匿名函数。</p>\n<h4 id=\"eval命令\"><a href=\"#eval命令\" class=\"headerlink\" title=\"eval命令\"></a>eval命令</h4><p>eval接受一个字符串作为参数，并将这个字符串当做语句执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">'var a = q'</span>);</span><br><span class=\"line\">a <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure></p>\n<p>会影响当前作用域的变量，不推荐使用。一般用来解析JSON但是JSON最好还是用<code>JSON.parse</code>方法。<br><strong>注意：</strong>只有<code>eval()</code>这一种形式属于直接调用，剩下的全属于别名调用，别名调用的<code>eval()</code>通通影响的事<strong>全局</strong>作用域。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tyoeof [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] <span class=\"comment\">//\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>可见数组的类型就是对象，那么数组有什么不同呢，数组的特殊性就体现在它的键名是按次序排列的一组整数<code>(0,1,2...)</code>。</p>\n<p>但是读取的时候，对于数组的键名，不能使用点号读取。（因为数字开头不是合法的标识符）。</p>\n<h4 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h4><ul>\n<li>length属性</li>\n<li>in 运算符</li>\n<li>for … in … 循环和数组遍历<ul>\n<li>注意，这个不仅会遍历数组的数字键，还会遍历非数字键。</li>\n<li>所以不推荐使用</li>\n</ul>\n</li>\n<li>那么想简历数组最好使用<code>for</code>OR<code>while</code>循环。</li>\n<li>数组的<code>forEach()</code>方法也能<strong>遍历数组</strong>。<h4 id=\"空位\"><a href=\"#空位\" class=\"headerlink\" title=\"空位\"></a>空位</h4>空位不同于<code>undefined</code>，遍历数组是，空位不会被遍历。<h4 id=\"类似数组的对象\"><a href=\"#类似数组的对象\" class=\"headerlink\" title=\"类似数组的对象\"></a>类似数组的对象</h4>只要有<code>length</code>属性，就可以认为是类似数组对象，但是它不是数组。要想将其转换为数组可以使用数组的<code>slice()</code>方法。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"built_in\">Array</span>.prototype.slice.call(arrayLike);</span><br></pre></td></tr></table></figure>\n<p>使用<code>call()</code>方法可以对类似数组的对象使用数组的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(arrayLike, print);</span><br></pre></td></tr></table></figure>\n<p>这样就可以让<code>arrayLike</code>使用<code>forEach</code>方法。</p>\n<p>实际使用中最好还是先转成数组再使用。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li>注意强制类型转换Number()和parseInt的区别<ul>\n<li>Number()函数比parseInt()函数要严格很多。基本上，只要有一个字符无法转成述职，整个字符串就是<code>NaN</code>。而，<code>parseInt()</code>却可以将前几个是数字的字符提取出来。</li>\n</ul>\n</li>\n<li>自动转换的规则<ul>\n<li>预期是什么类型的值，就调用该类型得转换函数。<h3 id=\"错误处理机制\"><a href=\"#错误处理机制\" class=\"headerlink\" title=\"错误处理机制\"></a>错误处理机制</h3><h4 id=\"Error构造函数\"><a href=\"#Error构造函数\" class=\"headerlink\" title=\"Error构造函数\"></a>Error构造函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'出错信息'</span>);</span><br><span class=\"line\">err.message <span class=\"comment\">// \"出错信息\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>此外还有几个派生的错误类</p>\n<ul>\n<li>SyntaxError</li>\n<li>ReferenceError</li>\n<li>RangeError</li>\n<li>TypeError</li>\n<li>URIError</li>\n<li>EvalError</li>\n<li>自定义错误类型（继承自Error）</li>\n</ul>\n<h4 id=\"throw语句\"><a href=\"#throw语句\" class=\"headerlink\" title=\"throw语句\"></a>throw语句</h4><p>作用是手动<strong>中断程序</strong>执行，抛出一个错误<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'x必须为正数'</span>); <span class=\"comment\">//这里抛出一个错误对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"try…catch结构\"><a href=\"#try…catch结构\" class=\"headerlink\" title=\"try…catch结构\"></a>try…catch结构</h4><p>发生错误后可以对错误进行处理，捕捉错误，并决定是否执行下去。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error occured'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e)&#123; <span class=\"comment\">// 这里的参数e就是捕获上面那个try返回的错误对象（这里为了产生错误，强行用了throw语句）</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.name + <span class=\"string\">\": \"</span> + e.message);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.stack);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"finally代码块\"><a href=\"#finally代码块\" class=\"headerlink\" title=\"finally代码块\"></a>finally代码块</h4><p><code>try...catch</code>后面还可以跟一个<code>finally</code>代码块，<strong>无论是否出现错误</strong>，都会执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cleanUp</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error occured'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'此行不会执行'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'完成清理工作'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">cleanUp()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成清理工作</span></span><br><span class=\"line\"><span class=\"comment\">// Error: error occured</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"标准库\"><a href=\"#标准库\" class=\"headerlink\" title=\"标准库\"></a>标准库</h2><h3 id=\"Object对象\"><a href=\"#Object对象\" class=\"headerlink\" title=\"Object对象\"></a>Object对象</h3><p>JS其他所有对象都是<strong>继承</strong>自<code>Object</code>对象，即都是<code>Object</code>的<strong>实例</strong>。</p>\n<h4 id=\"原生方法\"><a href=\"#原生方法\" class=\"headerlink\" title=\"原生方法\"></a>原生方法</h4><ul>\n<li><p>一类是<code>Object</code>本身的方法，</p>\n<ul>\n<li>即直接定义在Object对象上</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.print = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>) </span>&#123; <span class=\"built_in\">console</span>.log(o)&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>还有一类就是<code>Object</code>的实例方法。</p>\n<ul>\n<li>即定义在Object原型对象<code>Object.prototype</code>上的方法。可以被Object实例直接使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.print = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">obj.print()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>obj会直接继承 <code>Object.prototype</code> 上的方法.</li>\n</ul>\n<h4 id=\"将Object-看为一个普通函数（工具函数）\"><a href=\"#将Object-看为一个普通函数（工具函数）\" class=\"headerlink\" title=\"将Object()看为一个普通函数（工具函数）\"></a>将Object()看为一个普通函数（工具函数）</h4><p>功能1：将任意值转换为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj  = <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"built_in\">Object</span>(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>功能2：判断某个变量是不是对象。因为Object有一个特点，就是当他的参数本身就是个对象的话，那么返回的还是原变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">Object</span>(arr); <span class=\"comment\">// 返回原数组</span></span><br><span class=\"line\">obj === arr <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当Object-是构造函数时\"><a href=\"#当Object-是构造函数时\" class=\"headerlink\" title=\"当Object()是构造函数时\"></a>当Object()是构造函数时</h4><p>即前面可以使用<code>new</code>命令。使用方法几乎等同于工具函数Object()，但是语义不一样。工具函数是指<strong>转换</strong>成对象。</p>\n<h4 id=\"Object静态方法（即将Object看成一个普通的对象）\"><a href=\"#Object静态方法（即将Object看成一个普通的对象）\" class=\"headerlink\" title=\"Object静态方法（即将Object看成一个普通的对象）\"></a>Object静态方法（即将Object看成一个普通的对象）</h4><p>即部署在Object对象自身的方法。</p>\n<h5 id=\"遍历对象的属性\"><a href=\"#遍历对象的属性\" class=\"headerlink\" title=\"遍历对象的属性\"></a>遍历对象的属性</h5><ul>\n<li>Object.keys()</li>\n<li>Object.getOwnPropertyNames()</li>\n</ul>\n<p>这两个的参数都是一个对象。区别在于，keys只返回可枚举的属性，而getOwnPropertyNames方法还可以返回补课枚举的属性。</p>\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li>对象属性模型的相关方法</li>\n<li>控制对象状态的方法</li>\n<li>原型链相关方法</li>\n</ul>\n<h4 id=\"Object的实例方法\"><a href=\"#Object的实例方法\" class=\"headerlink\" title=\"Object的实例方法\"></a>Object的实例方法</h4><p>也就是定义在Object.prototype对象上的方法。所有Object的实例对象都继承了这些方法。</p>\n<h5 id=\"Object-prototype-valueOf\"><a href=\"#Object-prototype-valueOf\" class=\"headerlink\" title=\"Object.prototype.valueOf()\"></a>Object.prototype.valueOf()</h5><p>返回一个对象的值，默认返回对象本身。其主要作用在于，自动类型转换时会<strong>调用</strong>。</p>\n<h5 id=\"Obbject-prototype-toString\"><a href=\"#Obbject-prototype-toString\" class=\"headerlink\" title=\"Obbject.prototype.toString()\"></a>Obbject.prototype.toString()</h5><p>返回一个对象的字符串形式。默认返回<strong>类型</strong>字符串。也用于自动类型转换。可以得到想要的字符串形式。<br><strong>注意，</strong>这些函数有可能被用户重写，如果依然想调用，最好使用<code>Object.prototype.toString.call()</code>方法。<br>可以用于判断类型以及构造函数。这样会比<code>typeof</code>运算符更精确。</p>\n<h5 id=\"Object-prototype-toLocalString\"><a href=\"#Object-prototype-toLocalString\" class=\"headerlink\" title=\"Object.prototype.toLocalString()\"></a>Object.prototype.toLocalString()</h5><p>与<code>toString</code>基本相同，也是返回字符串，但是可以加上一些用户的信息。比如返回日期的实例类型对象时，就和地域相关。</p>\n<h5 id=\"Object-prototype-hasOwnProperty\"><a href=\"#Object-prototype-hasOwnProperty\" class=\"headerlink\" title=\"Object.prototype.hasOwnProperty()\"></a>Object.prototype.hasOwnProperty()</h5><p>返回一个布尔值，表示该实例对象自身是否具有该属性。</p>\n<h3 id=\"属性描述对象\"><a href=\"#属性描述对象\" class=\"headerlink\" title=\"属性描述对象\"></a>属性描述对象</h3><p>是一种数据结构，用来描述某个属性是否可写、可遍历等。每个属性都有自己的属性描述对象。</p>\n<h4 id=\"Object-getOwnPropertyDescription\"><a href=\"#Object-getOwnPropertyDescription\" class=\"headerlink\" title=\"Object.getOwnPropertyDescription()\"></a>Object.getOwnPropertyDescription()</h4><p>获取属性描述对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescription()</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他方法-1\"><a href=\"#其他方法-1\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><ul>\n<li>Object.getOwnPropertyNames()</li>\n<li>Object.defineProkperty()</li>\n<li>Object.defineProperties()</li>\n<li>Object.prototype.propertyIsEnumerable()</li>\n</ul>\n<h4 id=\"元属性\"><a href=\"#元属性\" class=\"headerlink\" title=\"元属性\"></a>元属性</h4><p>也就是属性描述对象的属性</p>\n<ul>\n<li>value</li>\n<li>writable</li>\n<li>enumerable — 可以用来设置私密属性，只是不可以遍历到，但是还是可以访问的。如果要获取自身的所有属性（不管是否可遍历，都可以使用getOwnPropertyNames）</li>\n<li>configurable – 是否可以修改属性描述对象</li>\n<li><p>getter/setter – 存取器</p>\n<p>  存取器有两种写法，一个是在键<code>get</code>和<code>set</code>的后面直接给出值。另一种是<code>get p() {}</code>和<code>set p(value) {}</code></p>\n</li>\n</ul>\n<h4 id=\"对象的拷贝\"><a href=\"#对象的拷贝\" class=\"headerlink\" title=\"对象的拷贝\"></a>对象的拷贝</h4><p>这里要注意的是，怎么拷贝过来get()属性等。</p>\n<h4 id=\"控制对象状态\"><a href=\"#控制对象状态\" class=\"headerlink\" title=\"控制对象状态\"></a>控制对象状态</h4><ul>\n<li>Object.preventExtentions()</li>\n<li>Object.isExtensible()</li>\n<li>Object.seal()</li>\n<li>Object.isSealed()</li>\n<li>Object.freeze()</li>\n<li>Object.isFrozen()</li>\n</ul>\n<h3 id=\"Array对象\"><a href=\"#Array对象\" class=\"headerlink\" title=\"Array对象\"></a>Array对象</h3><p><code>Array</code>是JS的原生<strong>对象</strong>，同时也是<strong>构造函数</strong>。</p>\n<p>因为当Array构造函数的参数不同时，他的行为很不一致，所以最好直接使用数组字面量来创建新数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//good </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><h5 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h5><p>可以弥补<code>typeof</code>运算符的不足。</p>\n<h4 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h4><ul>\n<li>valueOf()</li>\n<li>toString()</li>\n<li>push(), pop()</li>\n<li>shift(), unshift()</li>\n<li>join()—连接数组成员为字符串（可以自定义分隔符）</li>\n<li>concat() —— 用于多个数组的合并</li>\n<li>reverse()</li>\n<li>slice() - arr.slice(start, end) –提取</li>\n<li>splice() - arr.splice(start, end, addElem1, addElem2 ,….)删除，并且可以在删除的位置添加。返回值是被删除的元素。</li>\n<li>sort()</li>\n<li>map()</li>\n<li>forEach()</li>\n<li>filter()</li>\n<li>some(), every()</li>\n<li>reduce(), reduceRight()</li>\n<li>indexOf(), lastIndexOf</li>\n</ul>\n<h3 id=\"包装对象\"><a href=\"#包装对象\" class=\"headerlink\" title=\"包装对象\"></a>包装对象</h3><p>就是将三种原始数据类型的值（数值、字符串、布尔值）包装为对象。</p>\n<h2 id=\"面向对象程序设计\"><a href=\"#面向对象程序设计\" class=\"headerlink\" title=\"面向对象程序设计\"></a>面向对象程序设计</h2><h3 id=\"对象是什么\"><a href=\"#对象是什么\" class=\"headerlink\" title=\"对象是什么\"></a>对象是什么</h3><p>可以从两个方面来理解：</p>\n<ul>\n<li>对象时<strong>单个实物</strong>的抽象。</li>\n<li>对象是一个<strong>容器</strong>，封装了属性和方法。</li>\n</ul>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>JS与C++不同，没有类的概念，也就是他不是基于类的，而是基于<strong>构造函数（constructor）</strong>和<strong>原型链（prototype）</strong>。JS使用构造函数作为对象的<strong>模板</strong>。一个构造函数，可以生成多个实例对象。</p>\n<p>构造函数就是一个普通的函数，但是有自己的特征和用法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Vehicle = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.price = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>为了与普通函数区别，构造函数名字的第一个字母通常大写。</p>\n<p>new命令：因为new命令本身就可以执行函数，不再需要函数的调用，所以可以不加括号执行，但是还是推荐加括号。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> Vehicle();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> Vehicle;</span><br></pre></td></tr></table></figure>\n<p>如果不使用<code>new</code>命令，而直接调用构造函数，会发生：构造函数变为普通函数，不会再生成实例对象，这里的<code>this</code>也将会代表全局对象。</p>\n<h4 id=\"new命令执行过程\"><a href=\"#new命令执行过程\" class=\"headerlink\" title=\"new命令执行过程\"></a>new命令执行过程</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">constructor, plarams</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将arguments对象转为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">//取出构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">constructor</span> = args.shift();</span><br><span class=\"line\">    //创建一个空对象，继承构造函数的prototype属性</span><br><span class=\"line\">    var context = Object.create(<span class=\"keyword\">constructor</span>.prototype);</span><br><span class=\"line\">    //执行构造函数</span><br><span class=\"line\">    var result = <span class=\"keyword\">constructor</span>.apply(context, args);</span><br><span class=\"line\">    //如果返回结果是对象，就直接返回，否则返回context对象。</span><br><span class=\"line\">    return (typeof result === 'object' &amp;&amp; result != null) ? result:context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实例</span><br><span class=\"line\">var actor = _new(Person, '张三', 28);</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例化对象的另一个方法Object-create\"><a href=\"#实例化对象的另一个方法Object-create\" class=\"headerlink\" title=\"实例化对象的另一个方法Object.create()\"></a>实例化对象的另一个方法Object.create()</h3><p>在拿不到构造函数，而只能拿到一个现有的对象的时候，我们可以以这个对象为模板，来生成新的实例对象。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpccu58u0000jcm1wff5hs5q","category_id":"cjpccu5910004jcm1l66oh95e","_id":"cjpccu59f000hjcm1chtswsw0"},{"post_id":"cjpccu58y0002jcm1bzbkswuu","category_id":"cjpccu599000bjcm1pyombk9a","_id":"cjpccu59k000rjcm17mznhcji"},{"post_id":"cjpccu5930006jcm1t1m9sda3","category_id":"cjpccu59f000jjcm1musklm7f","_id":"cjpccu59o000yjcm1gqon93mh"},{"post_id":"cjpccu59i000ojcm15nmbcq4q","category_id":"cjpccu599000bjcm1pyombk9a","_id":"cjpccu59s0013jcm1zzlv5y2t"},{"post_id":"cjpccu59k000ujcm1i8e5rmcv","category_id":"cjpccu5910004jcm1l66oh95e","_id":"cjpccu59v0016jcm1jset2mym"},{"post_id":"cjpccu5950008jcm1jaiod4x3","category_id":"cjpccu59k000sjcm1nuckpujl","_id":"cjpccu59x001ajcm18tenki4l"},{"post_id":"cjpccu59n000wjcm1f9xxh6sh","category_id":"cjpccu59f000jjcm1musklm7f","_id":"cjpccu5a0001djcm1866af44r"},{"post_id":"cjpccu59q0011jcm1du1rq5wb","category_id":"cjpccu5910004jcm1l66oh95e","_id":"cjpccu5a2001ijcm1z4v6r48s"},{"post_id":"cjpccu59t0014jcm1stimmsot","category_id":"cjpccu5910004jcm1l66oh95e","_id":"cjpccu5a4001ljcm1zhtcmnq2"},{"post_id":"cjpccu597000ajcm1k82e2zxv","category_id":"cjpccu59p000zjcm12vfvq0lb","_id":"cjpccu5a5001ojcm1za7yjafp"},{"post_id":"cjpccu59y001cjcm1nrsmf1ip","category_id":"cjpccu599000bjcm1pyombk9a","_id":"cjpccu5a5001rjcm1gta2p4st"},{"post_id":"cjpccu59b000ejcm1v7x4res8","category_id":"cjpccu59k000sjcm1nuckpujl","_id":"cjpccu5a6001ujcm11gzcwhu2"},{"post_id":"cjpccu5a0001fjcm1hka5ks00","category_id":"cjpccu599000bjcm1pyombk9a","_id":"cjpccu5a6001wjcm1szktj6c3"},{"post_id":"cjpccu59e000gjcm1dtaakr0d","category_id":"cjpccu59k000sjcm1nuckpujl","_id":"cjpccu5a6001yjcm1ee9clxnk"},{"post_id":"cjpccu59g000ljcm180qdare6","category_id":"cjpccu5a4001njcm17cbu3mbr","_id":"cjpccu5a70020jcm1xot7i77f"},{"post_id":"cjpccu59v0017jcm10den83v5","category_id":"cjpccu5a5001sjcm1lx0wmgol","_id":"cjpccu5a70021jcm1w32dxa8q"},{"post_id":"cjpccu5a3001kjcm1h3ouyt69","category_id":"cjpccu5a5001sjcm1lx0wmgol","_id":"cjpccu5a80024jcm1m84ectxo"},{"post_id":"cjpccu66q003rjcm19cxfbnux","category_id":"cjpccu59k000sjcm1nuckpujl","_id":"cjpccu66u003vjcm1tsdhwusz"}],"PostTag":[{"post_id":"cjpccu58u0000jcm1wff5hs5q","tag_id":"cjpccu5930005jcm1ob01xe4v","_id":"cjpccu59h000mjcm1u9bbfz87"},{"post_id":"cjpccu58u0000jcm1wff5hs5q","tag_id":"cjpccu599000cjcm1t8ev2kmj","_id":"cjpccu59j000pjcm1g4w7p3c1"},{"post_id":"cjpccu58y0002jcm1bzbkswuu","tag_id":"cjpccu59f000kjcm17d744bem","_id":"cjpccu59y001bjcm1083c5uwr"},{"post_id":"cjpccu58y0002jcm1bzbkswuu","tag_id":"cjpccu59k000tjcm12ncmiot0","_id":"cjpccu5a0001ejcm1krq3ob7n"},{"post_id":"cjpccu58y0002jcm1bzbkswuu","tag_id":"cjpccu59p0010jcm1kxf1ascf","_id":"cjpccu5a2001jjcm1nn6unmgr"},{"post_id":"cjpccu59y001cjcm1nrsmf1ip","tag_id":"cjpccu59f000kjcm17d744bem","_id":"cjpccu5a4001mjcm129uryzo6"},{"post_id":"cjpccu5930006jcm1t1m9sda3","tag_id":"cjpccu59w0019jcm1st2znbkv","_id":"cjpccu5a5001qjcm1g03o36tl"},{"post_id":"cjpccu5930006jcm1t1m9sda3","tag_id":"cjpccu5a2001hjcm1vtywbyvj","_id":"cjpccu5a5001tjcm1p4taf45n"},{"post_id":"cjpccu5950008jcm1jaiod4x3","tag_id":"cjpccu5a5001pjcm1qbi8mi1i","_id":"cjpccu5a80023jcm1plzt44el"},{"post_id":"cjpccu5950008jcm1jaiod4x3","tag_id":"cjpccu5a6001vjcm1glzwq7l1","_id":"cjpccu5a80025jcm1p8d0z1t6"},{"post_id":"cjpccu5950008jcm1jaiod4x3","tag_id":"cjpccu5a7001zjcm1nfwt3h9v","_id":"cjpccu5a90027jcm103oweykk"},{"post_id":"cjpccu597000ajcm1k82e2zxv","tag_id":"cjpccu5a70022jcm1x6v45rzr","_id":"cjpccu5aa0028jcm1l206q0qt"},{"post_id":"cjpccu59b000ejcm1v7x4res8","tag_id":"cjpccu59f000kjcm17d744bem","_id":"cjpccu5ac002cjcm1hltp9bqw"},{"post_id":"cjpccu59b000ejcm1v7x4res8","tag_id":"cjpccu5a6001vjcm1glzwq7l1","_id":"cjpccu5ac002djcm1xbg0kuu8"},{"post_id":"cjpccu59b000ejcm1v7x4res8","tag_id":"cjpccu5ab002ajcm12rujpxiq","_id":"cjpccu5ac002fjcm1ma7ujhvh"},{"post_id":"cjpccu59e000gjcm1dtaakr0d","tag_id":"cjpccu5ac002bjcm1rjbf338i","_id":"cjpccu5ac002gjcm1uwt0ac46"},{"post_id":"cjpccu59g000ljcm180qdare6","tag_id":"cjpccu5ac002ejcm1sv2tp9h1","_id":"cjpccu5ad002ijcm1bc4i28gu"},{"post_id":"cjpccu59i000ojcm15nmbcq4q","tag_id":"cjpccu59f000kjcm17d744bem","_id":"cjpccu5ag002mjcm12s7x7tnd"},{"post_id":"cjpccu59i000ojcm15nmbcq4q","tag_id":"cjpccu5a6001vjcm1glzwq7l1","_id":"cjpccu5ag002njcm1ebedn6de"},{"post_id":"cjpccu59i000ojcm15nmbcq4q","tag_id":"cjpccu5930005jcm1ob01xe4v","_id":"cjpccu5ah002pjcm1kw8d7hf9"},{"post_id":"cjpccu59i000ojcm15nmbcq4q","tag_id":"cjpccu5ae002jjcm1aciw603z","_id":"cjpccu5ah002qjcm1250ibegn"},{"post_id":"cjpccu59i000ojcm15nmbcq4q","tag_id":"cjpccu5ae002kjcm180z7olfo","_id":"cjpccu5ai002sjcm1668e4x9l"},{"post_id":"cjpccu59k000ujcm1i8e5rmcv","tag_id":"cjpccu5af002ljcm1dxsctos1","_id":"cjpccu5ai002tjcm115kvq4qj"},{"post_id":"cjpccu59k000ujcm1i8e5rmcv","tag_id":"cjpccu5ag002ojcm17z3wnnz7","_id":"cjpccu5aj002vjcm12qd02tjr"},{"post_id":"cjpccu59k000ujcm1i8e5rmcv","tag_id":"cjpccu5930005jcm1ob01xe4v","_id":"cjpccu5aj002wjcm1npks6mwg"},{"post_id":"cjpccu59n000wjcm1f9xxh6sh","tag_id":"cjpccu5a2001hjcm1vtywbyvj","_id":"cjpccu5aj002yjcm1ttvg2y97"},{"post_id":"cjpccu59n000wjcm1f9xxh6sh","tag_id":"cjpccu5ai002ujcm15i2i4kqk","_id":"cjpccu5ak002zjcm10xrik9x7"},{"post_id":"cjpccu59q0011jcm1du1rq5wb","tag_id":"cjpccu5a6001vjcm1glzwq7l1","_id":"cjpccu5al0032jcm1xjcck41j"},{"post_id":"cjpccu59q0011jcm1du1rq5wb","tag_id":"cjpccu5ab002ajcm12rujpxiq","_id":"cjpccu5al0033jcm1gwn2z9n7"},{"post_id":"cjpccu59t0014jcm1stimmsot","tag_id":"cjpccu5930005jcm1ob01xe4v","_id":"cjpccu5am0035jcm1kc6fd80u"},{"post_id":"cjpccu59t0014jcm1stimmsot","tag_id":"cjpccu5ak0031jcm1qldltztn","_id":"cjpccu5am0036jcm1y0svp03f"},{"post_id":"cjpccu59v0017jcm10den83v5","tag_id":"cjpccu5930005jcm1ob01xe4v","_id":"cjpccu5an003bjcm1fmyprycj"},{"post_id":"cjpccu59v0017jcm10den83v5","tag_id":"cjpccu5a6001vjcm1glzwq7l1","_id":"cjpccu5an003cjcm1v9hlwto8"},{"post_id":"cjpccu59v0017jcm10den83v5","tag_id":"cjpccu5am0037jcm19sb9k0qb","_id":"cjpccu5ao003ejcm19ny53aiw"},{"post_id":"cjpccu59v0017jcm10den83v5","tag_id":"cjpccu5am0038jcm17l9e7wf9","_id":"cjpccu5ao003fjcm12m9epbai"},{"post_id":"cjpccu59v0017jcm10den83v5","tag_id":"cjpccu5an0039jcm1fwla1pan","_id":"cjpccu5ap003hjcm159mw2twk"},{"post_id":"cjpccu5a0001fjcm1hka5ks00","tag_id":"cjpccu5an003ajcm142g18wsh","_id":"cjpccu5ap003ijcm1u6fjdwg0"},{"post_id":"cjpccu5a0001fjcm1hka5ks00","tag_id":"cjpccu5ao003djcm1bhxm7ml0","_id":"cjpccu5ap003kjcm1i8puq345"},{"post_id":"cjpccu5a3001kjcm1h3ouyt69","tag_id":"cjpccu5930005jcm1ob01xe4v","_id":"cjpccu5aq003mjcm1g6fpk7h9"},{"post_id":"cjpccu5a3001kjcm1h3ouyt69","tag_id":"cjpccu5a6001vjcm1glzwq7l1","_id":"cjpccu5aq003njcm1k24gcx9p"},{"post_id":"cjpccu5a3001kjcm1h3ouyt69","tag_id":"cjpccu5am0038jcm17l9e7wf9","_id":"cjpccu5aq003ojcm1xp4wmscc"},{"post_id":"cjpccu5a3001kjcm1h3ouyt69","tag_id":"cjpccu5aq003ljcm196b49ce4","_id":"cjpccu5ar003pjcm1rhrtcq7u"},{"post_id":"cjpccu66q003rjcm19cxfbnux","tag_id":"cjpccu66s003tjcm1a1crkoi2","_id":"cjpccu66u003wjcm1h5dr5kxj"}],"Tag":[{"name":"Linux","_id":"cjpccu5930005jcm1ob01xe4v"},{"name":"Bash","_id":"cjpccu599000cjcm1t8ev2kmj"},{"name":"Hexo","_id":"cjpccu59f000kjcm17d744bem"},{"name":"Swiftype","_id":"cjpccu59k000tjcm12ncmiot0"},{"name":"站内搜索","_id":"cjpccu59p0010jcm1kxf1ascf"},{"name":"KeePass","_id":"cjpccu59w0019jcm1st2znbkv"},{"name":"Chrome","_id":"cjpccu5a2001hjcm1vtywbyvj"},{"name":"leanote","_id":"cjpccu5a5001pjcm1qbi8mi1i"},{"name":"VPS","_id":"cjpccu5a6001vjcm1glzwq7l1"},{"name":"web","_id":"cjpccu5a7001zjcm1nfwt3h9v"},{"name":"Safari","_id":"cjpccu5a70022jcm1x6v45rzr"},{"name":"Dropbox","_id":"cjpccu5ab002ajcm12rujpxiq"},{"name":"ghost blog","_id":"cjpccu5ac002bjcm1rjbf338i"},{"name":"colab","_id":"cjpccu5ac002ejcm1sv2tp9h1"},{"name":"cloud9","_id":"cjpccu5ae002jjcm1aciw603z"},{"name":"Docker","_id":"cjpccu5ae002kjcm180z7olfo"},{"name":"Ubuntu","_id":"cjpccu5af002ljcm1dxsctos1"},{"name":"系统安装","_id":"cjpccu5ag002ojcm17z3wnnz7"},{"name":"插件","_id":"cjpccu5ai002ujcm15i2i4kqk"},{"name":"双系统","_id":"cjpccu5ak0031jcm1qldltztn"},{"name":"python","_id":"cjpccu5am0037jcm19sb9k0qb"},{"name":"c++","_id":"cjpccu5am0038jcm17l9e7wf9"},{"name":"jupyter-notebook","_id":"cjpccu5an0039jcm1fwla1pan"},{"name":"Markdown","_id":"cjpccu5an003ajcm142g18wsh"},{"name":"七牛云","_id":"cjpccu5ao003djcm1bhxm7ml0"},{"name":"Jupyter","_id":"cjpccu5aq003ljcm196b49ce4"},{"name":"javascript","_id":"cjpccu66s003tjcm1a1crkoi2"}]}}